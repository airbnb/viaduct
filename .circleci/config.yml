version: 2.1

orbs:
  gradle: circleci/gradle@3.0.0

executors:
  kotlin-gradle-executor:
    docker:
      - image: cimg/openjdk:21.0
    working_directory: ~/project
    environment:
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx3g -XX:MaxMetaspaceSize=1g -XX:+EnableDynamicAgentLoading"
      # Improve build performance
      GRADLE_OPTS_EXTRA: "-Dorg.gradle.parallel=false -Dorg.gradle.caching=false -Dorg.gradle.daemon=false"
      # Disable build scans in CI to avoid network timeouts
      GRADLE_SCAN: "false"

commands:
  gradle-with-cache:
    parameters:
      steps:
        type: steps
    steps:
      - gradle/with_cache:
          cache_key: "v4-{{ checksum \"build.gradle.kts\" }}-{{ checksum \"gradle/libs.versions.toml\" }}"
          steps: << parameters.steps >>

  fail-step:
    parameters:
      message:
        type: string
    steps:
      - run:
          name: Build Failure Handler
          command: |
            echo "‚ùå FAILURE: << parameters.message >>"
            echo "üìã Build Information:"
            echo "  - Job: ${CIRCLE_JOB}"
            echo "  - Build: ${CIRCLE_BUILD_NUM}"
            echo "  - Branch: ${CIRCLE_BRANCH}"
            echo "  - SHA: ${CIRCLE_SHA1}"
            echo "  - Workflow ID: ${CIRCLE_WORKFLOW_ID}"
            echo "  - Node: ${CIRCLE_NODE_INDEX:-0}"
            echo "‚è∞ Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo "üîó Build URL: ${CIRCLE_BUILD_URL}"
            echo ""
            echo "üí° Troubleshooting tips:"
            echo "  1. Check the logs above for specific error messages"
            echo "  2. Verify all dependencies are properly installed"
            echo "  3. Review recent changes that might have caused this failure"
            exit 1
          when: on_fail

  setup-gradle:
    steps:
      - run:
          name: Set Gradle permissions
          command: |
            if [ ! -f "./gradlew" ]; then
              echo "‚ùå ERROR: gradlew script not found in $(pwd)"
              ls -la
              exit 1
            fi
            chmod +x ./gradlew
            echo "‚úÖ Gradle wrapper permissions set successfully"

jobs:
  build:
    executor: kotlin-gradle-executor
    steps:
      - checkout


      - setup-gradle
      - fail-step:
          message: "Gradle setup failed"

      # Use Gradle orb for optimal caching
      - gradle-with-cache:
          steps:
            - run:
                name: Download dependencies
                command: |
                  echo "üì• Downloading Gradle dependencies..."
                  ./gradlew dependencies --no-scan || {
                    echo "‚ùå Failed to download dependencies"
                    exit 1
                  }
                  echo "‚úÖ Dependencies downloaded successfully"
      - fail-step:
          message: "Dependency download failed"

      - gradle-with-cache:
          steps:
            - run:
                name: Build project (without tests)
                command: |
                  echo "üî® Building project (without tests)..."
                  ./gradlew clean assemble --no-scan || {
                    echo "‚ùå Build failed"
                    exit 1
                  }
                  echo "‚úÖ Project built successfully"
      - fail-step:
          message: "Project build failed"

      - run:
          name: Collect build artifacts
          command: |
            echo "üì¶ Collecting artifacts..."
            rm -rf build/package
            mkdir -p build/package/{primary,sources,javadoc,others}

            # Primary jars (exclude sources/javadoc)
            find . -type f -path "*/build/libs/*.jar" \
              ! -name "*-sources.jar" ! -name "*-javadoc.jar" \
              -exec cp {} build/package/primary/ \; || true

            # Sources & Javadoc jars (if any)
            find . -type f -path "*/build/libs/*-sources.jar" -exec cp {} build/package/sources/ \; || true
            find . -type f -path "*/build/libs/*-javadoc.jar" -exec cp {} build/package/javadoc/ \; || true

            # (Optional) POMs or other publish files
            find . -type f -path "*/build/publications/*/*.pom" -exec cp {} build/package/others/ \; || true

            echo "‚úÖ Collected:"
            find build/package -type f -maxdepth 2 -print

      - store_artifacts:
          path: build/package
          destination: package

      # TODO: Enable Dokka documentation generation
      # Currently disabled due to complex multi-module conflicts and dependency issues
      # - gradle-with-cache:
      #     steps:
      #       - run:
      #           name: Generate Documentation in HTML with Dokka (multi module)
      #           command: |
      #             echo "üìù Generating Dokka documentation..."
      #             ./gradlew dokkaHtmlMultiModule --no-scan --no-configuration-cache || {
      #               echo "‚ùå Dokka documentation generation failed"
      #               exit 1
      #             }
      #             echo "‚úÖ Dokka documentation generated successfully"
      # - fail-step:
      #     message: "Dokka documentation generation failed"

      # - run:
      #     name: Dump Dokka problem report
      #     command: |
      #       if [ -f build/reports/problems/problems-report.html ]; then
      #         echo "==== Dokka Problem Report ===="
      #         cat build/reports/problems/problems-report.html | sed -e 's/<[^>]*>//g' | head -n 100
      #       else
      #         echo "No Dokka problem report found."
      #       fi

      # TODO: Re-enable when Dokka is working
      # - store_artifacts:
      #     path: build/dokka
      #     destination: kdoc-html

      - persist_to_workspace:
          root: .
          paths:
            - build
            - .gradle
            - build/package

  test:
    executor: kotlin-gradle-executor
    steps:
      - checkout


      # Restore workspace from build job
      - attach_workspace:
          at: ~/project
      - fail-step:
          message: "Failed to restore workspace in test job"

      - setup-gradle
      - fail-step:
          message: "Gradle setup failed in test job"

      - gradle-with-cache:
          steps:
            - run:
                name: Run tests
                command: |
                  echo "üß™ Running tests..."
                  ./gradlew test --no-scan --continue || {
                    echo "‚ö†Ô∏è Some tests failed, but continuing"
                    echo "Test failures are not blocking the pipeline"
                  }
                  echo "‚úÖ Test execution completed"

            # TODO: Enable JaCoCo coverage when ready
            # - run:
            #     name: Generate JaCoCo aggregated coverage report
            #     command: |
            #       echo "üìä Generating JaCoCo aggregated coverage report..."
            #       ./gradlew jacocoAggregatedReport --no-scan || {
            #         echo "‚ùå Failed to generate coverage report"
            #         exit 1
            #       }
            #       echo "‚úÖ Coverage report generated successfully"
            #     when: always
      # - fail-step:
      #     message: "JaCoCo coverage report generation failed"

      # Store test results for CircleCI UI
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*/.*\.xml" -exec cp {} ~/test-results/junit/ \; || echo "No test result files found"
            echo "Test result files found:"
            find ~/test-results/junit/ -name "*.xml" -ls || echo "No XML files in test-results directory"
          when: always

      - store_test_results:
          path: ~/test-results

      # TODO: Re-enable JaCoCo coverage reports when ready
      # Store JaCoCo coverage reports
      # - store_artifacts:
      #     path: build/reports/jacoco/aggregate/html
      #     destination: coverage-html
      #
      # - store_artifacts:
      #     path: build/reports/jacoco/aggregate/jacocoTestReport.xml
      #     destination: coverage-xml
      #
      # # Coverage reports are stored as artifacts above
      #
      # # Store individual project coverage reports
      # - run:
      #     name: Collect individual coverage reports
      #     command: |
      #       mkdir -p ~/coverage-reports
      #       find . -path "*/build/reports/jacoco/test/html" -type d -exec cp -r {} ~/coverage-reports/ \; || true
      #     when: always
      #
      # - store_artifacts:
      #     path: ~/coverage-reports
      #     destination: individual-coverage

  lint:
    executor: kotlin-gradle-executor
    steps:
      - checkout


      - attach_workspace:
          at: ~/project
      - fail-step:
          message: "Failed to restore workspace in lint job"

      - setup-gradle
      - fail-step:
          message: "Gradle setup failed in lint job"

      - gradle-with-cache:
          steps:
            - run:
                name: Run ktlint
                command: |
                  echo "üßπ Running ktlint code style checks..."
                  ./gradlew ktlintCheck --no-scan || {
                    echo "‚ùå ktlint found code style violations"
                    exit 1
                  }
                  echo "‚úÖ ktlint checks passed"

            - run:
                name: Run Detekt
                command: |
                  echo "üîç Running Detekt static analysis..."
                  ./gradlew detekt --no-scan || {
                    echo "‚ùå Detekt found code quality issues"
                    exit 1
                  }
                  echo "‚úÖ Detekt analysis passed"
      - fail-step:
          message: "Detekt static analysis failed"

      - store_artifacts:
          path: build/reports/detekt
          destination: detekt-reports

  docs:
    executor: kotlin-gradle-executor
    steps:
      - checkout


      - attach_workspace:
          at: ~/project
      - fail-step:
          message: "Failed to restore workspace in docs job"

      - setup-gradle
      - fail-step:
          message: "Gradle setup failed in docs job"

      - gradle-with-cache:
          steps:
            - run:
                name: Generate Javadoc
                command: |
                  echo "üìù Generating Javadoc documentation..."
                  ./gradlew javadoc --no-scan || {
                    echo "‚ùå Javadoc generation failed"
                    exit 1
                  }
                  echo "‚úÖ Javadoc generated successfully"
      - fail-step:
          message: "Javadoc generation failed"

      - store_artifacts:
          path: build/docs/javadoc
          destination: javadoc

  coverage-verification:
    executor: kotlin-gradle-executor
    steps:
      - checkout


      - attach_workspace:
          at: ~/project
      - fail-step:
          message: "Failed to restore workspace in coverage-verification job"

      - setup-gradle
      - fail-step:
          message: "Gradle setup failed in coverage-verification job"

      - gradle-with-cache:
          steps:
            - run:
                name: Verify coverage thresholds
                command: |
                  echo "üéØ Verifying coverage thresholds..."
                  ./gradlew jacocoTestCoverageVerification --no-scan || {
                    echo "‚ùå Coverage thresholds not met"
                    echo "Please check the coverage report and add more tests"
                    exit 1
                  }
                  echo "‚úÖ Coverage thresholds met successfully"
      - fail-step:
          message: "Coverage threshold verification failed"

  deploy-docs:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project
    steps:
      - checkout

      - run:
          name: Install Git
          command: |
            echo "üì¶ Installing Git..."
            sudo apt update -y && sudo DEBIAN_FRONTEND=noninteractive apt install -y git || {
              echo "‚ùå Failed to install Git"
              exit 1
            }
            echo "‚úÖ Git installed successfully"
      - fail-step:
          message: "Git installation failed"

      - attach_workspace:
          at: ~/project/

      - run:
          name: Verify Dokka documentation exists
          command: |
            echo "üîç Verifying Dokka documentation..."
            set -eo pipefail
            if [ ! -f ".circleci/scripts/check_docs.sh" ]; then
              echo "‚ùå check_docs.sh script not found"
              exit 1
            fi
            chmod +x .circleci/scripts/check_docs.sh
            sh .circleci/scripts/check_docs.sh || {
              echo "‚ùå Documentation verification failed"
              exit 1
            }
            echo "‚úÖ Documentation verification completed"
      - fail-step:
          message: "Documentation verification failed"

      - run:
          name: Deploy Dokka HTML to GitHub Pages
          command: |
            echo "üöÄ Deploying documentation to GitHub Pages..."
            set -eo pipefail
            if [ ! -f ".circleci/scripts/deploy_docs.sh" ]; then
              echo "‚ùå deploy_docs.sh script not found"
              exit 1
            fi
            chmod +x .circleci/scripts/deploy_docs.sh
            sh .circleci/scripts/deploy_docs.sh || {
              echo "‚ùå Documentation deployment failed"
              exit 1
            }
            echo "‚úÖ Documentation deployed successfully"
      - fail-step:
          message: "Documentation deployment failed"

workflows:
  build-and-test:
    when:
      or:
        - equal: [ main, << pipeline.git.branch >> ]
        - equal: [ master, << pipeline.git.branch >> ]
    jobs:
      - build
      - test:
          requires:
            - build
      - lint:
          requires:
            - build
      - docs:
          requires:
            - build
      # TODO: Re-enable when JaCoCo coverage is working
      # - coverage-verification:
      #     requires:
      #       - test
      # TODO: Re-enable when Dokka documentation is working
      # - deploy-docs:
      #     requires:
      #       - build

  pull-request:
    when:
      and:
        - not:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ master, << pipeline.git.branch >> ]
        - not: << pipeline.git.tag >>
    jobs:
      - build
      - test:
          requires:
            - build
      - lint:
          requires:
            - build
      - docs:
          requires:
            - build
