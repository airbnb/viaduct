[{"name":"DISABLE_QUERY_PLAN_CACHE","description":"viaduct.service.api.spi.Flags.DISABLE_QUERY_PLAN_CACHE","location":"service/service-api/viaduct.service.api.spi/-flags/-d-i-s-a-b-l-e_-q-u-e-r-y_-p-l-a-n_-c-a-c-h-e/index.html","searchKeys":["DISABLE_QUERY_PLAN_CACHE","DISABLE_QUERY_PLAN_CACHE","viaduct.service.api.spi.Flags.DISABLE_QUERY_PLAN_CACHE"]},{"name":"EXECUTE_ACCESS_CHECKS_IN_MODERN_EXECUTION_STRATEGY","description":"viaduct.service.api.spi.Flags.EXECUTE_ACCESS_CHECKS_IN_MODERN_EXECUTION_STRATEGY","location":"service/service-api/viaduct.service.api.spi/-flags/-e-x-e-c-u-t-e_-a-c-c-e-s-s_-c-h-e-c-k-s_-i-n_-m-o-d-e-r-n_-e-x-e-c-u-t-i-o-n_-s-t-r-a-t-e-g-y/index.html","searchKeys":["EXECUTE_ACCESS_CHECKS_IN_MODERN_EXECUTION_STRATEGY","EXECUTE_ACCESS_CHECKS_IN_MODERN_EXECUTION_STRATEGY","viaduct.service.api.spi.Flags.EXECUTE_ACCESS_CHECKS_IN_MODERN_EXECUTION_STRATEGY"]},{"name":"abstract fun create(): TenantAPIBootstrapper","description":"viaduct.service.api.spi.TenantAPIBootstrapperBuilder.create","location":"service/service-api/viaduct.service.api.spi/-tenant-a-p-i-bootstrapper-builder/create.html","searchKeys":["create","abstract fun create(): TenantAPIBootstrapper","viaduct.service.api.spi.TenantAPIBootstrapperBuilder.create"]},{"name":"abstract fun execute(executionInput: ExecutionInput): ExecutionResult","description":"viaduct.service.api.Viaduct.execute","location":"service/service-api/viaduct.service.api/-viaduct/execute.html","searchKeys":["execute","abstract fun execute(executionInput: ExecutionInput): ExecutionResult","viaduct.service.api.Viaduct.execute"]},{"name":"abstract fun executeAsync(executionInput: ExecutionInput): CompletableFuture<ExecutionResult>","description":"viaduct.service.api.Viaduct.executeAsync","location":"service/service-api/viaduct.service.api/-viaduct/execute-async.html","searchKeys":["executeAsync","abstract fun executeAsync(executionInput: ExecutionInput): CompletableFuture<ExecutionResult>","viaduct.service.api.Viaduct.executeAsync"]},{"name":"abstract fun getAppliedScopes(schemaId: String): Set<String>?","description":"viaduct.service.api.Viaduct.getAppliedScopes","location":"service/service-api/viaduct.service.api/-viaduct/get-applied-scopes.html","searchKeys":["getAppliedScopes","abstract fun getAppliedScopes(schemaId: String): Set<String>?","viaduct.service.api.Viaduct.getAppliedScopes"]},{"name":"abstract fun getSchema(schemaId: String): ViaductSchema?","description":"viaduct.service.api.Viaduct.getSchema","location":"service/service-api/viaduct.service.api/-viaduct/get-schema.html","searchKeys":["getSchema","abstract fun getSchema(schemaId: String): ViaductSchema?","viaduct.service.api.Viaduct.getSchema"]},{"name":"abstract fun isEnabled(flag: Flag): Boolean","description":"viaduct.service.api.spi.FlagManager.isEnabled","location":"service/service-api/viaduct.service.api.spi/-flag-manager/is-enabled.html","searchKeys":["isEnabled","abstract fun isEnabled(flag: Flag): Boolean","viaduct.service.api.spi.FlagManager.isEnabled"]},{"name":"abstract val flagName: String","description":"viaduct.service.api.spi.Flag.flagName","location":"service/service-api/viaduct.service.api.spi/-flag/flag-name.html","searchKeys":["flagName","abstract val flagName: String","viaduct.service.api.spi.Flag.flagName"]},{"name":"constructor(query: String, schemaId: String, requestContext: Any, variables: Map<String, Any?> = emptyMap(), operationName: String? = null)","description":"viaduct.service.api.ExecutionInput.ExecutionInput","location":"service/service-api/viaduct.service.api/-execution-input/-execution-input.html","searchKeys":["ExecutionInput","constructor(query: String, schemaId: String, requestContext: Any, variables: Map<String, Any?> = emptyMap(), operationName: String? = null)","viaduct.service.api.ExecutionInput.ExecutionInput"]},{"name":"data class ExecutionInput(val query: String, val schemaId: String, val requestContext: Any, val variables: Map<String, Any?> = emptyMap(), val operationName: String? = null)","description":"viaduct.service.api.ExecutionInput","location":"service/service-api/viaduct.service.api/-execution-input/index.html","searchKeys":["ExecutionInput","data class ExecutionInput(val query: String, val schemaId: String, val requestContext: Any, val variables: Map<String, Any?> = emptyMap(), val operationName: String? = null)","viaduct.service.api.ExecutionInput"]},{"name":"enum Flags : Enum<Flags> , Flag","description":"viaduct.service.api.spi.Flags","location":"service/service-api/viaduct.service.api.spi/-flags/index.html","searchKeys":["Flags","enum Flags : Enum<Flags> , Flag","viaduct.service.api.spi.Flags"]},{"name":"fun valueOf(value: String): Flags","description":"viaduct.service.api.spi.Flags.valueOf","location":"service/service-api/viaduct.service.api.spi/-flags/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Flags","viaduct.service.api.spi.Flags.valueOf"]},{"name":"fun values(): Array<Flags>","description":"viaduct.service.api.spi.Flags.values","location":"service/service-api/viaduct.service.api.spi/-flags/values.html","searchKeys":["values","fun values(): Array<Flags>","viaduct.service.api.spi.Flags.values"]},{"name":"interface Flag","description":"viaduct.service.api.spi.Flag","location":"service/service-api/viaduct.service.api.spi/-flag/index.html","searchKeys":["Flag","interface Flag","viaduct.service.api.spi.Flag"]},{"name":"interface FlagManager","description":"viaduct.service.api.spi.FlagManager","location":"service/service-api/viaduct.service.api.spi/-flag-manager/index.html","searchKeys":["FlagManager","interface FlagManager","viaduct.service.api.spi.FlagManager"]},{"name":"interface TenantAPIBootstrapperBuilder","description":"viaduct.service.api.spi.TenantAPIBootstrapperBuilder","location":"service/service-api/viaduct.service.api.spi/-tenant-a-p-i-bootstrapper-builder/index.html","searchKeys":["TenantAPIBootstrapperBuilder","interface TenantAPIBootstrapperBuilder","viaduct.service.api.spi.TenantAPIBootstrapperBuilder"]},{"name":"interface Viaduct","description":"viaduct.service.api.Viaduct","location":"service/service-api/viaduct.service.api/-viaduct/index.html","searchKeys":["Viaduct","interface Viaduct","viaduct.service.api.Viaduct"]},{"name":"object default : FlagManager","description":"viaduct.service.api.spi.FlagManager.default","location":"service/service-api/viaduct.service.api.spi/-flag-manager/default/index.html","searchKeys":["default","object default : FlagManager","viaduct.service.api.spi.FlagManager.default"]},{"name":"object disabled : FlagManager","description":"viaduct.service.api.spi.FlagManager.disabled","location":"service/service-api/viaduct.service.api.spi/-flag-manager/disabled/index.html","searchKeys":["disabled","object disabled : FlagManager","viaduct.service.api.spi.FlagManager.disabled"]},{"name":"open override fun isEnabled(flag: Flag): Boolean","description":"viaduct.service.api.spi.FlagManager.default.isEnabled","location":"service/service-api/viaduct.service.api.spi/-flag-manager/default/is-enabled.html","searchKeys":["isEnabled","open override fun isEnabled(flag: Flag): Boolean","viaduct.service.api.spi.FlagManager.default.isEnabled"]},{"name":"open override fun isEnabled(flag: Flag): Boolean","description":"viaduct.service.api.spi.FlagManager.disabled.isEnabled","location":"service/service-api/viaduct.service.api.spi/-flag-manager/disabled/is-enabled.html","searchKeys":["isEnabled","open override fun isEnabled(flag: Flag): Boolean","viaduct.service.api.spi.FlagManager.disabled.isEnabled"]},{"name":"open override val flagName: String","description":"viaduct.service.api.spi.Flags.flagName","location":"service/service-api/viaduct.service.api.spi/-flags/flag-name.html","searchKeys":["flagName","open override val flagName: String","viaduct.service.api.spi.Flags.flagName"]},{"name":"val entries: EnumEntries<Flags>","description":"viaduct.service.api.spi.Flags.entries","location":"service/service-api/viaduct.service.api.spi/-flags/entries.html","searchKeys":["entries","val entries: EnumEntries<Flags>","viaduct.service.api.spi.Flags.entries"]},{"name":"val operationName: String? = null","description":"viaduct.service.api.ExecutionInput.operationName","location":"service/service-api/viaduct.service.api/-execution-input/operation-name.html","searchKeys":["operationName","val operationName: String? = null","viaduct.service.api.ExecutionInput.operationName"]},{"name":"val query: String","description":"viaduct.service.api.ExecutionInput.query","location":"service/service-api/viaduct.service.api/-execution-input/query.html","searchKeys":["query","val query: String","viaduct.service.api.ExecutionInput.query"]},{"name":"val requestContext: Any","description":"viaduct.service.api.ExecutionInput.requestContext","location":"service/service-api/viaduct.service.api/-execution-input/request-context.html","searchKeys":["requestContext","val requestContext: Any","viaduct.service.api.ExecutionInput.requestContext"]},{"name":"val schemaId: String","description":"viaduct.service.api.ExecutionInput.schemaId","location":"service/service-api/viaduct.service.api/-execution-input/schema-id.html","searchKeys":["schemaId","val schemaId: String","viaduct.service.api.ExecutionInput.schemaId"]},{"name":"val variables: Map<String, Any?>","description":"viaduct.service.api.ExecutionInput.variables","location":"service/service-api/viaduct.service.api/-execution-input/variables.html","searchKeys":["variables","val variables: Map<String, Any?>","viaduct.service.api.ExecutionInput.variables"]},{"name":"OPERATION","description":"viaduct.engine.api.ExecutionAttribution.Type.OPERATION","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/-type/-o-p-e-r-a-t-i-o-n/index.html","searchKeys":["OPERATION","OPERATION","viaduct.engine.api.ExecutionAttribution.Type.OPERATION"]},{"name":"POLICY_CHECK","description":"viaduct.engine.api.ExecutionAttribution.Type.POLICY_CHECK","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/-type/-p-o-l-i-c-y_-c-h-e-c-k/index.html","searchKeys":["POLICY_CHECK","POLICY_CHECK","viaduct.engine.api.ExecutionAttribution.Type.POLICY_CHECK"]},{"name":"RESOLVER","description":"viaduct.engine.api.ExecutionAttribution.Type.RESOLVER","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/-type/-r-e-s-o-l-v-e-r/index.html","searchKeys":["RESOLVER","RESOLVER","viaduct.engine.api.ExecutionAttribution.Type.RESOLVER"]},{"name":"VARIABLES_RESOLVER","description":"viaduct.engine.api.ExecutionAttribution.Type.VARIABLES_RESOLVER","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/-type/-v-a-r-i-a-b-l-e-s_-r-e-s-o-l-v-e-r/index.html","searchKeys":["VARIABLES_RESOLVER","VARIABLES_RESOLVER","viaduct.engine.api.ExecutionAttribution.Type.VARIABLES_RESOLVER"]},{"name":"abstract fun <T> enterThreadLocalCoroutineContext(block: suspend CoroutineScope.() -> T): CompletableFuture<T>","description":"viaduct.engine.api.coroutines.CoroutineInterop.enterThreadLocalCoroutineContext","location":"engine/engine-api/viaduct.engine.api.coroutines/-coroutine-interop/enter-thread-local-coroutine-context.html","searchKeys":["enterThreadLocalCoroutineContext","abstract fun <T> enterThreadLocalCoroutineContext(block: suspend CoroutineScope.() -> T): CompletableFuture<T>","viaduct.engine.api.coroutines.CoroutineInterop.enterThreadLocalCoroutineContext"]},{"name":"abstract fun <T> scopedAsync(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): Deferred<T>","description":"viaduct.engine.api.coroutines.CoroutineInterop.scopedAsync","location":"engine/engine-api/viaduct.engine.api.coroutines/-coroutine-interop/scoped-async.html","searchKeys":["scopedAsync","abstract fun <T> scopedAsync(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): Deferred<T>","viaduct.engine.api.coroutines.CoroutineInterop.scopedAsync"]},{"name":"abstract fun <T> scopedFuture(block: suspend CoroutineScope.() -> T): CompletableFuture<T>","description":"viaduct.engine.api.coroutines.CoroutineInterop.scopedFuture","location":"engine/engine-api/viaduct.engine.api.coroutines/-coroutine-interop/scoped-future.html","searchKeys":["scopedFuture","abstract fun <T> scopedFuture(block: suspend CoroutineScope.() -> T): CompletableFuture<T>","viaduct.engine.api.coroutines.CoroutineInterop.scopedFuture"]},{"name":"abstract fun addVariables(variables: Map<String, Any?>): RawSelectionSet","description":"viaduct.engine.api.RawSelectionSet.addVariables","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/add-variables.html","searchKeys":["addVariables","abstract fun addVariables(variables: Map<String, Any?>): RawSelectionSet","viaduct.engine.api.RawSelectionSet.addVariables"]},{"name":"abstract fun argumentsOfSelection(type: String, selectionName: String): Map<String, Any?>?","description":"viaduct.engine.api.RawSelectionSet.argumentsOfSelection","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/arguments-of-selection.html","searchKeys":["argumentsOfSelection","abstract fun argumentsOfSelection(type: String, selectionName: String): Map<String, Any?>?","viaduct.engine.api.RawSelectionSet.argumentsOfSelection"]},{"name":"abstract fun beginCompleteObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginCompleteObject.beginCompleteObject","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-begin-complete-object/begin-complete-object.html","searchKeys":["beginCompleteObject","abstract fun beginCompleteObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginCompleteObject.beginCompleteObject"]},{"name":"abstract fun beginCompleteObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginCompleteObject.beginCompleteObject","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-begin-complete-object/begin-complete-object.html","searchKeys":["beginCompleteObject","abstract fun beginCompleteObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginCompleteObject.beginCompleteObject"]},{"name":"abstract fun beginFetchObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Map<String, Any?>>?","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFetchObject.beginFetchObject","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-begin-fetch-object/begin-fetch-object.html","searchKeys":["beginFetchObject","abstract fun beginFetchObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Map<String, Any?>>?","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFetchObject.beginFetchObject"]},{"name":"abstract fun beginFetchObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Map<String, Any?>>?","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFetchObject.beginFetchObject","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-begin-fetch-object/begin-fetch-object.html","searchKeys":["beginFetchObject","abstract fun beginFetchObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Map<String, Any?>>?","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFetchObject.beginFetchObject"]},{"name":"abstract fun beginFieldCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldCompletion.beginFieldCompletion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-begin-field-completion/begin-field-completion.html","searchKeys":["beginFieldCompletion","abstract fun beginFieldCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldCompletion.beginFieldCompletion"]},{"name":"abstract fun beginFieldCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldCompletion.beginFieldCompletion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-begin-field-completion/begin-field-completion.html","searchKeys":["beginFieldCompletion","abstract fun beginFieldCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldCompletion.beginFieldCompletion"]},{"name":"abstract fun beginFieldExecution(parameters: InstrumentationFieldParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldExecution.beginFieldExecution","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-begin-field-execution/begin-field-execution.html","searchKeys":["beginFieldExecution","abstract fun beginFieldExecution(parameters: InstrumentationFieldParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldExecution.beginFieldExecution"]},{"name":"abstract fun beginFieldExecution(parameters: InstrumentationFieldParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldExecution.beginFieldExecution","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-begin-field-execution/begin-field-execution.html","searchKeys":["beginFieldExecution","abstract fun beginFieldExecution(parameters: InstrumentationFieldParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldExecution.beginFieldExecution"]},{"name":"abstract fun beginFieldFetch(parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldFetch.beginFieldFetch","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-begin-field-fetch/begin-field-fetch.html","searchKeys":["beginFieldFetch","abstract fun beginFieldFetch(parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldFetch.beginFieldFetch"]},{"name":"abstract fun beginFieldFetching(parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): FieldFetchingInstrumentationContext?","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldFetching.beginFieldFetching","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-begin-field-fetching/begin-field-fetching.html","searchKeys":["beginFieldFetching","abstract fun beginFieldFetching(parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): FieldFetchingInstrumentationContext?","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldFetching.beginFieldFetching"]},{"name":"abstract fun beginFieldListCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldListCompletion.beginFieldListCompletion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-begin-field-list-completion/begin-field-list-completion.html","searchKeys":["beginFieldListCompletion","abstract fun beginFieldListCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldListCompletion.beginFieldListCompletion"]},{"name":"abstract fun beginFieldListCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldListCompletion.beginFieldListCompletion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-begin-field-list-completion/begin-field-list-completion.html","searchKeys":["beginFieldListCompletion","abstract fun beginFieldListCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldListCompletion.beginFieldListCompletion"]},{"name":"abstract fun build(): EngineObjectData","description":"viaduct.engine.api.EngineObjectDataBuilder.build","location":"engine/engine-api/viaduct.engine.api/-engine-object-data-builder/build.html","searchKeys":["build","abstract fun build(): EngineObjectData","viaduct.engine.api.EngineObjectDataBuilder.build"]},{"name":"abstract fun checkerExecutorForField(typeName: String, fieldName: String): CheckerExecutor?","description":"viaduct.engine.api.CheckerExecutorFactory.checkerExecutorForField","location":"engine/engine-api/viaduct.engine.api/-checker-executor-factory/checker-executor-for-field.html","searchKeys":["checkerExecutorForField","abstract fun checkerExecutorForField(typeName: String, fieldName: String): CheckerExecutor?","viaduct.engine.api.CheckerExecutorFactory.checkerExecutorForField"]},{"name":"abstract fun checkerExecutorForType(typeName: String): CheckerExecutor?","description":"viaduct.engine.api.CheckerExecutorFactory.checkerExecutorForType","location":"engine/engine-api/viaduct.engine.api/-checker-executor-factory/checker-executor-for-type.html","searchKeys":["checkerExecutorForType","abstract fun checkerExecutorForType(typeName: String): CheckerExecutor?","viaduct.engine.api.CheckerExecutorFactory.checkerExecutorForType"]},{"name":"abstract fun combine(fieldResult: CheckerResult.Error): CheckerResult.Error","description":"viaduct.engine.api.CheckerResult.Error.combine","location":"engine/engine-api/viaduct.engine.api/-checker-result/-error/combine.html","searchKeys":["combine","abstract fun combine(fieldResult: CheckerResult.Error): CheckerResult.Error","viaduct.engine.api.CheckerResult.Error.combine"]},{"name":"abstract fun containsField(type: String, field: String): Boolean","description":"viaduct.engine.api.RawSelectionSet.containsField","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/contains-field.html","searchKeys":["containsField","abstract fun containsField(type: String, field: String): Boolean","viaduct.engine.api.RawSelectionSet.containsField"]},{"name":"abstract fun containsSelection(type: String, selectionName: String): Boolean","description":"viaduct.engine.api.RawSelectionSet.containsSelection","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/contains-selection.html","searchKeys":["containsSelection","abstract fun containsSelection(type: String, selectionName: String): Boolean","viaduct.engine.api.RawSelectionSet.containsSelection"]},{"name":"abstract fun createNodeEngineObjectData(id: String, graphQLObjectType: GraphQLObjectType): NodeEngineObjectData","description":"viaduct.engine.api.EngineExecutionContext.createNodeEngineObjectData","location":"engine/engine-api/viaduct.engine.api/-engine-execution-context/create-node-engine-object-data.html","searchKeys":["createNodeEngineObjectData","abstract fun createNodeEngineObjectData(id: String, graphQLObjectType: GraphQLObjectType): NodeEngineObjectData","viaduct.engine.api.EngineExecutionContext.createNodeEngineObjectData"]},{"name":"abstract fun document(): Document","description":"viaduct.engine.api.fragment.FragmentSource.document","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-source/document.html","searchKeys":["document","abstract fun document(): Document","viaduct.engine.api.fragment.FragmentSource.document"]},{"name":"abstract fun documentString(): String","description":"viaduct.engine.api.fragment.FragmentSource.documentString","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-source/document-string.html","searchKeys":["documentString","abstract fun documentString(): String","viaduct.engine.api.fragment.FragmentSource.documentString"]},{"name":"abstract fun exceptionToGraphQLError(throwable: Throwable, dataFetchingEnvironment: DataFetchingEnvironment, errorMetadata: ResolverErrorReporter.Companion.ErrorMetadata): List<GraphQLError>?","description":"viaduct.engine.api.execution.ResolverErrorBuilder.exceptionToGraphQLError","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-builder/exception-to-graph-q-l-error.html","searchKeys":["exceptionToGraphQLError","abstract fun exceptionToGraphQLError(throwable: Throwable, dataFetchingEnvironment: DataFetchingEnvironment, errorMetadata: ResolverErrorReporter.Companion.ErrorMetadata): List<GraphQLError>?","viaduct.engine.api.execution.ResolverErrorBuilder.exceptionToGraphQLError"]},{"name":"abstract fun fieldResolverExecutors(schema: ViaductSchema): Iterable<Pair<Coordinate, FieldResolverExecutor>>","description":"viaduct.engine.api.TenantModuleBootstrapper.fieldResolverExecutors","location":"engine/engine-api/viaduct.engine.api/-tenant-module-bootstrapper/field-resolver-executors.html","searchKeys":["fieldResolverExecutors","abstract fun fieldResolverExecutors(schema: ViaductSchema): Iterable<Pair<Coordinate, FieldResolverExecutor>>","viaduct.engine.api.TenantModuleBootstrapper.fieldResolverExecutors"]},{"name":"abstract fun filterToPath(path: List<String>): ParsedSelections?","description":"viaduct.engine.api.ParsedSelections.filterToPath","location":"engine/engine-api/viaduct.engine.api/-parsed-selections/filter-to-path.html","searchKeys":["filterToPath","abstract fun filterToPath(path: List<String>): ParsedSelections?","viaduct.engine.api.ParsedSelections.filterToPath"]},{"name":"abstract fun forMutation(resolverId: String): RawSelectionsLoader","description":"viaduct.engine.api.RawSelectionsLoader.Factory.forMutation","location":"engine/engine-api/viaduct.engine.api/-raw-selections-loader/-factory/for-mutation.html","searchKeys":["forMutation","abstract fun forMutation(resolverId: String): RawSelectionsLoader","viaduct.engine.api.RawSelectionsLoader.Factory.forMutation"]},{"name":"abstract fun forQuery(resolverId: String): RawSelectionsLoader","description":"viaduct.engine.api.RawSelectionsLoader.Factory.forQuery","location":"engine/engine-api/viaduct.engine.api/-raw-selections-loader/-factory/for-query.html","searchKeys":["forQuery","abstract fun forQuery(resolverId: String): RawSelectionsLoader","viaduct.engine.api.RawSelectionsLoader.Factory.forQuery"]},{"name":"abstract fun getFieldCheckerDispatcher(typeName: String, fieldName: String): CheckerDispatcher?","description":"viaduct.engine.api.FieldCheckerDispatcherRegistry.getFieldCheckerDispatcher","location":"engine/engine-api/viaduct.engine.api/-field-checker-dispatcher-registry/get-field-checker-dispatcher.html","searchKeys":["getFieldCheckerDispatcher","abstract fun getFieldCheckerDispatcher(typeName: String, fieldName: String): CheckerDispatcher?","viaduct.engine.api.FieldCheckerDispatcherRegistry.getFieldCheckerDispatcher"]},{"name":"abstract fun getFieldResolverDispatcher(typeName: String, fieldName: String): FieldResolverDispatcher?","description":"viaduct.engine.api.FieldResolverDispatcherRegistry.getFieldResolverDispatcher","location":"engine/engine-api/viaduct.engine.api/-field-resolver-dispatcher-registry/get-field-resolver-dispatcher.html","searchKeys":["getFieldResolverDispatcher","abstract fun getFieldResolverDispatcher(typeName: String, fieldName: String): FieldResolverDispatcher?","viaduct.engine.api.FieldResolverDispatcherRegistry.getFieldResolverDispatcher"]},{"name":"abstract fun getNodeResolverDispatcher(typeName: String): NodeResolverDispatcher?","description":"viaduct.engine.api.NodeResolverDispatcherRegistry.getNodeResolverDispatcher","location":"engine/engine-api/viaduct.engine.api/-node-resolver-dispatcher-registry/get-node-resolver-dispatcher.html","searchKeys":["getNodeResolverDispatcher","abstract fun getNodeResolverDispatcher(typeName: String): NodeResolverDispatcher?","viaduct.engine.api.NodeResolverDispatcherRegistry.getNodeResolverDispatcher"]},{"name":"abstract fun getRequiredSelectionSets(typeName: String, fieldName: String, executeAccessChecksInModstrat: Boolean): List<RequiredSelectionSet>","description":"viaduct.engine.api.RequiredSelectionSetRegistry.getRequiredSelectionSets","location":"engine/engine-api/viaduct.engine.api/-required-selection-set-registry/get-required-selection-sets.html","searchKeys":["getRequiredSelectionSets","abstract fun getRequiredSelectionSets(typeName: String, fieldName: String, executeAccessChecksInModstrat: Boolean): List<RequiredSelectionSet>","viaduct.engine.api.RequiredSelectionSetRegistry.getRequiredSelectionSets"]},{"name":"abstract fun getRequiredSelectionSetsForType(typeName: String, executeAccessChecksInModstrat: Boolean): List<RequiredSelectionSet>","description":"viaduct.engine.api.RequiredSelectionSetRegistry.getRequiredSelectionSetsForType","location":"engine/engine-api/viaduct.engine.api/-required-selection-set-registry/get-required-selection-sets-for-type.html","searchKeys":["getRequiredSelectionSetsForType","abstract fun getRequiredSelectionSetsForType(typeName: String, executeAccessChecksInModstrat: Boolean): List<RequiredSelectionSet>","viaduct.engine.api.RequiredSelectionSetRegistry.getRequiredSelectionSetsForType"]},{"name":"abstract fun getTypeCheckerDispatcher(typeName: String): CheckerDispatcher?","description":"viaduct.engine.api.TypeCheckerDispatcherRegistry.getTypeCheckerDispatcher","location":"engine/engine-api/viaduct.engine.api/-type-checker-dispatcher-registry/get-type-checker-dispatcher.html","searchKeys":["getTypeCheckerDispatcher","abstract fun getTypeCheckerDispatcher(typeName: String): CheckerDispatcher?","viaduct.engine.api.TypeCheckerDispatcherRegistry.getTypeCheckerDispatcher"]},{"name":"abstract fun hasModernNodeResolver(typeName: String): Boolean","description":"viaduct.engine.api.EngineExecutionContext.hasModernNodeResolver","location":"engine/engine-api/viaduct.engine.api/-engine-execution-context/has-modern-node-resolver.html","searchKeys":["hasModernNodeResolver","abstract fun hasModernNodeResolver(typeName: String): Boolean","viaduct.engine.api.EngineExecutionContext.hasModernNodeResolver"]},{"name":"abstract fun instrumentAccessCheck(checkerDispatcher: CheckerDispatcher, parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): CheckerDispatcher","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithInstrumentAccessCheck.instrumentAccessCheck","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-instrument-access-check/instrument-access-check.html","searchKeys":["instrumentAccessCheck","abstract fun instrumentAccessCheck(checkerDispatcher: CheckerDispatcher, parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): CheckerDispatcher","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithInstrumentAccessCheck.instrumentAccessCheck"]},{"name":"abstract fun instrumentAccessCheck(checkerDispatcher: CheckerDispatcher, parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): CheckerDispatcher","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithInstrumentAccessCheck.instrumentAccessCheck","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-instrument-access-check/instrument-access-check.html","searchKeys":["instrumentAccessCheck","abstract fun instrumentAccessCheck(checkerDispatcher: CheckerDispatcher, parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): CheckerDispatcher","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithInstrumentAccessCheck.instrumentAccessCheck"]},{"name":"abstract fun instrumentDataFetcher(dataFetcher: DataFetcher<*>, parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): DataFetcher<*>","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithInstrumentDataFetcher.instrumentDataFetcher","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-instrument-data-fetcher/instrument-data-fetcher.html","searchKeys":["instrumentDataFetcher","abstract fun instrumentDataFetcher(dataFetcher: DataFetcher<*>, parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): DataFetcher<*>","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithInstrumentDataFetcher.instrumentDataFetcher"]},{"name":"abstract fun instrumentDataFetcher(dataFetcher: DataFetcher<*>, parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): DataFetcher<*>","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithInstrumentDataFetcher.instrumentDataFetcher","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-instrument-data-fetcher/instrument-data-fetcher.html","searchKeys":["instrumentDataFetcher","abstract fun instrumentDataFetcher(dataFetcher: DataFetcher<*>, parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): DataFetcher<*>","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithInstrumentDataFetcher.instrumentDataFetcher"]},{"name":"abstract fun isEmpty(): Boolean","description":"viaduct.engine.api.RawSelectionSet.isEmpty","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/is-empty.html","searchKeys":["isEmpty","abstract fun isEmpty(): Boolean","viaduct.engine.api.RawSelectionSet.isEmpty"]},{"name":"abstract fun isErrorForResolver(ctx: CheckerResultContext): Boolean","description":"viaduct.engine.api.CheckerResult.Error.isErrorForResolver","location":"engine/engine-api/viaduct.engine.api/-checker-result/-error/is-error-for-resolver.html","searchKeys":["isErrorForResolver","abstract fun isErrorForResolver(ctx: CheckerResultContext): Boolean","viaduct.engine.api.CheckerResult.Error.isErrorForResolver"]},{"name":"abstract fun isTransitivelyEmpty(): Boolean","description":"viaduct.engine.api.RawSelectionSet.isTransitivelyEmpty","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/is-transitively-empty.html","searchKeys":["isTransitivelyEmpty","abstract fun isTransitivelyEmpty(): Boolean","viaduct.engine.api.RawSelectionSet.isTransitivelyEmpty"]},{"name":"abstract fun nodeResolverExecutors(schema: ViaductSchema): Iterable<Pair<String, NodeResolverExecutor>>","description":"viaduct.engine.api.TenantModuleBootstrapper.nodeResolverExecutors","location":"engine/engine-api/viaduct.engine.api/-tenant-module-bootstrapper/node-resolver-executors.html","searchKeys":["nodeResolverExecutors","abstract fun nodeResolverExecutors(schema: ViaductSchema): Iterable<Pair<String, NodeResolverExecutor>>","viaduct.engine.api.TenantModuleBootstrapper.nodeResolverExecutors"]},{"name":"abstract fun parse(fragment: Fragment): Document","description":"viaduct.engine.api.fragment.ExecutableFragmentParser.parse","location":"engine/engine-api/viaduct.engine.api.fragment/-executable-fragment-parser/parse.html","searchKeys":["parse","abstract fun parse(fragment: Fragment): Document","viaduct.engine.api.fragment.ExecutableFragmentParser.parse"]},{"name":"abstract fun printAsFieldSet(): String","description":"viaduct.engine.api.RawSelectionSet.printAsFieldSet","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/print-as-field-set.html","searchKeys":["printAsFieldSet","abstract fun printAsFieldSet(): String","viaduct.engine.api.RawSelectionSet.printAsFieldSet"]},{"name":"abstract fun put(selection: String, value: Any?): EngineObjectDataBuilder","description":"viaduct.engine.api.EngineObjectDataBuilder.put","location":"engine/engine-api/viaduct.engine.api/-engine-object-data-builder/put.html","searchKeys":["put","abstract fun put(selection: String, value: Any?): EngineObjectDataBuilder","viaduct.engine.api.EngineObjectDataBuilder.put"]},{"name":"abstract fun rawSelectionSet(env: DataFetchingEnvironment): RawSelectionSet?","description":"viaduct.engine.api.RawSelectionSet.Factory.rawSelectionSet","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/-factory/raw-selection-set.html","searchKeys":["rawSelectionSet","abstract fun rawSelectionSet(env: DataFetchingEnvironment): RawSelectionSet?","viaduct.engine.api.RawSelectionSet.Factory.rawSelectionSet"]},{"name":"abstract fun rawSelectionSet(selections: ParsedSelections, variables: Map<String, Any?>): RawSelectionSet","description":"viaduct.engine.api.RawSelectionSet.Factory.rawSelectionSet","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/-factory/raw-selection-set.html","searchKeys":["rawSelectionSet","abstract fun rawSelectionSet(selections: ParsedSelections, variables: Map<String, Any?>): RawSelectionSet","viaduct.engine.api.RawSelectionSet.Factory.rawSelectionSet"]},{"name":"abstract fun rawSelectionSet(typeName: String, selections: String, variables: Map<String, Any?>): RawSelectionSet","description":"viaduct.engine.api.RawSelectionSet.Factory.rawSelectionSet","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/-factory/raw-selection-set.html","searchKeys":["rawSelectionSet","abstract fun rawSelectionSet(typeName: String, selections: String, variables: Map<String, Any?>): RawSelectionSet","viaduct.engine.api.RawSelectionSet.Factory.rawSelectionSet"]},{"name":"abstract fun reportError(exception: Throwable, fieldDefinition: GraphQLFieldDefinition, dataFetchingEnvironment: DataFetchingEnvironment, errorMessage: String, metadata: ResolverErrorReporter.Companion.ErrorMetadata)","description":"viaduct.engine.api.execution.ResolverErrorReporter.reportError","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/report-error.html","searchKeys":["reportError","abstract fun reportError(exception: Throwable, fieldDefinition: GraphQLFieldDefinition, dataFetchingEnvironment: DataFetchingEnvironment, errorMessage: String, metadata: ResolverErrorReporter.Companion.ErrorMetadata)","viaduct.engine.api.execution.ResolverErrorReporter.reportError"]},{"name":"abstract fun requestsType(type: String): Boolean","description":"viaduct.engine.api.RawSelectionSet.requestsType","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/requests-type.html","searchKeys":["requestsType","abstract fun requestsType(type: String): Boolean","viaduct.engine.api.RawSelectionSet.requestsType"]},{"name":"abstract fun resolveSelection(type: String, selectionName: String): RawSelection","description":"viaduct.engine.api.RawSelectionSet.resolveSelection","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/resolve-selection.html","searchKeys":["resolveSelection","abstract fun resolveSelection(type: String, selectionName: String): RawSelection","viaduct.engine.api.RawSelectionSet.resolveSelection"]},{"name":"abstract fun selectionSetForField(type: String, field: String): RawSelectionSet","description":"viaduct.engine.api.RawSelectionSet.selectionSetForField","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/selection-set-for-field.html","searchKeys":["selectionSetForField","abstract fun selectionSetForField(type: String, field: String): RawSelectionSet","viaduct.engine.api.RawSelectionSet.selectionSetForField"]},{"name":"abstract fun selectionSetForSelection(type: String, selectionName: String): RawSelectionSet","description":"viaduct.engine.api.RawSelectionSet.selectionSetForSelection","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/selection-set-for-selection.html","searchKeys":["selectionSetForSelection","abstract fun selectionSetForSelection(type: String, selectionName: String): RawSelectionSet","viaduct.engine.api.RawSelectionSet.selectionSetForSelection"]},{"name":"abstract fun selectionSetForType(type: String): RawSelectionSet","description":"viaduct.engine.api.RawSelectionSet.selectionSetForType","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/selection-set-for-type.html","searchKeys":["selectionSetForType","abstract fun selectionSetForType(type: String): RawSelectionSet","viaduct.engine.api.RawSelectionSet.selectionSetForType"]},{"name":"abstract fun selections(): List<RawSelection>","description":"viaduct.engine.api.RawSelectionSet.selections","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/selections.html","searchKeys":["selections","abstract fun selections(): List<RawSelection>","viaduct.engine.api.RawSelectionSet.selections"]},{"name":"abstract fun toDocument(): Document","description":"viaduct.engine.api.ParsedSelections.toDocument","location":"engine/engine-api/viaduct.engine.api/-parsed-selections/to-document.html","searchKeys":["toDocument","abstract fun toDocument(): Document","viaduct.engine.api.ParsedSelections.toDocument"]},{"name":"abstract fun toFragment(): Fragment","description":"viaduct.engine.api.RawSelectionSet.toFragment","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/to-fragment.html","searchKeys":["toFragment","abstract fun toFragment(): Fragment","viaduct.engine.api.RawSelectionSet.toFragment"]},{"name":"abstract fun toNodelikeSelectionSet(nodeFieldName: String, arguments: List<Argument>): RawSelectionSet","description":"viaduct.engine.api.RawSelectionSet.toNodelikeSelectionSet","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/to-nodelike-selection-set.html","searchKeys":["toNodelikeSelectionSet","abstract fun toNodelikeSelectionSet(nodeFieldName: String, arguments: List<Argument>): RawSelectionSet","viaduct.engine.api.RawSelectionSet.toNodelikeSelectionSet"]},{"name":"abstract fun toSelectionSet(): SelectionSet","description":"viaduct.engine.api.RawSelectionSet.toSelectionSet","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/to-selection-set.html","searchKeys":["toSelectionSet","abstract fun toSelectionSet(): SelectionSet","viaduct.engine.api.RawSelectionSet.toSelectionSet"]},{"name":"abstract fun traversableSelections(): List<RawSelection>","description":"viaduct.engine.api.RawSelectionSet.traversableSelections","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/traversable-selections.html","searchKeys":["traversableSelections","abstract fun traversableSelections(): List<RawSelection>","viaduct.engine.api.RawSelectionSet.traversableSelections"]},{"name":"abstract suspend fun batchResolve(selectors: List<FieldResolverExecutor.Selector>, context: EngineExecutionContext): Map<FieldResolverExecutor.Selector, Result<Any?>>","description":"viaduct.engine.api.FieldResolverExecutor.batchResolve","location":"engine/engine-api/viaduct.engine.api/-field-resolver-executor/batch-resolve.html","searchKeys":["batchResolve","abstract suspend fun batchResolve(selectors: List<FieldResolverExecutor.Selector>, context: EngineExecutionContext): Map<FieldResolverExecutor.Selector, Result<Any?>>","viaduct.engine.api.FieldResolverExecutor.batchResolve"]},{"name":"abstract suspend fun batchResolve(selectors: List<NodeResolverExecutor.Selector>, context: EngineExecutionContext): Map<NodeResolverExecutor.Selector, Result<EngineObjectData>>","description":"viaduct.engine.api.NodeResolverExecutor.batchResolve","location":"engine/engine-api/viaduct.engine.api/-node-resolver-executor/batch-resolve.html","searchKeys":["batchResolve","abstract suspend fun batchResolve(selectors: List<NodeResolverExecutor.Selector>, context: EngineExecutionContext): Map<NodeResolverExecutor.Selector, Result<EngineObjectData>>","viaduct.engine.api.NodeResolverExecutor.batchResolve"]},{"name":"abstract suspend fun execute(arguments: Map<String, Any?>, objectDataMap: Map<String, EngineObjectData>, context: EngineExecutionContext): CheckerResult","description":"viaduct.engine.api.CheckerDispatcher.execute","location":"engine/engine-api/viaduct.engine.api/-checker-dispatcher/execute.html","searchKeys":["execute","abstract suspend fun execute(arguments: Map<String, Any?>, objectDataMap: Map<String, EngineObjectData>, context: EngineExecutionContext): CheckerResult","viaduct.engine.api.CheckerDispatcher.execute"]},{"name":"abstract suspend fun execute(arguments: Map<String, Any?>, objectDataMap: Map<String, EngineObjectData>, context: EngineExecutionContext): CheckerResult","description":"viaduct.engine.api.CheckerExecutor.execute","location":"engine/engine-api/viaduct.engine.api/-checker-executor/execute.html","searchKeys":["execute","abstract suspend fun execute(arguments: Map<String, Any?>, objectDataMap: Map<String, EngineObjectData>, context: EngineExecutionContext): CheckerResult","viaduct.engine.api.CheckerExecutor.execute"]},{"name":"abstract suspend fun fetch(key: ObjectEngineResult.Key, slotNo: Int): Any?","description":"viaduct.engine.api.ObjectEngineResult.fetch","location":"engine/engine-api/viaduct.engine.api/-object-engine-result/fetch.html","searchKeys":["fetch","abstract suspend fun fetch(key: ObjectEngineResult.Key, slotNo: Int): Any?","viaduct.engine.api.ObjectEngineResult.fetch"]},{"name":"abstract suspend fun fetch(selection: String): Any?","description":"viaduct.engine.api.EngineObjectData.fetch","location":"engine/engine-api/viaduct.engine.api/-engine-object-data/fetch.html","searchKeys":["fetch","abstract suspend fun fetch(selection: String): Any?","viaduct.engine.api.EngineObjectData.fetch"]},{"name":"abstract suspend fun load(selections: RawSelectionSet): EngineObjectData","description":"viaduct.engine.api.RawSelectionsLoader.load","location":"engine/engine-api/viaduct.engine.api/-raw-selections-loader/load.html","searchKeys":["load","abstract suspend fun load(selections: RawSelectionSet): EngineObjectData","viaduct.engine.api.RawSelectionsLoader.load"]},{"name":"abstract suspend fun loadFromEngine(fragment: Fragment, metadata: DerivedFieldQueryMetadata, source: Any? = null, dataFetchingEnvironment: DataFetchingEnvironment? = null): FragmentFieldEngineResolutionResult","description":"viaduct.engine.api.FragmentLoader.loadFromEngine","location":"engine/engine-api/viaduct.engine.api/-fragment-loader/load-from-engine.html","searchKeys":["loadFromEngine","abstract suspend fun loadFromEngine(fragment: Fragment, metadata: DerivedFieldQueryMetadata, source: Any? = null, dataFetchingEnvironment: DataFetchingEnvironment? = null): FragmentFieldEngineResolutionResult","viaduct.engine.api.FragmentLoader.loadFromEngine"]},{"name":"abstract suspend fun resolve(arguments: Map<String, Any?>, objectValue: EngineObjectData, queryValue: EngineObjectData, selections: RawSelectionSet?, context: EngineExecutionContext): Any?","description":"viaduct.engine.api.FieldResolverDispatcher.resolve","location":"engine/engine-api/viaduct.engine.api/-field-resolver-dispatcher/resolve.html","searchKeys":["resolve","abstract suspend fun resolve(arguments: Map<String, Any?>, objectValue: EngineObjectData, queryValue: EngineObjectData, selections: RawSelectionSet?, context: EngineExecutionContext): Any?","viaduct.engine.api.FieldResolverDispatcher.resolve"]},{"name":"abstract suspend fun resolve(ctx: VariablesResolver.ResolveCtx): Map<String, Any?>","description":"viaduct.engine.api.VariablesResolver.resolve","location":"engine/engine-api/viaduct.engine.api/-variables-resolver/resolve.html","searchKeys":["resolve","abstract suspend fun resolve(ctx: VariablesResolver.ResolveCtx): Map<String, Any?>","viaduct.engine.api.VariablesResolver.resolve"]},{"name":"abstract suspend fun resolve(id: String, selections: RawSelectionSet, context: EngineExecutionContext): EngineObjectData","description":"viaduct.engine.api.NodeResolverDispatcher.resolve","location":"engine/engine-api/viaduct.engine.api/-node-resolver-dispatcher/resolve.html","searchKeys":["resolve","abstract suspend fun resolve(id: String, selections: RawSelectionSet, context: EngineExecutionContext): EngineObjectData","viaduct.engine.api.NodeResolverDispatcher.resolve"]},{"name":"abstract suspend fun resolveData(selections: RawSelectionSet, context: EngineExecutionContext)","description":"viaduct.engine.api.LazyEngineObjectData.resolveData","location":"engine/engine-api/viaduct.engine.api/-lazy-engine-object-data/resolve-data.html","searchKeys":["resolveData","abstract suspend fun resolveData(selections: RawSelectionSet, context: EngineExecutionContext)","viaduct.engine.api.LazyEngineObjectData.resolveData"]},{"name":"abstract suspend fun tenantModuleBootstrappers(): Iterable<TenantModuleBootstrapper>","description":"viaduct.engine.api.TenantAPIBootstrapper.tenantModuleBootstrappers","location":"engine/engine-api/viaduct.engine.api/-tenant-a-p-i-bootstrapper/tenant-module-bootstrappers.html","searchKeys":["tenantModuleBootstrappers","abstract suspend fun tenantModuleBootstrappers(): Iterable<TenantModuleBootstrapper>","viaduct.engine.api.TenantAPIBootstrapper.tenantModuleBootstrappers"]},{"name":"abstract val activeSchema: ViaductSchema","description":"viaduct.engine.api.EngineExecutionContext.activeSchema","location":"engine/engine-api/viaduct.engine.api/-engine-execution-context/active-schema.html","searchKeys":["activeSchema","abstract val activeSchema: ViaductSchema","viaduct.engine.api.EngineExecutionContext.activeSchema"]},{"name":"abstract val asError: CheckerResult.Error?","description":"viaduct.engine.api.CheckerResult.asError","location":"engine/engine-api/viaduct.engine.api/-checker-result/as-error.html","searchKeys":["asError","abstract val asError: CheckerResult.Error?","viaduct.engine.api.CheckerResult.asError"]},{"name":"abstract val cause: Throwable?","description":"viaduct.engine.api.fragment.errors.IFragmentFieldResolutionError.cause","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-i-fragment-field-resolution-error/cause.html","searchKeys":["cause","abstract val cause: Throwable?","viaduct.engine.api.fragment.errors.IFragmentFieldResolutionError.cause"]},{"name":"abstract val error: Exception","description":"viaduct.engine.api.CheckerResult.Error.error","location":"engine/engine-api/viaduct.engine.api/-checker-result/-error/error.html","searchKeys":["error","abstract val error: Exception","viaduct.engine.api.CheckerResult.Error.error"]},{"name":"abstract val fatal: Boolean","description":"viaduct.engine.api.fragment.errors.IFragmentFieldResolutionError.fatal","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-i-fragment-field-resolution-error/fatal.html","searchKeys":["fatal","abstract val fatal: Boolean","viaduct.engine.api.fragment.errors.IFragmentFieldResolutionError.fatal"]},{"name":"abstract val fragmentMap: Map<String, FragmentDefinition>","description":"viaduct.engine.api.ParsedSelections.fragmentMap","location":"engine/engine-api/viaduct.engine.api/-parsed-selections/fragment-map.html","searchKeys":["fragmentMap","abstract val fragmentMap: Map<String, FragmentDefinition>","viaduct.engine.api.ParsedSelections.fragmentMap"]},{"name":"abstract val fullSchema: ViaductSchema","description":"viaduct.engine.api.EngineExecutionContext.fullSchema","location":"engine/engine-api/viaduct.engine.api/-engine-execution-context/full-schema.html","searchKeys":["fullSchema","abstract val fullSchema: ViaductSchema","viaduct.engine.api.EngineExecutionContext.fullSchema"]},{"name":"abstract val graphQLObjectType: GraphQLObjectType","description":"viaduct.engine.api.EngineObjectData.graphQLObjectType","location":"engine/engine-api/viaduct.engine.api/-engine-object-data/graph-q-l-object-type.html","searchKeys":["graphQLObjectType","abstract val graphQLObjectType: GraphQLObjectType","viaduct.engine.api.EngineObjectData.graphQLObjectType"]},{"name":"abstract val graphQLObjectType: GraphQLObjectType","description":"viaduct.engine.api.EngineObjectDataBuilder.graphQLObjectType","location":"engine/engine-api/viaduct.engine.api/-engine-object-data-builder/graph-q-l-object-type.html","searchKeys":["graphQLObjectType","abstract val graphQLObjectType: GraphQLObjectType","viaduct.engine.api.EngineObjectDataBuilder.graphQLObjectType"]},{"name":"abstract val graphQLObjectType: GraphQLObjectType","description":"viaduct.engine.api.ObjectEngineResult.graphQLObjectType","location":"engine/engine-api/viaduct.engine.api/-object-engine-result/graph-q-l-object-type.html","searchKeys":["graphQLObjectType","abstract val graphQLObjectType: GraphQLObjectType","viaduct.engine.api.ObjectEngineResult.graphQLObjectType"]},{"name":"abstract val hasRequiredSelectionSets: Boolean","description":"viaduct.engine.api.FieldResolverDispatcher.hasRequiredSelectionSets","location":"engine/engine-api/viaduct.engine.api/-field-resolver-dispatcher/has-required-selection-sets.html","searchKeys":["hasRequiredSelectionSets","abstract val hasRequiredSelectionSets: Boolean","viaduct.engine.api.FieldResolverDispatcher.hasRequiredSelectionSets"]},{"name":"abstract val id: String","description":"viaduct.engine.api.NodeEngineObjectData.id","location":"engine/engine-api/viaduct.engine.api/-node-engine-object-data/id.html","searchKeys":["id","abstract val id: String","viaduct.engine.api.NodeEngineObjectData.id"]},{"name":"abstract val isBatching: Boolean","description":"viaduct.engine.api.FieldResolverExecutor.isBatching","location":"engine/engine-api/viaduct.engine.api/-field-resolver-executor/is-batching.html","searchKeys":["isBatching","abstract val isBatching: Boolean","viaduct.engine.api.FieldResolverExecutor.isBatching"]},{"name":"abstract val isBatching: Boolean","description":"viaduct.engine.api.NodeResolverExecutor.isBatching","location":"engine/engine-api/viaduct.engine.api/-node-resolver-executor/is-batching.html","searchKeys":["isBatching","abstract val isBatching: Boolean","viaduct.engine.api.NodeResolverExecutor.isBatching"]},{"name":"abstract val message: String","description":"viaduct.engine.api.fragment.errors.IFragmentFieldResolutionError.message","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-i-fragment-field-resolution-error/message.html","searchKeys":["message","abstract val message: String","viaduct.engine.api.fragment.errors.IFragmentFieldResolutionError.message"]},{"name":"abstract val metadata: Map<String, String>","description":"viaduct.engine.api.FieldResolverExecutor.metadata","location":"engine/engine-api/viaduct.engine.api/-field-resolver-executor/metadata.html","searchKeys":["metadata","abstract val metadata: Map<String, String>","viaduct.engine.api.FieldResolverExecutor.metadata"]},{"name":"abstract val name: String","description":"viaduct.engine.api.FromFieldVariable.name","location":"engine/engine-api/viaduct.engine.api/-from-field-variable/name.html","searchKeys":["name","abstract val name: String","viaduct.engine.api.FromFieldVariable.name"]},{"name":"abstract val name: String","description":"viaduct.engine.api.SelectionSetVariable.name","location":"engine/engine-api/viaduct.engine.api/-selection-set-variable/name.html","searchKeys":["name","abstract val name: String","viaduct.engine.api.SelectionSetVariable.name"]},{"name":"abstract val objectSelectionSet: RequiredSelectionSet?","description":"viaduct.engine.api.FieldResolverDispatcher.objectSelectionSet","location":"engine/engine-api/viaduct.engine.api/-field-resolver-dispatcher/object-selection-set.html","searchKeys":["objectSelectionSet","abstract val objectSelectionSet: RequiredSelectionSet?","viaduct.engine.api.FieldResolverDispatcher.objectSelectionSet"]},{"name":"abstract val objectSelectionSet: RequiredSelectionSet?","description":"viaduct.engine.api.FieldResolverExecutor.objectSelectionSet","location":"engine/engine-api/viaduct.engine.api/-field-resolver-executor/object-selection-set.html","searchKeys":["objectSelectionSet","abstract val objectSelectionSet: RequiredSelectionSet?","viaduct.engine.api.FieldResolverExecutor.objectSelectionSet"]},{"name":"abstract val querySelectionSet: RequiredSelectionSet?","description":"viaduct.engine.api.FieldResolverDispatcher.querySelectionSet","location":"engine/engine-api/viaduct.engine.api/-field-resolver-dispatcher/query-selection-set.html","searchKeys":["querySelectionSet","abstract val querySelectionSet: RequiredSelectionSet?","viaduct.engine.api.FieldResolverDispatcher.querySelectionSet"]},{"name":"abstract val querySelectionSet: RequiredSelectionSet?","description":"viaduct.engine.api.FieldResolverExecutor.querySelectionSet","location":"engine/engine-api/viaduct.engine.api/-field-resolver-executor/query-selection-set.html","searchKeys":["querySelectionSet","abstract val querySelectionSet: RequiredSelectionSet?","viaduct.engine.api.FieldResolverExecutor.querySelectionSet"]},{"name":"abstract val rawSelectionSetFactory: RawSelectionSet.Factory","description":"viaduct.engine.api.EngineExecutionContext.rawSelectionSetFactory","location":"engine/engine-api/viaduct.engine.api/-engine-execution-context/raw-selection-set-factory.html","searchKeys":["rawSelectionSetFactory","abstract val rawSelectionSetFactory: RawSelectionSet.Factory","viaduct.engine.api.EngineExecutionContext.rawSelectionSetFactory"]},{"name":"abstract val rawSelectionsLoaderFactory: RawSelectionsLoader.Factory","description":"viaduct.engine.api.EngineExecutionContext.rawSelectionsLoaderFactory","location":"engine/engine-api/viaduct.engine.api/-engine-execution-context/raw-selections-loader-factory.html","searchKeys":["rawSelectionsLoaderFactory","abstract val rawSelectionsLoaderFactory: RawSelectionsLoader.Factory","viaduct.engine.api.EngineExecutionContext.rawSelectionsLoaderFactory"]},{"name":"abstract val requiredSelectionSets: Map<String, RequiredSelectionSet?>","description":"viaduct.engine.api.CheckerDispatcher.requiredSelectionSets","location":"engine/engine-api/viaduct.engine.api/-checker-dispatcher/required-selection-sets.html","searchKeys":["requiredSelectionSets","abstract val requiredSelectionSets: Map<String, RequiredSelectionSet?>","viaduct.engine.api.CheckerDispatcher.requiredSelectionSets"]},{"name":"abstract val resolverId: String","description":"viaduct.engine.api.FieldResolverExecutor.resolverId","location":"engine/engine-api/viaduct.engine.api/-field-resolver-executor/resolver-id.html","searchKeys":["resolverId","abstract val resolverId: String","viaduct.engine.api.FieldResolverExecutor.resolverId"]},{"name":"abstract val scopedSchema: ViaductSchema","description":"viaduct.engine.api.EngineExecutionContext.scopedSchema","location":"engine/engine-api/viaduct.engine.api/-engine-execution-context/scoped-schema.html","searchKeys":["scopedSchema","abstract val scopedSchema: ViaductSchema","viaduct.engine.api.EngineExecutionContext.scopedSchema"]},{"name":"abstract val selections: SelectionSet","description":"viaduct.engine.api.ParsedSelections.selections","location":"engine/engine-api/viaduct.engine.api/-parsed-selections/selections.html","searchKeys":["selections","abstract val selections: SelectionSet","viaduct.engine.api.ParsedSelections.selections"]},{"name":"abstract val type: String","description":"viaduct.engine.api.RawSelectionSet.type","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/type.html","searchKeys":["type","abstract val type: String","viaduct.engine.api.RawSelectionSet.type"]},{"name":"abstract val typeName: String","description":"viaduct.engine.api.NodeResolverExecutor.typeName","location":"engine/engine-api/viaduct.engine.api/-node-resolver-executor/type-name.html","searchKeys":["typeName","abstract val typeName: String","viaduct.engine.api.NodeResolverExecutor.typeName"]},{"name":"abstract val typeName: String","description":"viaduct.engine.api.ParsedSelections.typeName","location":"engine/engine-api/viaduct.engine.api/-parsed-selections/type-name.html","searchKeys":["typeName","abstract val typeName: String","viaduct.engine.api.ParsedSelections.typeName"]},{"name":"abstract val valueFromPath: String","description":"viaduct.engine.api.FromFieldVariable.valueFromPath","location":"engine/engine-api/viaduct.engine.api/-from-field-variable/value-from-path.html","searchKeys":["valueFromPath","abstract val valueFromPath: String","viaduct.engine.api.FromFieldVariable.valueFromPath"]},{"name":"abstract val variableNames: Set<String>","description":"viaduct.engine.api.VariablesResolver.variableNames","location":"engine/engine-api/viaduct.engine.api/-variables-resolver/variable-names.html","searchKeys":["variableNames","abstract val variableNames: Set<String>","viaduct.engine.api.VariablesResolver.variableNames"]},{"name":"abstract val viaductErrorType: String?","description":"viaduct.engine.api.fragment.errors.IFragmentFieldResolutionError.viaductErrorType","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-i-fragment-field-resolution-error/viaduct-error-type.html","searchKeys":["viaductErrorType","abstract val viaductErrorType: String?","viaduct.engine.api.fragment.errors.IFragmentFieldResolutionError.viaductErrorType"]},{"name":"annotation class Selections","description":"viaduct.engine.api.select.Selections","location":"engine/engine-api/viaduct.engine.api.select/-selections/index.html","searchKeys":["Selections","annotation class Selections","viaduct.engine.api.select.Selections"]},{"name":"class Builder(val graphQLObjectType: GraphQLObjectType) : EngineObjectDataBuilder","description":"viaduct.engine.api.ResolvedEngineObjectData.Builder","location":"engine/engine-api/viaduct.engine.api/-resolved-engine-object-data/-builder/index.html","searchKeys":["Builder","class Builder(val graphQLObjectType: GraphQLObjectType) : EngineObjectDataBuilder","viaduct.engine.api.ResolvedEngineObjectData.Builder"]},{"name":"class ChainedInstrumentationState : InstrumentationState","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.ChainedInstrumentationState","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/-chained-instrumentation-state/index.html","searchKeys":["ChainedInstrumentationState","class ChainedInstrumentationState : InstrumentationState","viaduct.engine.api.instrumentation.ChainedInstrumentation.ChainedInstrumentationState"]},{"name":"class EngineDataReader(path: List<String>)","description":"viaduct.engine.api.EngineDataReader","location":"engine/engine-api/viaduct.engine.api/-engine-data-reader/index.html","searchKeys":["EngineDataReader","class EngineDataReader(path: List<String>)","viaduct.engine.api.EngineDataReader"]},{"name":"class FragmentVariable<T>(val name: String, val value: T)","description":"viaduct.engine.api.fragment.FragmentVariable","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variable/index.html","searchKeys":["FragmentVariable","class FragmentVariable<T>(val name: String, val value: T)","viaduct.engine.api.fragment.FragmentVariable"]},{"name":"class FragmentVariables","description":"viaduct.engine.api.fragment.FragmentVariables","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variables/index.html","searchKeys":["FragmentVariables","class FragmentVariables","viaduct.engine.api.fragment.FragmentVariables"]},{"name":"class GraphQLBuildError(message: String, cause: Throwable? = null) : RuntimeException","description":"viaduct.engine.api.GraphQLBuildError","location":"engine/engine-api/viaduct.engine.api/-graph-q-l-build-error/index.html","searchKeys":["GraphQLBuildError","class GraphQLBuildError(message: String, cause: Throwable? = null) : RuntimeException","viaduct.engine.api.GraphQLBuildError"]},{"name":"class Key","description":"viaduct.engine.api.ObjectEngineResult.Key","location":"engine/engine-api/viaduct.engine.api/-object-engine-result/-key/index.html","searchKeys":["Key","class Key","viaduct.engine.api.ObjectEngineResult.Key"]},{"name":"class NoOpCheckerExecutorFactoryImpl constructor : CheckerExecutorFactory","description":"viaduct.engine.api.NoOpCheckerExecutorFactoryImpl","location":"engine/engine-api/viaduct.engine.api/-no-op-checker-executor-factory-impl/index.html","searchKeys":["NoOpCheckerExecutorFactoryImpl","class NoOpCheckerExecutorFactoryImpl constructor : CheckerExecutorFactory","viaduct.engine.api.NoOpCheckerExecutorFactoryImpl"]},{"name":"class ResolvedEngineObjectData : EngineObjectData, Map<String, Any?> ","description":"viaduct.engine.api.ResolvedEngineObjectData","location":"engine/engine-api/viaduct.engine.api/-resolved-engine-object-data/index.html","searchKeys":["ResolvedEngineObjectData","class ResolvedEngineObjectData : EngineObjectData, Map<String, Any?> ","viaduct.engine.api.ResolvedEngineObjectData"]},{"name":"class TenantModuleException(message: String, cause: Throwable? = null) : Exception","description":"viaduct.engine.api.TenantModuleException","location":"engine/engine-api/viaduct.engine.api/-tenant-module-exception/index.html","searchKeys":["TenantModuleException","class TenantModuleException(message: String, cause: Throwable? = null) : Exception","viaduct.engine.api.TenantModuleException"]},{"name":"class UnboundVariablesException(selections: ParsedSelections, missing: Set<String>) : Exception","description":"viaduct.engine.api.UnboundVariablesException","location":"engine/engine-api/viaduct.engine.api/-unbound-variables-exception/index.html","searchKeys":["UnboundVariablesException","class UnboundVariablesException(selections: ParsedSelections, missing: Set<String>) : Exception","viaduct.engine.api.UnboundVariablesException"]},{"name":"class UnsetSelectionException(selection: String, objectType: GraphQLObjectType, details: String? = null) : Exception","description":"viaduct.engine.api.UnsetSelectionException","location":"engine/engine-api/viaduct.engine.api/-unset-selection-exception/index.html","searchKeys":["UnsetSelectionException","class UnsetSelectionException(selection: String, objectType: GraphQLObjectType, details: String? = null) : Exception","viaduct.engine.api.UnsetSelectionException"]},{"name":"class VariableCycleException(val varName: String, val selections: ParsedSelections) : Exception","description":"viaduct.engine.api.VariableCycleException","location":"engine/engine-api/viaduct.engine.api/-variable-cycle-exception/index.html","searchKeys":["VariableCycleException","class VariableCycleException(val varName: String, val selections: ParsedSelections) : Exception","viaduct.engine.api.VariableCycleException"]},{"name":"class ViaductExecutableFragmentParser : ExecutableFragmentParser","description":"viaduct.engine.api.fragment.ViaductExecutableFragmentParser","location":"engine/engine-api/viaduct.engine.api.fragment/-viaduct-executable-fragment-parser/index.html","searchKeys":["ViaductExecutableFragmentParser","class ViaductExecutableFragmentParser : ExecutableFragmentParser","viaduct.engine.api.fragment.ViaductExecutableFragmentParser"]},{"name":"class ViaductFragmentParsingError(message: String, cause: Throwable) : RuntimeException","description":"viaduct.engine.api.fragment.ViaductFragmentParsingError","location":"engine/engine-api/viaduct.engine.api.fragment/-viaduct-fragment-parsing-error/index.html","searchKeys":["ViaductFragmentParsingError","class ViaductFragmentParsingError(message: String, cause: Throwable) : RuntimeException","viaduct.engine.api.fragment.ViaductFragmentParsingError"]},{"name":"const val EntryPointFragmentName: String","description":"viaduct.engine.api.select.Constants.EntryPointFragmentName","location":"engine/engine-api/viaduct.engine.api.select/-constants/-entry-point-fragment-name.html","searchKeys":["EntryPointFragmentName","const val EntryPointFragmentName: String","viaduct.engine.api.select.Constants.EntryPointFragmentName"]},{"name":"constructor()","description":"viaduct.engine.api.NoOpCheckerExecutorFactoryImpl.NoOpCheckerExecutorFactoryImpl","location":"engine/engine-api/viaduct.engine.api/-no-op-checker-executor-factory-impl/-no-op-checker-executor-factory-impl.html","searchKeys":["NoOpCheckerExecutorFactoryImpl","constructor()","viaduct.engine.api.NoOpCheckerExecutorFactoryImpl.NoOpCheckerExecutorFactoryImpl"]},{"name":"constructor()","description":"viaduct.engine.api.fragment.ViaductExecutableFragmentParser.ViaductExecutableFragmentParser","location":"engine/engine-api/viaduct.engine.api.fragment/-viaduct-executable-fragment-parser/-viaduct-executable-fragment-parser.html","searchKeys":["ViaductExecutableFragmentParser","constructor()","viaduct.engine.api.fragment.ViaductExecutableFragmentParser.ViaductExecutableFragmentParser"]},{"name":"constructor()","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationBase.ViaductInstrumentationBase","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-base/-viaduct-instrumentation-base.html","searchKeys":["ViaductInstrumentationBase","constructor()","viaduct.engine.api.instrumentation.ViaductInstrumentationBase.ViaductInstrumentationBase"]},{"name":"constructor(arguments: Map<String, Any?>, objectValue: EngineObjectData, queryValue: EngineObjectData, selections: RawSelectionSet?)","description":"viaduct.engine.api.FieldResolverExecutor.Selector.Selector","location":"engine/engine-api/viaduct.engine.api/-field-resolver-executor/-selector/-selector.html","searchKeys":["Selector","constructor(arguments: Map<String, Any?>, objectValue: EngineObjectData, queryValue: EngineObjectData, selections: RawSelectionSet?)","viaduct.engine.api.FieldResolverExecutor.Selector.Selector"]},{"name":"constructor(attribution: ExecutionAttribution?)","description":"viaduct.engine.api.observability.ExecutionObservabilityContext.ExecutionObservabilityContext","location":"engine/engine-api/viaduct.engine.api.observability/-execution-observability-context/-execution-observability-context.html","searchKeys":["ExecutionObservabilityContext","constructor(attribution: ExecutionAttribution?)","viaduct.engine.api.observability.ExecutionObservabilityContext.ExecutionObservabilityContext"]},{"name":"constructor(data: Map<String, Any?>, errors: List<FragmentFieldEngineResolutionError> = listOf())","description":"viaduct.engine.api.fragment.FragmentFieldEngineResolutionResult.FragmentFieldEngineResolutionResult","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-field-engine-resolution-result/-fragment-field-engine-resolution-result.html","searchKeys":["FragmentFieldEngineResolutionResult","constructor(data: Map<String, Any?>, errors: List<FragmentFieldEngineResolutionError> = listOf())","viaduct.engine.api.fragment.FragmentFieldEngineResolutionResult.FragmentFieldEngineResolutionResult"]},{"name":"constructor(delegate: VariablesResolver)","description":"viaduct.engine.api.Validated.Validated","location":"engine/engine-api/viaduct.engine.api/-validated/-validated.html","searchKeys":["Validated","constructor(delegate: VariablesResolver)","viaduct.engine.api.Validated.Validated"]},{"name":"constructor(dispatcher: CoroutineDispatcher)","description":"viaduct.engine.api.context.DispatcherLocalContext.DispatcherLocalContext","location":"engine/engine-api/viaduct.engine.api.context/-dispatcher-local-context/-dispatcher-local-context.html","searchKeys":["DispatcherLocalContext","constructor(dispatcher: CoroutineDispatcher)","viaduct.engine.api.context.DispatcherLocalContext.DispatcherLocalContext"]},{"name":"constructor(doc: Document, variables: Map<String, Any>)","description":"viaduct.engine.api.fragment.Fragment.Fragment","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment/-fragment.html","searchKeys":["Fragment","constructor(doc: Document, variables: Map<String, Any>)","viaduct.engine.api.fragment.Fragment.Fragment"]},{"name":"constructor(documentString: String, variables: FragmentVariables = FragmentVariables.EMPTY)","description":"viaduct.engine.api.fragment.Fragment.Fragment","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment/-fragment.html","searchKeys":["Fragment","constructor(documentString: String, variables: FragmentVariables = FragmentVariables.EMPTY)","viaduct.engine.api.fragment.Fragment.Fragment"]},{"name":"constructor(documentString: String, variables: Map<String, Any?>)","description":"viaduct.engine.api.fragment.Fragment.Fragment","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment/-fragment.html","searchKeys":["Fragment","constructor(documentString: String, variables: Map<String, Any?>)","viaduct.engine.api.fragment.Fragment.Fragment"]},{"name":"constructor(errors: List<Error> = listOf())","description":"viaduct.engine.api.fragment.FragmentTraversalState.FragmentTraversalState","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-traversal-state/-fragment-traversal-state.html","searchKeys":["FragmentTraversalState","constructor(errors: List<Error> = listOf())","viaduct.engine.api.fragment.FragmentTraversalState.FragmentTraversalState"]},{"name":"constructor(fieldName: String, fieldPath: ResultPath, field: Field, cause: Throwable)","description":"viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.FragmentFieldResolutionError","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-resolution-error/-fragment-field-resolution-error.html","searchKeys":["FragmentFieldResolutionError","constructor(fieldName: String, fieldPath: ResultPath, field: Field, cause: Throwable)","viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.FragmentFieldResolutionError"]},{"name":"constructor(fieldName: String?, parentType: String?, operationName: String?, isFrameworkError: Boolean?, resolvers: List<String>?, errorType: String?)","description":"viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.ErrorMetadata","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/-companion/-error-metadata/-error-metadata.html","searchKeys":["ErrorMetadata","constructor(fieldName: String?, parentType: String?, operationName: String?, isFrameworkError: Boolean?, resolvers: List<String>?, errorType: String?)","viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.ErrorMetadata"]},{"name":"constructor(fieldQueryDirectives: QueryDirectives? = null)","description":"viaduct.engine.api.CheckerResultContext.CheckerResultContext","location":"engine/engine-api/viaduct.engine.api/-checker-result-context/-checker-result-context.html","searchKeys":["CheckerResultContext","constructor(fieldQueryDirectives: QueryDirectives? = null)","viaduct.engine.api.CheckerResultContext.CheckerResultContext"]},{"name":"constructor(fragmentSource: FragmentSource, variables: FragmentVariables = FragmentVariables.EMPTY)","description":"viaduct.engine.api.fragment.Fragment.Fragment","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment/-fragment.html","searchKeys":["Fragment","constructor(fragmentSource: FragmentSource, variables: FragmentVariables = FragmentVariables.EMPTY)","viaduct.engine.api.fragment.Fragment.Fragment"]},{"name":"constructor(gjInstrumentations: List<ViaductModernGJInstrumentation>)","description":"viaduct.engine.api.instrumentation.ChainedModernGJInstrumentation.ChainedModernGJInstrumentation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-modern-g-j-instrumentation/-chained-modern-g-j-instrumentation.html","searchKeys":["ChainedModernGJInstrumentation","constructor(gjInstrumentations: List<ViaductModernGJInstrumentation>)","viaduct.engine.api.instrumentation.ChainedModernGJInstrumentation.ChainedModernGJInstrumentation"]},{"name":"constructor(graphQLObjectType: GraphQLObjectType)","description":"viaduct.engine.api.ResolvedEngineObjectData.Builder.Builder","location":"engine/engine-api/viaduct.engine.api/-resolved-engine-object-data/-builder/-builder.html","searchKeys":["Builder","constructor(graphQLObjectType: GraphQLObjectType)","viaduct.engine.api.ResolvedEngineObjectData.Builder.Builder"]},{"name":"constructor(graphqlError: GraphQLError, cause: Throwable? = null)","description":"viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.FragmentFieldEngineResolutionError","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-engine-resolution-error/-fragment-field-engine-resolution-error.html","searchKeys":["FragmentFieldEngineResolutionError","constructor(graphqlError: GraphQLError, cause: Throwable? = null)","viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.FragmentFieldEngineResolutionError"]},{"name":"constructor(id: String, selections: RawSelectionSet)","description":"viaduct.engine.api.NodeResolverExecutor.Selector.Selector","location":"engine/engine-api/viaduct.engine.api/-node-resolver-executor/-selector/-selector.html","searchKeys":["Selector","constructor(id: String, selections: RawSelectionSet)","viaduct.engine.api.NodeResolverExecutor.Selector.Selector"]},{"name":"constructor(instrumentations: List<Instrumentation>)","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.ChainedInstrumentation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/-chained-instrumentation.html","searchKeys":["ChainedInstrumentation","constructor(instrumentations: List<Instrumentation>)","viaduct.engine.api.instrumentation.ChainedInstrumentation.ChainedInstrumentation"]},{"name":"constructor(message: String, cause: Throwable)","description":"viaduct.engine.api.fragment.ViaductFragmentParsingError.ViaductFragmentParsingError","location":"engine/engine-api/viaduct.engine.api.fragment/-viaduct-fragment-parsing-error/-viaduct-fragment-parsing-error.html","searchKeys":["ViaductFragmentParsingError","constructor(message: String, cause: Throwable)","viaduct.engine.api.fragment.ViaductFragmentParsingError.ViaductFragmentParsingError"]},{"name":"constructor(message: String, cause: Throwable? = null)","description":"viaduct.engine.api.GraphQLBuildError.GraphQLBuildError","location":"engine/engine-api/viaduct.engine.api/-graph-q-l-build-error/-graph-q-l-build-error.html","searchKeys":["GraphQLBuildError","constructor(message: String, cause: Throwable? = null)","viaduct.engine.api.GraphQLBuildError.GraphQLBuildError"]},{"name":"constructor(message: String, cause: Throwable? = null)","description":"viaduct.engine.api.TenantModuleException.TenantModuleException","location":"engine/engine-api/viaduct.engine.api/-tenant-module-exception/-tenant-module-exception.html","searchKeys":["TenantModuleException","constructor(message: String, cause: Throwable? = null)","viaduct.engine.api.TenantModuleException.TenantModuleException"]},{"name":"constructor(name: String, path: List<String>)","description":"viaduct.engine.api.FromArgument.FromArgument","location":"engine/engine-api/viaduct.engine.api/-from-argument/-from-argument.html","searchKeys":["FromArgument","constructor(name: String, path: List<String>)","viaduct.engine.api.FromArgument.FromArgument"]},{"name":"constructor(name: String, path: List<String>, requiredSelectionSet: RequiredSelectionSet)","description":"viaduct.engine.api.FromFieldVariablesResolver.FromFieldVariablesResolver","location":"engine/engine-api/viaduct.engine.api/-from-field-variables-resolver/-from-field-variables-resolver.html","searchKeys":["FromFieldVariablesResolver","constructor(name: String, path: List<String>, requiredSelectionSet: RequiredSelectionSet)","viaduct.engine.api.FromFieldVariablesResolver.FromFieldVariablesResolver"]},{"name":"constructor(name: String, value: T)","description":"viaduct.engine.api.fragment.FragmentVariable.FragmentVariable","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variable/-fragment-variable.html","searchKeys":["FragmentVariable","constructor(name: String, value: T)","viaduct.engine.api.fragment.FragmentVariable.FragmentVariable"]},{"name":"constructor(name: String, valueFromPath: String)","description":"viaduct.engine.api.FromArgumentVariable.FromArgumentVariable","location":"engine/engine-api/viaduct.engine.api/-from-argument-variable/-from-argument-variable.html","searchKeys":["FromArgumentVariable","constructor(name: String, valueFromPath: String)","viaduct.engine.api.FromArgumentVariable.FromArgumentVariable"]},{"name":"constructor(name: String, valueFromPath: String)","description":"viaduct.engine.api.FromObjectFieldVariable.FromObjectFieldVariable","location":"engine/engine-api/viaduct.engine.api/-from-object-field-variable/-from-object-field-variable.html","searchKeys":["FromObjectFieldVariable","constructor(name: String, valueFromPath: String)","viaduct.engine.api.FromObjectFieldVariable.FromObjectFieldVariable"]},{"name":"constructor(name: String, valueFromPath: String)","description":"viaduct.engine.api.FromQueryFieldVariable.FromQueryFieldVariable","location":"engine/engine-api/viaduct.engine.api/-from-query-field-variable/-from-query-field-variable.html","searchKeys":["FromQueryFieldVariable","constructor(name: String, valueFromPath: String)","viaduct.engine.api.FromQueryFieldVariable.FromQueryFieldVariable"]},{"name":"constructor(objectData: EngineObjectData, arguments: Map<String, Any?>, engineExecutionContext: EngineExecutionContext)","description":"viaduct.engine.api.VariablesResolver.ResolveCtx.ResolveCtx","location":"engine/engine-api/viaduct.engine.api/-variables-resolver/-resolve-ctx/-resolve-ctx.html","searchKeys":["ResolveCtx","constructor(objectData: EngineObjectData, arguments: Map<String, Any?>, engineExecutionContext: EngineExecutionContext)","viaduct.engine.api.VariablesResolver.ResolveCtx.ResolveCtx"]},{"name":"constructor(objectSelections: RequiredSelectionSet?, querySelections: RequiredSelectionSet?)","description":"viaduct.engine.api.RequiredSelectionSets.RequiredSelectionSets","location":"engine/engine-api/viaduct.engine.api/-required-selection-sets/-required-selection-sets.html","searchKeys":["RequiredSelectionSets","constructor(objectSelections: RequiredSelectionSet?, querySelections: RequiredSelectionSet?)","viaduct.engine.api.RequiredSelectionSets.RequiredSelectionSets"]},{"name":"constructor(path: List<String>)","description":"viaduct.engine.api.EngineDataReader.EngineDataReader","location":"engine/engine-api/viaduct.engine.api/-engine-data-reader/-engine-data-reader.html","searchKeys":["EngineDataReader","constructor(path: List<String>)","viaduct.engine.api.EngineDataReader.EngineDataReader"]},{"name":"constructor(queryName: String, rootFieldName: String, classPath: String, providerShortClasspath: String, onRootQuery: Boolean, onRootMutation: Boolean, allowMutationOnQuery: Boolean, fieldOwningTenant: String?, forceEngineResolution: Boolean = false)","description":"viaduct.engine.api.derived.DerivedFieldQueryMetadata.DerivedFieldQueryMetadata","location":"engine/engine-api/viaduct.engine.api.derived/-derived-field-query-metadata/-derived-field-query-metadata.html","searchKeys":["DerivedFieldQueryMetadata","constructor(queryName: String, rootFieldName: String, classPath: String, providerShortClasspath: String, onRootQuery: Boolean, onRootMutation: Boolean, allowMutationOnQuery: Boolean, fieldOwningTenant: String?, forceEngineResolution: Boolean = false)","viaduct.engine.api.derived.DerivedFieldQueryMetadata.DerivedFieldQueryMetadata"]},{"name":"constructor(schema: GraphQLSchema)","description":"viaduct.engine.api.ViaductSchema.ViaductSchema","location":"engine/engine-api/viaduct.engine.api/-viaduct-schema/-viaduct-schema.html","searchKeys":["ViaductSchema","constructor(schema: GraphQLSchema)","viaduct.engine.api.ViaductSchema.ViaductSchema"]},{"name":"constructor(selection: String, objectType: GraphQLObjectType, details: String? = null)","description":"viaduct.engine.api.UnsetSelectionException.UnsetSelectionException","location":"engine/engine-api/viaduct.engine.api/-unset-selection-exception/-unset-selection-exception.html","searchKeys":["UnsetSelectionException","constructor(selection: String, objectType: GraphQLObjectType, details: String? = null)","viaduct.engine.api.UnsetSelectionException.UnsetSelectionException"]},{"name":"constructor(selections: ParsedSelections, missing: Set<String>)","description":"viaduct.engine.api.UnboundVariablesException.UnboundVariablesException","location":"engine/engine-api/viaduct.engine.api/-unbound-variables-exception/-unbound-variables-exception.html","searchKeys":["UnboundVariablesException","constructor(selections: ParsedSelections, missing: Set<String>)","viaduct.engine.api.UnboundVariablesException.UnboundVariablesException"]},{"name":"constructor(selections: ParsedSelections, variablesResolvers: List<VariablesResolver>, attribution: ExecutionAttribution? = ExecutionAttribution.DEFAULT)","description":"viaduct.engine.api.RequiredSelectionSet.RequiredSelectionSet","location":"engine/engine-api/viaduct.engine.api/-required-selection-set/-required-selection-set.html","searchKeys":["RequiredSelectionSet","constructor(selections: ParsedSelections, variablesResolvers: List<VariablesResolver>, attribution: ExecutionAttribution? = ExecutionAttribution.DEFAULT)","viaduct.engine.api.RequiredSelectionSet.RequiredSelectionSet"]},{"name":"constructor(typeCondition: String, fieldName: String, selectionName: String)","description":"viaduct.engine.api.RawSelection.RawSelection","location":"engine/engine-api/viaduct.engine.api/-raw-selection/-raw-selection.html","searchKeys":["RawSelection","constructor(typeCondition: String, fieldName: String, selectionName: String)","viaduct.engine.api.RawSelection.RawSelection"]},{"name":"constructor(typeName: String, selections: SelectionSet, fragmentMap: Map<String, FragmentDefinition>)","description":"viaduct.engine.api.select.ParsedSelectionsImpl.ParsedSelectionsImpl","location":"engine/engine-api/viaduct.engine.api.select/-parsed-selections-impl/-parsed-selections-impl.html","searchKeys":["ParsedSelectionsImpl","constructor(typeName: String, selections: SelectionSet, fragmentMap: Map<String, FragmentDefinition>)","viaduct.engine.api.select.ParsedSelectionsImpl.ParsedSelectionsImpl"]},{"name":"constructor(varName: String, selections: ParsedSelections)","description":"viaduct.engine.api.VariableCycleException.VariableCycleException","location":"engine/engine-api/viaduct.engine.api/-variable-cycle-exception/-variable-cycle-exception.html","searchKeys":["VariableCycleException","constructor(varName: String, selections: ParsedSelections)","viaduct.engine.api.VariableCycleException.VariableCycleException"]},{"name":"constructor(viaductInstrumentation: IViaductInstrumentation)","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.ViaductInstrumentationAdapter","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/-viaduct-instrumentation-adapter.html","searchKeys":["ViaductInstrumentationAdapter","constructor(viaductInstrumentation: IViaductInstrumentation)","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.ViaductInstrumentationAdapter"]},{"name":"data class CheckerResultContext(val fieldQueryDirectives: QueryDirectives? = null)","description":"viaduct.engine.api.CheckerResultContext","location":"engine/engine-api/viaduct.engine.api/-checker-result-context/index.html","searchKeys":["CheckerResultContext","data class CheckerResultContext(val fieldQueryDirectives: QueryDirectives? = null)","viaduct.engine.api.CheckerResultContext"]},{"name":"data class DerivedFieldQueryMetadata(val queryName: String, val rootFieldName: String, val classPath: String, val providerShortClasspath: String, val onRootQuery: Boolean, val onRootMutation: Boolean, val allowMutationOnQuery: Boolean, val fieldOwningTenant: String?, val forceEngineResolution: Boolean = false)","description":"viaduct.engine.api.derived.DerivedFieldQueryMetadata","location":"engine/engine-api/viaduct.engine.api.derived/-derived-field-query-metadata/index.html","searchKeys":["DerivedFieldQueryMetadata","data class DerivedFieldQueryMetadata(val queryName: String, val rootFieldName: String, val classPath: String, val providerShortClasspath: String, val onRootQuery: Boolean, val onRootMutation: Boolean, val allowMutationOnQuery: Boolean, val fieldOwningTenant: String?, val forceEngineResolution: Boolean = false)","viaduct.engine.api.derived.DerivedFieldQueryMetadata"]},{"name":"data class DispatcherLocalContext(val dispatcher: CoroutineDispatcher)","description":"viaduct.engine.api.context.DispatcherLocalContext","location":"engine/engine-api/viaduct.engine.api.context/-dispatcher-local-context/index.html","searchKeys":["DispatcherLocalContext","data class DispatcherLocalContext(val dispatcher: CoroutineDispatcher)","viaduct.engine.api.context.DispatcherLocalContext"]},{"name":"data class ErrorMetadata(val fieldName: String?, val parentType: String?, val operationName: String?, val isFrameworkError: Boolean?, val resolvers: List<String>?, val errorType: String?)","description":"viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/-companion/-error-metadata/index.html","searchKeys":["ErrorMetadata","data class ErrorMetadata(val fieldName: String?, val parentType: String?, val operationName: String?, val isFrameworkError: Boolean?, val resolvers: List<String>?, val errorType: String?)","viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata"]},{"name":"data class ExecutionAttribution","description":"viaduct.engine.api.ExecutionAttribution","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/index.html","searchKeys":["ExecutionAttribution","data class ExecutionAttribution","viaduct.engine.api.ExecutionAttribution"]},{"name":"data class ExecutionObservabilityContext(val attribution: ExecutionAttribution?)","description":"viaduct.engine.api.observability.ExecutionObservabilityContext","location":"engine/engine-api/viaduct.engine.api.observability/-execution-observability-context/index.html","searchKeys":["ExecutionObservabilityContext","data class ExecutionObservabilityContext(val attribution: ExecutionAttribution?)","viaduct.engine.api.observability.ExecutionObservabilityContext"]},{"name":"data class Fragment(fragmentSource: FragmentSource, val variables: FragmentVariables = FragmentVariables.EMPTY) : Iterable<MergedField> ","description":"viaduct.engine.api.fragment.Fragment","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment/index.html","searchKeys":["Fragment","data class Fragment(fragmentSource: FragmentSource, val variables: FragmentVariables = FragmentVariables.EMPTY) : Iterable<MergedField> ","viaduct.engine.api.fragment.Fragment"]},{"name":"data class FragmentFieldEngineResolutionError(val graphqlError: GraphQLError, val cause: Throwable? = null) : IFragmentFieldResolutionError","description":"viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-engine-resolution-error/index.html","searchKeys":["FragmentFieldEngineResolutionError","data class FragmentFieldEngineResolutionError(val graphqlError: GraphQLError, val cause: Throwable? = null) : IFragmentFieldResolutionError","viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError"]},{"name":"data class FragmentFieldEngineResolutionResult(val data: Map<String, Any?>, val errors: List<FragmentFieldEngineResolutionError> = listOf())","description":"viaduct.engine.api.fragment.FragmentFieldEngineResolutionResult","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-field-engine-resolution-result/index.html","searchKeys":["FragmentFieldEngineResolutionResult","data class FragmentFieldEngineResolutionResult(val data: Map<String, Any?>, val errors: List<FragmentFieldEngineResolutionError> = listOf())","viaduct.engine.api.fragment.FragmentFieldEngineResolutionResult"]},{"name":"data class FragmentFieldResolutionError(val fieldName: String, val fieldPath: ResultPath, val field: Field, val cause: Throwable) : IFragmentFieldResolutionError","description":"viaduct.engine.api.fragment.errors.FragmentFieldResolutionError","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-resolution-error/index.html","searchKeys":["FragmentFieldResolutionError","data class FragmentFieldResolutionError(val fieldName: String, val fieldPath: ResultPath, val field: Field, val cause: Throwable) : IFragmentFieldResolutionError","viaduct.engine.api.fragment.errors.FragmentFieldResolutionError"]},{"name":"data class FragmentTraversalState(val errors: List<Error> = listOf())","description":"viaduct.engine.api.fragment.FragmentTraversalState","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-traversal-state/index.html","searchKeys":["FragmentTraversalState","data class FragmentTraversalState(val errors: List<Error> = listOf())","viaduct.engine.api.fragment.FragmentTraversalState"]},{"name":"data class FromArgument(val name: String, val path: List<String>) : VariablesResolver","description":"viaduct.engine.api.FromArgument","location":"engine/engine-api/viaduct.engine.api/-from-argument/index.html","searchKeys":["FromArgument","data class FromArgument(val name: String, val path: List<String>) : VariablesResolver","viaduct.engine.api.FromArgument"]},{"name":"data class FromArgumentVariable(val name: String, val valueFromPath: String) : SelectionSetVariable","description":"viaduct.engine.api.FromArgumentVariable","location":"engine/engine-api/viaduct.engine.api/-from-argument-variable/index.html","searchKeys":["FromArgumentVariable","data class FromArgumentVariable(val name: String, val valueFromPath: String) : SelectionSetVariable","viaduct.engine.api.FromArgumentVariable"]},{"name":"data class FromFieldVariablesResolver(val name: String, val path: List<String>, val requiredSelectionSet: RequiredSelectionSet) : VariablesResolver","description":"viaduct.engine.api.FromFieldVariablesResolver","location":"engine/engine-api/viaduct.engine.api/-from-field-variables-resolver/index.html","searchKeys":["FromFieldVariablesResolver","data class FromFieldVariablesResolver(val name: String, val path: List<String>, val requiredSelectionSet: RequiredSelectionSet) : VariablesResolver","viaduct.engine.api.FromFieldVariablesResolver"]},{"name":"data class FromObjectFieldVariable(val name: String, val valueFromPath: String) : SelectionSetVariable, FromFieldVariable","description":"viaduct.engine.api.FromObjectFieldVariable","location":"engine/engine-api/viaduct.engine.api/-from-object-field-variable/index.html","searchKeys":["FromObjectFieldVariable","data class FromObjectFieldVariable(val name: String, val valueFromPath: String) : SelectionSetVariable, FromFieldVariable","viaduct.engine.api.FromObjectFieldVariable"]},{"name":"data class FromQueryFieldVariable(val name: String, val valueFromPath: String) : SelectionSetVariable, FromFieldVariable","description":"viaduct.engine.api.FromQueryFieldVariable","location":"engine/engine-api/viaduct.engine.api/-from-query-field-variable/index.html","searchKeys":["FromQueryFieldVariable","data class FromQueryFieldVariable(val name: String, val valueFromPath: String) : SelectionSetVariable, FromFieldVariable","viaduct.engine.api.FromQueryFieldVariable"]},{"name":"data class ParsedSelectionsImpl(val typeName: String, val selections: SelectionSet, val fragmentMap: Map<String, FragmentDefinition>) : ParsedSelections","description":"viaduct.engine.api.select.ParsedSelectionsImpl","location":"engine/engine-api/viaduct.engine.api.select/-parsed-selections-impl/index.html","searchKeys":["ParsedSelectionsImpl","data class ParsedSelectionsImpl(val typeName: String, val selections: SelectionSet, val fragmentMap: Map<String, FragmentDefinition>) : ParsedSelections","viaduct.engine.api.select.ParsedSelectionsImpl"]},{"name":"data class RawSelection(val typeCondition: String, val fieldName: String, val selectionName: String)","description":"viaduct.engine.api.RawSelection","location":"engine/engine-api/viaduct.engine.api/-raw-selection/index.html","searchKeys":["RawSelection","data class RawSelection(val typeCondition: String, val fieldName: String, val selectionName: String)","viaduct.engine.api.RawSelection"]},{"name":"data class RequiredSelectionSet(val selections: ParsedSelections, val variablesResolvers: List<VariablesResolver>, val attribution: ExecutionAttribution? = ExecutionAttribution.DEFAULT)","description":"viaduct.engine.api.RequiredSelectionSet","location":"engine/engine-api/viaduct.engine.api/-required-selection-set/index.html","searchKeys":["RequiredSelectionSet","data class RequiredSelectionSet(val selections: ParsedSelections, val variablesResolvers: List<VariablesResolver>, val attribution: ExecutionAttribution? = ExecutionAttribution.DEFAULT)","viaduct.engine.api.RequiredSelectionSet"]},{"name":"data class RequiredSelectionSets(val objectSelections: RequiredSelectionSet?, val querySelections: RequiredSelectionSet?)","description":"viaduct.engine.api.RequiredSelectionSets","location":"engine/engine-api/viaduct.engine.api/-required-selection-sets/index.html","searchKeys":["RequiredSelectionSets","data class RequiredSelectionSets(val objectSelections: RequiredSelectionSet?, val querySelections: RequiredSelectionSet?)","viaduct.engine.api.RequiredSelectionSets"]},{"name":"data class ResolveCtx(val objectData: EngineObjectData, val arguments: Map<String, Any?>, val engineExecutionContext: EngineExecutionContext)","description":"viaduct.engine.api.VariablesResolver.ResolveCtx","location":"engine/engine-api/viaduct.engine.api/-variables-resolver/-resolve-ctx/index.html","searchKeys":["ResolveCtx","data class ResolveCtx(val objectData: EngineObjectData, val arguments: Map<String, Any?>, val engineExecutionContext: EngineExecutionContext)","viaduct.engine.api.VariablesResolver.ResolveCtx"]},{"name":"data class Selector(val arguments: Map<String, Any?>, val objectValue: EngineObjectData, val queryValue: EngineObjectData, val selections: RawSelectionSet?)","description":"viaduct.engine.api.FieldResolverExecutor.Selector","location":"engine/engine-api/viaduct.engine.api/-field-resolver-executor/-selector/index.html","searchKeys":["Selector","data class Selector(val arguments: Map<String, Any?>, val objectValue: EngineObjectData, val queryValue: EngineObjectData, val selections: RawSelectionSet?)","viaduct.engine.api.FieldResolverExecutor.Selector"]},{"name":"data class Selector(val id: String, val selections: RawSelectionSet)","description":"viaduct.engine.api.NodeResolverExecutor.Selector","location":"engine/engine-api/viaduct.engine.api/-node-resolver-executor/-selector/index.html","searchKeys":["Selector","data class Selector(val id: String, val selections: RawSelectionSet)","viaduct.engine.api.NodeResolverExecutor.Selector"]},{"name":"data class Validated(val delegate: VariablesResolver) : VariablesResolver","description":"viaduct.engine.api.Validated","location":"engine/engine-api/viaduct.engine.api/-validated/index.html","searchKeys":["Validated","data class Validated(val delegate: VariablesResolver) : VariablesResolver","viaduct.engine.api.Validated"]},{"name":"data class ViaductSchema(val schema: GraphQLSchema)","description":"viaduct.engine.api.ViaductSchema","location":"engine/engine-api/viaduct.engine.api/-viaduct-schema/index.html","searchKeys":["ViaductSchema","data class ViaductSchema(val schema: GraphQLSchema)","viaduct.engine.api.ViaductSchema"]},{"name":"enum Type : Enum<ExecutionAttribution.Type> ","description":"viaduct.engine.api.ExecutionAttribution.Type","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/-type/index.html","searchKeys":["Type","enum Type : Enum<ExecutionAttribution.Type> ","viaduct.engine.api.ExecutionAttribution.Type"]},{"name":"fun AbstractNode<*>.allVariableReferencesByName(): Map<String, VariableReference>","description":"viaduct.engine.api.fragment.allVariableReferencesByName","location":"engine/engine-api/viaduct.engine.api.fragment/all-variable-references-by-name.html","searchKeys":["allVariableReferencesByName","fun AbstractNode<*>.allVariableReferencesByName(): Map<String, VariableReference>","viaduct.engine.api.fragment.allVariableReferencesByName"]},{"name":"fun CheckerResult.combine(fieldResult: CheckerResult): CheckerResult","description":"viaduct.engine.api.combine","location":"engine/engine-api/viaduct.engine.api/combine.html","searchKeys":["combine","fun CheckerResult.combine(fieldResult: CheckerResult): CheckerResult","viaduct.engine.api.combine"]},{"name":"fun FragmentDefinition.addTypeName(): FragmentDefinition","description":"viaduct.engine.api.fragment.addTypeName","location":"engine/engine-api/viaduct.engine.api.fragment/add-type-name.html","searchKeys":["addTypeName","fun FragmentDefinition.addTypeName(): FragmentDefinition","viaduct.engine.api.fragment.addTypeName"]},{"name":"fun FragmentDefinition.toDocumentString(): String","description":"viaduct.engine.api.fragment.toDocumentString","location":"engine/engine-api/viaduct.engine.api.fragment/to-document-string.html","searchKeys":["toDocumentString","fun FragmentDefinition.toDocumentString(): String","viaduct.engine.api.fragment.toDocumentString"]},{"name":"fun Iterable<TenantAPIBootstrapper>.flatten(): TenantAPIBootstrapper","description":"viaduct.engine.api.TenantAPIBootstrapper.Companion.flatten","location":"engine/engine-api/viaduct.engine.api/-tenant-a-p-i-bootstrapper/-companion/flatten.html","searchKeys":["flatten","fun Iterable<TenantAPIBootstrapper>.flatten(): TenantAPIBootstrapper","viaduct.engine.api.TenantAPIBootstrapper.Companion.flatten"]},{"name":"fun List<AbstractNode<*>>.allVariableReferencesByName(): Map<String, VariableReference>","description":"viaduct.engine.api.fragment.allVariableReferencesByName","location":"engine/engine-api/viaduct.engine.api.fragment/all-variable-references-by-name.html","searchKeys":["allVariableReferencesByName","fun List<AbstractNode<*>>.allVariableReferencesByName(): Map<String, VariableReference>","viaduct.engine.api.fragment.allVariableReferencesByName"]},{"name":"fun List<FragmentFieldEngineResolutionError>.forField(fieldPath: String): List<FragmentFieldEngineResolutionError>","description":"viaduct.engine.api.fragment.errors.forField","location":"engine/engine-api/viaduct.engine.api.fragment.errors/for-field.html","searchKeys":["forField","fun List<FragmentFieldEngineResolutionError>.forField(fieldPath: String): List<FragmentFieldEngineResolutionError>","viaduct.engine.api.fragment.errors.forField"]},{"name":"fun List<FragmentFieldEngineResolutionError>.forFieldAndSubSelections(fieldPath: String): List<FragmentFieldEngineResolutionError>","description":"viaduct.engine.api.fragment.errors.forFieldAndSubSelections","location":"engine/engine-api/viaduct.engine.api.fragment.errors/for-field-and-sub-selections.html","searchKeys":["forFieldAndSubSelections","fun List<FragmentFieldEngineResolutionError>.forFieldAndSubSelections(fieldPath: String): List<FragmentFieldEngineResolutionError>","viaduct.engine.api.fragment.errors.forFieldAndSubSelections"]},{"name":"fun List<VariablesResolver>.checkDisjoint()","description":"viaduct.engine.api.checkDisjoint","location":"engine/engine-api/viaduct.engine.api/check-disjoint.html","searchKeys":["checkDisjoint","fun List<VariablesResolver>.checkDisjoint()","viaduct.engine.api.checkDisjoint"]},{"name":"fun List<ViaductInstrumentationBase>.asStandardInstrumentations(): List<ViaductModernGJInstrumentation>","description":"viaduct.engine.api.instrumentation.asStandardInstrumentations","location":"engine/engine-api/viaduct.engine.api.instrumentation/as-standard-instrumentations.html","searchKeys":["asStandardInstrumentations","fun List<ViaductInstrumentationBase>.asStandardInstrumentations(): List<ViaductModernGJInstrumentation>","viaduct.engine.api.instrumentation.asStandardInstrumentations"]},{"name":"fun addToCache(documentString: String, document: Document)","description":"viaduct.engine.api.parse.CachedDocumentParser.addToCache","location":"engine/engine-api/viaduct.engine.api.parse/-cached-document-parser/add-to-cache.html","searchKeys":["addToCache","fun addToCache(documentString: String, document: Document)","viaduct.engine.api.parse.CachedDocumentParser.addToCache"]},{"name":"fun asGJInstrumentation(viaductInstrumentation: ViaductModernInstrumentation): ViaductModernGJInstrumentation","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.Companion.asGJInstrumentation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-companion/as-g-j-instrumentation.html","searchKeys":["asGJInstrumentation","fun asGJInstrumentation(viaductInstrumentation: ViaductModernInstrumentation): ViaductModernGJInstrumentation","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.Companion.asGJInstrumentation"]},{"name":"fun asMap(): Map<String, Any?>","description":"viaduct.engine.api.fragment.FragmentVariables.asMap","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variables/as-map.html","searchKeys":["asMap","fun asMap(): Map<String, Any?>","viaduct.engine.api.fragment.FragmentVariables.asMap"]},{"name":"fun asStandardInstrumentation(): ViaductInstrumentationAdapter","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationBase.asStandardInstrumentation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-base/as-standard-instrumentation.html","searchKeys":["asStandardInstrumentation","fun asStandardInstrumentation(): ViaductInstrumentationAdapter","viaduct.engine.api.instrumentation.ViaductInstrumentationBase.asStandardInstrumentation"]},{"name":"fun asStandardInstrumentations(viaductInstrumentations: List<ViaductInstrumentationBase>): List<ViaductModernGJInstrumentation>","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.Companion.asStandardInstrumentations","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-companion/as-standard-instrumentations.html","searchKeys":["asStandardInstrumentations","fun asStandardInstrumentations(viaductInstrumentations: List<ViaductInstrumentationBase>): List<ViaductModernGJInstrumentation>","viaduct.engine.api.instrumentation.IViaductInstrumentation.Companion.asStandardInstrumentations"]},{"name":"fun const(vars: Map<String, Any?>): VariablesResolver","description":"viaduct.engine.api.VariablesResolver.Companion.const","location":"engine/engine-api/viaduct.engine.api/-variables-resolver/-companion/const.html","searchKeys":["const","fun const(vars: Map<String, Any?>): VariablesResolver","viaduct.engine.api.VariablesResolver.Companion.const"]},{"name":"fun create(doc: Document): FragmentSource","description":"viaduct.engine.api.fragment.FragmentSource.Companion.create","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-source/-companion/create.html","searchKeys":["create","fun create(doc: Document): FragmentSource","viaduct.engine.api.fragment.FragmentSource.Companion.create"]},{"name":"fun create(str: String): FragmentSource","description":"viaduct.engine.api.fragment.FragmentSource.Companion.create","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-source/-companion/create.html","searchKeys":["create","fun create(str: String): FragmentSource","viaduct.engine.api.fragment.FragmentSource.Companion.create"]},{"name":"fun empty(): RequiredSelectionSets","description":"viaduct.engine.api.RequiredSelectionSets.Companion.empty","location":"engine/engine-api/viaduct.engine.api/-required-selection-sets/-companion/empty.html","searchKeys":["empty","fun empty(): RequiredSelectionSets","viaduct.engine.api.RequiredSelectionSets.Companion.empty"]},{"name":"fun empty(name: String): RawSelectionSet","description":"viaduct.engine.api.RawSelectionSet.Companion.empty","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/-companion/empty.html","searchKeys":["empty","fun empty(name: String): RawSelectionSet","viaduct.engine.api.RawSelectionSet.Companion.empty"]},{"name":"fun empty(typeName: String): ParsedSelections","description":"viaduct.engine.api.ParsedSelections.Companion.empty","location":"engine/engine-api/viaduct.engine.api/-parsed-selections/-companion/empty.html","searchKeys":["empty","fun empty(typeName: String): ParsedSelections","viaduct.engine.api.ParsedSelections.Companion.empty"]},{"name":"fun fetchSync(selection: String): Any?","description":"viaduct.engine.api.ResolvedEngineObjectData.fetchSync","location":"engine/engine-api/viaduct.engine.api/-resolved-engine-object-data/fetch-sync.html","searchKeys":["fetchSync","fun fetchSync(selection: String): Any?","viaduct.engine.api.ResolvedEngineObjectData.fetchSync"]},{"name":"fun fragment(fragment: String, vars: FragmentVariables = FragmentVariables.EMPTY): Fragment","description":"viaduct.engine.api.fragment.fragment","location":"engine/engine-api/viaduct.engine.api.fragment/fragment.html","searchKeys":["fragment","fun fragment(fragment: String, vars: FragmentVariables = FragmentVariables.EMPTY): Fragment","viaduct.engine.api.fragment.fragment"]},{"name":"fun from(type: GraphQLObjectType): EngineObjectDataBuilder","description":"viaduct.engine.api.EngineObjectDataBuilder.Companion.from","location":"engine/engine-api/viaduct.engine.api/-engine-object-data-builder/-companion/from.html","searchKeys":["from","fun from(type: GraphQLObjectType): EngineObjectDataBuilder","viaduct.engine.api.EngineObjectDataBuilder.Companion.from"]},{"name":"fun fromDataFetchingEnvironment(typeName: String, env: DataFetchingEnvironment): ParsedSelections","description":"viaduct.engine.api.select.SelectionsParser.fromDataFetchingEnvironment","location":"engine/engine-api/viaduct.engine.api.select/-selections-parser/from-data-fetching-environment.html","searchKeys":["fromDataFetchingEnvironment","fun fromDataFetchingEnvironment(typeName: String, env: DataFetchingEnvironment): ParsedSelections","viaduct.engine.api.select.SelectionsParser.fromDataFetchingEnvironment"]},{"name":"fun fromMap(map: Map<String, Any?>): FragmentVariables","description":"viaduct.engine.api.fragment.FragmentVariables.Companion.fromMap","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variables/-companion/from-map.html","searchKeys":["fromMap","fun fromMap(map: Map<String, Any?>): FragmentVariables","viaduct.engine.api.fragment.FragmentVariables.Companion.fromMap"]},{"name":"fun fromOperation(name: String?): ExecutionAttribution","description":"viaduct.engine.api.ExecutionAttribution.Companion.fromOperation","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/-companion/from-operation.html","searchKeys":["fromOperation","fun fromOperation(name: String?): ExecutionAttribution","viaduct.engine.api.ExecutionAttribution.Companion.fromOperation"]},{"name":"fun fromPolicyCheck(name: String): ExecutionAttribution","description":"viaduct.engine.api.ExecutionAttribution.Companion.fromPolicyCheck","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/-companion/from-policy-check.html","searchKeys":["fromPolicyCheck","fun fromPolicyCheck(name: String): ExecutionAttribution","viaduct.engine.api.ExecutionAttribution.Companion.fromPolicyCheck"]},{"name":"fun fromResolver(name: String): ExecutionAttribution","description":"viaduct.engine.api.ExecutionAttribution.Companion.fromResolver","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/-companion/from-resolver.html","searchKeys":["fromResolver","fun fromResolver(name: String): ExecutionAttribution","viaduct.engine.api.ExecutionAttribution.Companion.fromResolver"]},{"name":"fun fromSelectionSetVariables(objectSelections: ParsedSelections?, querySelections: ParsedSelections?, variables: List<SelectionSetVariable>, attribution: ExecutionAttribution? = null): List<VariablesResolver>","description":"viaduct.engine.api.VariablesResolver.Companion.fromSelectionSetVariables","location":"engine/engine-api/viaduct.engine.api/-variables-resolver/-companion/from-selection-set-variables.html","searchKeys":["fromSelectionSetVariables","fun fromSelectionSetVariables(objectSelections: ParsedSelections?, querySelections: ParsedSelections?, variables: List<SelectionSetVariable>, attribution: ExecutionAttribution? = null): List<VariablesResolver>","viaduct.engine.api.VariablesResolver.Companion.fromSelectionSetVariables"]},{"name":"fun fromStandardInstrumentation(stdInstrumentation: Instrumentation): ViaductModernGJInstrumentation","description":"viaduct.engine.api.instrumentation.ViaductModernGJInstrumentation.Companion.fromStandardInstrumentation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-g-j-instrumentation/-companion/from-standard-instrumentation.html","searchKeys":["fromStandardInstrumentation","fun fromStandardInstrumentation(stdInstrumentation: Instrumentation): ViaductModernGJInstrumentation","viaduct.engine.api.instrumentation.ViaductModernGJInstrumentation.Companion.fromStandardInstrumentation"]},{"name":"fun fromVariables(vararg vars: FragmentVariable<*>): FragmentVariables","description":"viaduct.engine.api.fragment.FragmentVariables.Companion.fromVariables","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variables/-companion/from-variables.html","searchKeys":["fromVariables","fun fromVariables(vararg vars: FragmentVariable<*>): FragmentVariables","viaduct.engine.api.fragment.FragmentVariables.Companion.fromVariables"]},{"name":"fun fromVariablesResolver(name: String): ExecutionAttribution","description":"viaduct.engine.api.ExecutionAttribution.Companion.fromVariablesResolver","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/-companion/from-variables-resolver.html","searchKeys":["fromVariablesResolver","fun fromVariablesResolver(name: String): ExecutionAttribution","viaduct.engine.api.ExecutionAttribution.Companion.fromVariablesResolver"]},{"name":"fun getState(instrumentation: Instrumentation): InstrumentationState?","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.ChainedInstrumentationState.getState","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/-chained-instrumentation-state/get-state.html","searchKeys":["getState","fun getState(instrumentation: Instrumentation): InstrumentationState?","viaduct.engine.api.instrumentation.ChainedInstrumentation.ChainedInstrumentationState.getState"]},{"name":"fun interface ResolverErrorReporter","description":"viaduct.engine.api.execution.ResolverErrorReporter","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/index.html","searchKeys":["ResolverErrorReporter","fun interface ResolverErrorReporter","viaduct.engine.api.execution.ResolverErrorReporter"]},{"name":"fun parse(fragment: Fragment): ParsedSelections","description":"viaduct.engine.api.select.SelectionsParser.parse","location":"engine/engine-api/viaduct.engine.api.select/-selections-parser/parse.html","searchKeys":["parse","fun parse(fragment: Fragment): ParsedSelections","viaduct.engine.api.select.SelectionsParser.parse"]},{"name":"fun parse(input: String): Document","description":"viaduct.engine.api.parse.DocumentParser.parse","location":"engine/engine-api/viaduct.engine.api.parse/-document-parser/parse.html","searchKeys":["parse","fun parse(input: String): Document","viaduct.engine.api.parse.DocumentParser.parse"]},{"name":"fun parse(reader: Reader): Document","description":"viaduct.engine.api.parse.DocumentParser.parse","location":"engine/engine-api/viaduct.engine.api.parse/-document-parser/parse.html","searchKeys":["parse","fun parse(reader: Reader): Document","viaduct.engine.api.parse.DocumentParser.parse"]},{"name":"fun parse(typeName: String, selections: String): ParsedSelections","description":"viaduct.engine.api.select.SelectionsParser.parse","location":"engine/engine-api/viaduct.engine.api.select/-selections-parser/parse.html","searchKeys":["parse","fun parse(typeName: String, selections: String): ParsedSelections","viaduct.engine.api.select.SelectionsParser.parse"]},{"name":"fun parseDocument(document: String): Document","description":"viaduct.engine.api.parse.CachedDocumentParser.parseDocument","location":"engine/engine-api/viaduct.engine.api.parse/-cached-document-parser/parse-document.html","searchKeys":["parseDocument","fun parseDocument(document: String): Document","viaduct.engine.api.parse.CachedDocumentParser.parseDocument"]},{"name":"fun toMap(): Map<String, String>","description":"viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.toMap","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/-companion/-error-metadata/to-map.html","searchKeys":["toMap","fun toMap(): Map<String, String>","viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.toMap"]},{"name":"fun toTagString(): String?","description":"viaduct.engine.api.ExecutionAttribution.toTagString","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/to-tag-string.html","searchKeys":["toTagString","fun toTagString(): String?","viaduct.engine.api.ExecutionAttribution.toTagString"]},{"name":"fun valueOf(value: String): ExecutionAttribution.Type","description":"viaduct.engine.api.ExecutionAttribution.Type.valueOf","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): ExecutionAttribution.Type","viaduct.engine.api.ExecutionAttribution.Type.valueOf"]},{"name":"fun values(): Array<ExecutionAttribution.Type>","description":"viaduct.engine.api.ExecutionAttribution.Type.values","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/-type/values.html","searchKeys":["values","fun values(): Array<ExecutionAttribution.Type>","viaduct.engine.api.ExecutionAttribution.Type.values"]},{"name":"inline fun <E : Enum<E>> getEnum(varName: String, default: E? = null): FragmentVariable<E?>","description":"viaduct.engine.api.fragment.FragmentVariables.getEnum","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variables/get-enum.html","searchKeys":["getEnum","inline fun <E : Enum<E>> getEnum(varName: String, default: E? = null): FragmentVariable<E?>","viaduct.engine.api.fragment.FragmentVariables.getEnum"]},{"name":"inline fun <E : Enum<E>> validateEnum(): FragmentVariable<E?>","description":"viaduct.engine.api.fragment.FragmentVariable.validateEnum","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variable/validate-enum.html","searchKeys":["validateEnum","inline fun <E : Enum<E>> validateEnum(): FragmentVariable<E?>","viaduct.engine.api.fragment.FragmentVariable.validateEnum"]},{"name":"inline operator fun <T> get(varName: String, default: T? = null): FragmentVariable<T?>","description":"viaduct.engine.api.fragment.FragmentVariables.get","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variables/get.html","searchKeys":["get","inline operator fun <T> get(varName: String, default: T? = null): FragmentVariable<T?>","viaduct.engine.api.fragment.FragmentVariables.get"]},{"name":"inline operator fun <T> getValue(thisRef: Any?, property: KProperty<*>): FragmentVariable<T?>","description":"viaduct.engine.api.fragment.FragmentVariables.getValue","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variables/get-value.html","searchKeys":["getValue","inline operator fun <T> getValue(thisRef: Any?, property: KProperty<*>): FragmentVariable<T?>","viaduct.engine.api.fragment.FragmentVariables.getValue"]},{"name":"interface CheckerDispatcher","description":"viaduct.engine.api.CheckerDispatcher","location":"engine/engine-api/viaduct.engine.api/-checker-dispatcher/index.html","searchKeys":["CheckerDispatcher","interface CheckerDispatcher","viaduct.engine.api.CheckerDispatcher"]},{"name":"interface CheckerExecutor","description":"viaduct.engine.api.CheckerExecutor","location":"engine/engine-api/viaduct.engine.api/-checker-executor/index.html","searchKeys":["CheckerExecutor","interface CheckerExecutor","viaduct.engine.api.CheckerExecutor"]},{"name":"interface CheckerExecutorFactory","description":"viaduct.engine.api.CheckerExecutorFactory","location":"engine/engine-api/viaduct.engine.api/-checker-executor-factory/index.html","searchKeys":["CheckerExecutorFactory","interface CheckerExecutorFactory","viaduct.engine.api.CheckerExecutorFactory"]},{"name":"interface CoroutineInterop","description":"viaduct.engine.api.coroutines.CoroutineInterop","location":"engine/engine-api/viaduct.engine.api.coroutines/-coroutine-interop/index.html","searchKeys":["CoroutineInterop","interface CoroutineInterop","viaduct.engine.api.coroutines.CoroutineInterop"]},{"name":"interface EngineExecutionContext","description":"viaduct.engine.api.EngineExecutionContext","location":"engine/engine-api/viaduct.engine.api/-engine-execution-context/index.html","searchKeys":["EngineExecutionContext","interface EngineExecutionContext","viaduct.engine.api.EngineExecutionContext"]},{"name":"interface EngineObjectData","description":"viaduct.engine.api.EngineObjectData","location":"engine/engine-api/viaduct.engine.api/-engine-object-data/index.html","searchKeys":["EngineObjectData","interface EngineObjectData","viaduct.engine.api.EngineObjectData"]},{"name":"interface EngineObjectDataBuilder","description":"viaduct.engine.api.EngineObjectDataBuilder","location":"engine/engine-api/viaduct.engine.api/-engine-object-data-builder/index.html","searchKeys":["EngineObjectDataBuilder","interface EngineObjectDataBuilder","viaduct.engine.api.EngineObjectDataBuilder"]},{"name":"interface Error : CheckerResult","description":"viaduct.engine.api.CheckerResult.Error","location":"engine/engine-api/viaduct.engine.api/-checker-result/-error/index.html","searchKeys":["Error","interface Error : CheckerResult","viaduct.engine.api.CheckerResult.Error"]},{"name":"interface ExecutableFragmentParser","description":"viaduct.engine.api.fragment.ExecutableFragmentParser","location":"engine/engine-api/viaduct.engine.api.fragment/-executable-fragment-parser/index.html","searchKeys":["ExecutableFragmentParser","interface ExecutableFragmentParser","viaduct.engine.api.fragment.ExecutableFragmentParser"]},{"name":"interface Factory","description":"viaduct.engine.api.RawSelectionSet.Factory","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/-factory/index.html","searchKeys":["Factory","interface Factory","viaduct.engine.api.RawSelectionSet.Factory"]},{"name":"interface Factory","description":"viaduct.engine.api.RawSelectionsLoader.Factory","location":"engine/engine-api/viaduct.engine.api/-raw-selections-loader/-factory/index.html","searchKeys":["Factory","interface Factory","viaduct.engine.api.RawSelectionsLoader.Factory"]},{"name":"interface FieldCheckerDispatcherRegistry","description":"viaduct.engine.api.FieldCheckerDispatcherRegistry","location":"engine/engine-api/viaduct.engine.api/-field-checker-dispatcher-registry/index.html","searchKeys":["FieldCheckerDispatcherRegistry","interface FieldCheckerDispatcherRegistry","viaduct.engine.api.FieldCheckerDispatcherRegistry"]},{"name":"interface FieldResolverDispatcher","description":"viaduct.engine.api.FieldResolverDispatcher","location":"engine/engine-api/viaduct.engine.api/-field-resolver-dispatcher/index.html","searchKeys":["FieldResolverDispatcher","interface FieldResolverDispatcher","viaduct.engine.api.FieldResolverDispatcher"]},{"name":"interface FieldResolverDispatcherRegistry","description":"viaduct.engine.api.FieldResolverDispatcherRegistry","location":"engine/engine-api/viaduct.engine.api/-field-resolver-dispatcher-registry/index.html","searchKeys":["FieldResolverDispatcherRegistry","interface FieldResolverDispatcherRegistry","viaduct.engine.api.FieldResolverDispatcherRegistry"]},{"name":"interface FieldResolverExecutor","description":"viaduct.engine.api.FieldResolverExecutor","location":"engine/engine-api/viaduct.engine.api/-field-resolver-executor/index.html","searchKeys":["FieldResolverExecutor","interface FieldResolverExecutor","viaduct.engine.api.FieldResolverExecutor"]},{"name":"interface FragmentLoader","description":"viaduct.engine.api.FragmentLoader","location":"engine/engine-api/viaduct.engine.api/-fragment-loader/index.html","searchKeys":["FragmentLoader","interface FragmentLoader","viaduct.engine.api.FragmentLoader"]},{"name":"interface FragmentSource","description":"viaduct.engine.api.fragment.FragmentSource","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-source/index.html","searchKeys":["FragmentSource","interface FragmentSource","viaduct.engine.api.fragment.FragmentSource"]},{"name":"interface IFragmentFieldResolutionError","description":"viaduct.engine.api.fragment.errors.IFragmentFieldResolutionError","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-i-fragment-field-resolution-error/index.html","searchKeys":["IFragmentFieldResolutionError","interface IFragmentFieldResolutionError","viaduct.engine.api.fragment.errors.IFragmentFieldResolutionError"]},{"name":"interface IViaductInstrumentation","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/index.html","searchKeys":["IViaductInstrumentation","interface IViaductInstrumentation","viaduct.engine.api.instrumentation.IViaductInstrumentation"]},{"name":"interface LazyEngineObjectData : EngineObjectData","description":"viaduct.engine.api.LazyEngineObjectData","location":"engine/engine-api/viaduct.engine.api/-lazy-engine-object-data/index.html","searchKeys":["LazyEngineObjectData","interface LazyEngineObjectData : EngineObjectData","viaduct.engine.api.LazyEngineObjectData"]},{"name":"interface NodeEngineObjectData : LazyEngineObjectData","description":"viaduct.engine.api.NodeEngineObjectData","location":"engine/engine-api/viaduct.engine.api/-node-engine-object-data/index.html","searchKeys":["NodeEngineObjectData","interface NodeEngineObjectData : LazyEngineObjectData","viaduct.engine.api.NodeEngineObjectData"]},{"name":"interface NodeResolverDispatcher","description":"viaduct.engine.api.NodeResolverDispatcher","location":"engine/engine-api/viaduct.engine.api/-node-resolver-dispatcher/index.html","searchKeys":["NodeResolverDispatcher","interface NodeResolverDispatcher","viaduct.engine.api.NodeResolverDispatcher"]},{"name":"interface NodeResolverDispatcherRegistry","description":"viaduct.engine.api.NodeResolverDispatcherRegistry","location":"engine/engine-api/viaduct.engine.api/-node-resolver-dispatcher-registry/index.html","searchKeys":["NodeResolverDispatcherRegistry","interface NodeResolverDispatcherRegistry","viaduct.engine.api.NodeResolverDispatcherRegistry"]},{"name":"interface NodeResolverExecutor","description":"viaduct.engine.api.NodeResolverExecutor","location":"engine/engine-api/viaduct.engine.api/-node-resolver-executor/index.html","searchKeys":["NodeResolverExecutor","interface NodeResolverExecutor","viaduct.engine.api.NodeResolverExecutor"]},{"name":"interface ObjectEngineResult","description":"viaduct.engine.api.ObjectEngineResult","location":"engine/engine-api/viaduct.engine.api/-object-engine-result/index.html","searchKeys":["ObjectEngineResult","interface ObjectEngineResult","viaduct.engine.api.ObjectEngineResult"]},{"name":"interface ParsedSelections","description":"viaduct.engine.api.ParsedSelections","location":"engine/engine-api/viaduct.engine.api/-parsed-selections/index.html","searchKeys":["ParsedSelections","interface ParsedSelections","viaduct.engine.api.ParsedSelections"]},{"name":"interface RawSelectionSet","description":"viaduct.engine.api.RawSelectionSet","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/index.html","searchKeys":["RawSelectionSet","interface RawSelectionSet","viaduct.engine.api.RawSelectionSet"]},{"name":"interface RawSelectionsLoader","description":"viaduct.engine.api.RawSelectionsLoader","location":"engine/engine-api/viaduct.engine.api/-raw-selections-loader/index.html","searchKeys":["RawSelectionsLoader","interface RawSelectionsLoader","viaduct.engine.api.RawSelectionsLoader"]},{"name":"interface RequiredSelectionSetRegistry","description":"viaduct.engine.api.RequiredSelectionSetRegistry","location":"engine/engine-api/viaduct.engine.api/-required-selection-set-registry/index.html","searchKeys":["RequiredSelectionSetRegistry","interface RequiredSelectionSetRegistry","viaduct.engine.api.RequiredSelectionSetRegistry"]},{"name":"interface ResolverErrorBuilder","description":"viaduct.engine.api.execution.ResolverErrorBuilder","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-builder/index.html","searchKeys":["ResolverErrorBuilder","interface ResolverErrorBuilder","viaduct.engine.api.execution.ResolverErrorBuilder"]},{"name":"interface TenantAPIBootstrapper","description":"viaduct.engine.api.TenantAPIBootstrapper","location":"engine/engine-api/viaduct.engine.api/-tenant-a-p-i-bootstrapper/index.html","searchKeys":["TenantAPIBootstrapper","interface TenantAPIBootstrapper","viaduct.engine.api.TenantAPIBootstrapper"]},{"name":"interface TenantModuleBootstrapper","description":"viaduct.engine.api.TenantModuleBootstrapper","location":"engine/engine-api/viaduct.engine.api/-tenant-module-bootstrapper/index.html","searchKeys":["TenantModuleBootstrapper","interface TenantModuleBootstrapper","viaduct.engine.api.TenantModuleBootstrapper"]},{"name":"interface TypeCheckerDispatcherRegistry","description":"viaduct.engine.api.TypeCheckerDispatcherRegistry","location":"engine/engine-api/viaduct.engine.api/-type-checker-dispatcher-registry/index.html","searchKeys":["TypeCheckerDispatcherRegistry","interface TypeCheckerDispatcherRegistry","viaduct.engine.api.TypeCheckerDispatcherRegistry"]},{"name":"interface VariablesResolver","description":"viaduct.engine.api.VariablesResolver","location":"engine/engine-api/viaduct.engine.api/-variables-resolver/index.html","searchKeys":["VariablesResolver","interface VariablesResolver","viaduct.engine.api.VariablesResolver"]},{"name":"interface ViaductModernGJInstrumentation : Instrumentation","description":"viaduct.engine.api.instrumentation.ViaductModernGJInstrumentation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-g-j-instrumentation/index.html","searchKeys":["ViaductModernGJInstrumentation","interface ViaductModernGJInstrumentation : Instrumentation","viaduct.engine.api.instrumentation.ViaductModernGJInstrumentation"]},{"name":"interface ViaductModernInstrumentation","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/index.html","searchKeys":["ViaductModernInstrumentation","interface ViaductModernInstrumentation","viaduct.engine.api.instrumentation.ViaductModernInstrumentation"]},{"name":"interface WithBeginCompleteObject : IViaductInstrumentation","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginCompleteObject","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-begin-complete-object/index.html","searchKeys":["WithBeginCompleteObject","interface WithBeginCompleteObject : IViaductInstrumentation","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginCompleteObject"]},{"name":"interface WithBeginCompleteObject : ViaductModernInstrumentation","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginCompleteObject","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-begin-complete-object/index.html","searchKeys":["WithBeginCompleteObject","interface WithBeginCompleteObject : ViaductModernInstrumentation","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginCompleteObject"]},{"name":"interface WithBeginFetchObject : IViaductInstrumentation","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFetchObject","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-begin-fetch-object/index.html","searchKeys":["WithBeginFetchObject","interface WithBeginFetchObject : IViaductInstrumentation","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFetchObject"]},{"name":"interface WithBeginFetchObject : ViaductModernInstrumentation","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFetchObject","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-begin-fetch-object/index.html","searchKeys":["WithBeginFetchObject","interface WithBeginFetchObject : ViaductModernInstrumentation","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFetchObject"]},{"name":"interface WithBeginFieldCompletion : IViaductInstrumentation","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldCompletion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-begin-field-completion/index.html","searchKeys":["WithBeginFieldCompletion","interface WithBeginFieldCompletion : IViaductInstrumentation","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldCompletion"]},{"name":"interface WithBeginFieldCompletion : ViaductModernInstrumentation","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldCompletion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-begin-field-completion/index.html","searchKeys":["WithBeginFieldCompletion","interface WithBeginFieldCompletion : ViaductModernInstrumentation","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldCompletion"]},{"name":"interface WithBeginFieldExecution : IViaductInstrumentation","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldExecution","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-begin-field-execution/index.html","searchKeys":["WithBeginFieldExecution","interface WithBeginFieldExecution : IViaductInstrumentation","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldExecution"]},{"name":"interface WithBeginFieldExecution : ViaductModernInstrumentation","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldExecution","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-begin-field-execution/index.html","searchKeys":["WithBeginFieldExecution","interface WithBeginFieldExecution : ViaductModernInstrumentation","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldExecution"]},{"name":"interface WithBeginFieldFetch : IViaductInstrumentation","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldFetch","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-begin-field-fetch/index.html","searchKeys":["WithBeginFieldFetch","interface WithBeginFieldFetch : IViaductInstrumentation","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldFetch"]},{"name":"interface WithBeginFieldFetching : ViaductModernInstrumentation","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldFetching","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-begin-field-fetching/index.html","searchKeys":["WithBeginFieldFetching","interface WithBeginFieldFetching : ViaductModernInstrumentation","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldFetching"]},{"name":"interface WithBeginFieldListCompletion : IViaductInstrumentation","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldListCompletion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-begin-field-list-completion/index.html","searchKeys":["WithBeginFieldListCompletion","interface WithBeginFieldListCompletion : IViaductInstrumentation","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithBeginFieldListCompletion"]},{"name":"interface WithBeginFieldListCompletion : ViaductModernInstrumentation","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldListCompletion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-begin-field-list-completion/index.html","searchKeys":["WithBeginFieldListCompletion","interface WithBeginFieldListCompletion : ViaductModernInstrumentation","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithBeginFieldListCompletion"]},{"name":"interface WithInstrumentAccessCheck : IViaductInstrumentation","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithInstrumentAccessCheck","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-instrument-access-check/index.html","searchKeys":["WithInstrumentAccessCheck","interface WithInstrumentAccessCheck : IViaductInstrumentation","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithInstrumentAccessCheck"]},{"name":"interface WithInstrumentAccessCheck : ViaductModernInstrumentation","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithInstrumentAccessCheck","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-instrument-access-check/index.html","searchKeys":["WithInstrumentAccessCheck","interface WithInstrumentAccessCheck : ViaductModernInstrumentation","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithInstrumentAccessCheck"]},{"name":"interface WithInstrumentDataFetcher : IViaductInstrumentation","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithInstrumentDataFetcher","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-instrument-data-fetcher/index.html","searchKeys":["WithInstrumentDataFetcher","interface WithInstrumentDataFetcher : IViaductInstrumentation","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithInstrumentDataFetcher"]},{"name":"interface WithInstrumentDataFetcher : ViaductModernInstrumentation","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithInstrumentDataFetcher","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-with-instrument-data-fetcher/index.html","searchKeys":["WithInstrumentDataFetcher","interface WithInstrumentDataFetcher : ViaductModernInstrumentation","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.WithInstrumentDataFetcher"]},{"name":"object CachedDocumentParser","description":"viaduct.engine.api.parse.CachedDocumentParser","location":"engine/engine-api/viaduct.engine.api.parse/-cached-document-parser/index.html","searchKeys":["CachedDocumentParser","object CachedDocumentParser","viaduct.engine.api.parse.CachedDocumentParser"]},{"name":"object Companion","description":"viaduct.engine.api.EngineObjectDataBuilder.Companion","location":"engine/engine-api/viaduct.engine.api/-engine-object-data-builder/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.EngineObjectDataBuilder.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.ExecutionAttribution.Companion","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.ExecutionAttribution.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.ObjectEngineResult.Key.Companion","location":"engine/engine-api/viaduct.engine.api/-object-engine-result/-key/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.ObjectEngineResult.Key.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.ParsedSelections.Companion","location":"engine/engine-api/viaduct.engine.api/-parsed-selections/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.ParsedSelections.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.RawSelectionSet.Companion","location":"engine/engine-api/viaduct.engine.api/-raw-selection-set/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.RawSelectionSet.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.RequiredSelectionSets.Companion","location":"engine/engine-api/viaduct.engine.api/-required-selection-sets/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.RequiredSelectionSets.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.TenantAPIBootstrapper.Companion","location":"engine/engine-api/viaduct.engine.api/-tenant-a-p-i-bootstrapper/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.TenantAPIBootstrapper.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.VariablesResolver.Companion","location":"engine/engine-api/viaduct.engine.api/-variables-resolver/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.VariablesResolver.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.execution.ResolverErrorBuilder.Companion","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-builder/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.execution.ResolverErrorBuilder.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.execution.ResolverErrorReporter.Companion","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.execution.ResolverErrorReporter.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.Companion","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/-companion/-error-metadata/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.fragment.Fragment.Companion","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.fragment.Fragment.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.fragment.FragmentFieldEngineResolutionResult.Companion","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-field-engine-resolution-result/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.fragment.FragmentFieldEngineResolutionResult.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.fragment.FragmentSource.Companion","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-source/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.fragment.FragmentSource.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.fragment.FragmentVariables.Companion","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variables/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.fragment.FragmentVariables.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.Companion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.instrumentation.IViaductInstrumentation.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.Companion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.instrumentation.ViaductModernGJInstrumentation.Companion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-g-j-instrumentation/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.instrumentation.ViaductModernGJInstrumentation.Companion"]},{"name":"object Companion","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.Companion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.Companion"]},{"name":"object Constants","description":"viaduct.engine.api.select.Constants","location":"engine/engine-api/viaduct.engine.api.select/-constants/index.html","searchKeys":["Constants","object Constants","viaduct.engine.api.select.Constants"]},{"name":"object DocumentParser","description":"viaduct.engine.api.parse.DocumentParser","location":"engine/engine-api/viaduct.engine.api.parse/-document-parser/index.html","searchKeys":["DocumentParser","object DocumentParser","viaduct.engine.api.parse.DocumentParser"]},{"name":"object Empty : FieldCheckerDispatcherRegistry","description":"viaduct.engine.api.FieldCheckerDispatcherRegistry.Empty","location":"engine/engine-api/viaduct.engine.api/-field-checker-dispatcher-registry/-empty/index.html","searchKeys":["Empty","object Empty : FieldCheckerDispatcherRegistry","viaduct.engine.api.FieldCheckerDispatcherRegistry.Empty"]},{"name":"object Empty : FragmentSource","description":"viaduct.engine.api.fragment.FragmentSource.Companion.Empty","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-source/-companion/-empty/index.html","searchKeys":["Empty","object Empty : FragmentSource","viaduct.engine.api.fragment.FragmentSource.Companion.Empty"]},{"name":"object Empty : RequiredSelectionSetRegistry","description":"viaduct.engine.api.RequiredSelectionSetRegistry.Empty","location":"engine/engine-api/viaduct.engine.api/-required-selection-set-registry/-empty/index.html","searchKeys":["Empty","object Empty : RequiredSelectionSetRegistry","viaduct.engine.api.RequiredSelectionSetRegistry.Empty"]},{"name":"object Empty : TypeCheckerDispatcherRegistry","description":"viaduct.engine.api.TypeCheckerDispatcherRegistry.Empty","location":"engine/engine-api/viaduct.engine.api/-type-checker-dispatcher-registry/-empty/index.html","searchKeys":["Empty","object Empty : TypeCheckerDispatcherRegistry","viaduct.engine.api.TypeCheckerDispatcherRegistry.Empty"]},{"name":"object SelectionsParser","description":"viaduct.engine.api.select.SelectionsParser","location":"engine/engine-api/viaduct.engine.api.select/-selections-parser/index.html","searchKeys":["SelectionsParser","object SelectionsParser","viaduct.engine.api.select.SelectionsParser"]},{"name":"object Success : CheckerResult","description":"viaduct.engine.api.CheckerResult.Success","location":"engine/engine-api/viaduct.engine.api/-checker-result/-success/index.html","searchKeys":["Success","object Success : CheckerResult","viaduct.engine.api.CheckerResult.Success"]},{"name":"open class ChainedInstrumentation(val instrumentations: List<Instrumentation>) : Instrumentation","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/index.html","searchKeys":["ChainedInstrumentation","open class ChainedInstrumentation(val instrumentations: List<Instrumentation>) : Instrumentation","viaduct.engine.api.instrumentation.ChainedInstrumentation"]},{"name":"open class ChainedModernGJInstrumentation(val gjInstrumentations: List<ViaductModernGJInstrumentation>) : ChainedInstrumentation, ViaductModernGJInstrumentation","description":"viaduct.engine.api.instrumentation.ChainedModernGJInstrumentation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-modern-g-j-instrumentation/index.html","searchKeys":["ChainedModernGJInstrumentation","open class ChainedModernGJInstrumentation(val gjInstrumentations: List<ViaductModernGJInstrumentation>) : ChainedInstrumentation, ViaductModernGJInstrumentation","viaduct.engine.api.instrumentation.ChainedModernGJInstrumentation"]},{"name":"open class ViaductInstrumentationAdapter(viaductInstrumentation: IViaductInstrumentation) : ViaductModernGJInstrumentation","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/index.html","searchKeys":["ViaductInstrumentationAdapter","open class ViaductInstrumentationAdapter(viaductInstrumentation: IViaductInstrumentation) : ViaductModernGJInstrumentation","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter"]},{"name":"open class ViaductInstrumentationBase : IViaductInstrumentation","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationBase","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-base/index.html","searchKeys":["ViaductInstrumentationBase","open class ViaductInstrumentationBase : IViaductInstrumentation","viaduct.engine.api.instrumentation.ViaductInstrumentationBase"]},{"name":"open fun asGJInstrumentation(): ViaductModernGJInstrumentation","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.asGJInstrumentation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/as-g-j-instrumentation.html","searchKeys":["asGJInstrumentation","open fun asGJInstrumentation(): ViaductModernGJInstrumentation","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.asGJInstrumentation"]},{"name":"open fun beginCompleteObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.ViaductModernGJInstrumentation.beginCompleteObject","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-g-j-instrumentation/begin-complete-object.html","searchKeys":["beginCompleteObject","open fun beginCompleteObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.ViaductModernGJInstrumentation.beginCompleteObject"]},{"name":"open fun beginExecuteOperation(parameters: InstrumentationExecuteOperationParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.beginExecuteOperation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/begin-execute-operation.html","searchKeys":["beginExecuteOperation","open fun beginExecuteOperation(parameters: InstrumentationExecuteOperationParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","viaduct.engine.api.instrumentation.IViaductInstrumentation.beginExecuteOperation"]},{"name":"open fun beginExecuteOperation(parameters: InstrumentationExecuteOperationParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.beginExecuteOperation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/begin-execute-operation.html","searchKeys":["beginExecuteOperation","open fun beginExecuteOperation(parameters: InstrumentationExecuteOperationParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.beginExecuteOperation"]},{"name":"open fun beginExecution(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.beginExecution","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/begin-execution.html","searchKeys":["beginExecution","open fun beginExecution(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","viaduct.engine.api.instrumentation.IViaductInstrumentation.beginExecution"]},{"name":"open fun beginExecution(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.beginExecution","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/begin-execution.html","searchKeys":["beginExecution","open fun beginExecution(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.beginExecution"]},{"name":"open fun beginExecutionStrategy(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): ExecutionStrategyInstrumentationContext?","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.beginExecutionStrategy","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/begin-execution-strategy.html","searchKeys":["beginExecutionStrategy","open fun beginExecutionStrategy(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): ExecutionStrategyInstrumentationContext?","viaduct.engine.api.instrumentation.IViaductInstrumentation.beginExecutionStrategy"]},{"name":"open fun beginExecutionStrategy(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): ExecutionStrategyInstrumentationContext?","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.beginExecutionStrategy","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/begin-execution-strategy.html","searchKeys":["beginExecutionStrategy","open fun beginExecutionStrategy(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): ExecutionStrategyInstrumentationContext?","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.beginExecutionStrategy"]},{"name":"open fun beginFetchObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Map<String, Any?>>?","description":"viaduct.engine.api.instrumentation.ViaductModernGJInstrumentation.beginFetchObject","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-g-j-instrumentation/begin-fetch-object.html","searchKeys":["beginFetchObject","open fun beginFetchObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Map<String, Any?>>?","viaduct.engine.api.instrumentation.ViaductModernGJInstrumentation.beginFetchObject"]},{"name":"open fun beginParse(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<Document>?","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.beginParse","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/begin-parse.html","searchKeys":["beginParse","open fun beginParse(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<Document>?","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.beginParse"]},{"name":"open fun beginParse(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<Document?>?","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.beginParse","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/begin-parse.html","searchKeys":["beginParse","open fun beginParse(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<Document?>?","viaduct.engine.api.instrumentation.IViaductInstrumentation.beginParse"]},{"name":"open fun beginSubscribedFieldEvent(parameters: InstrumentationFieldParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.beginSubscribedFieldEvent","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/begin-subscribed-field-event.html","searchKeys":["beginSubscribedFieldEvent","open fun beginSubscribedFieldEvent(parameters: InstrumentationFieldParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","viaduct.engine.api.instrumentation.IViaductInstrumentation.beginSubscribedFieldEvent"]},{"name":"open fun beginValidation(parameters: InstrumentationValidationParameters, state: InstrumentationState?): InstrumentationContext<List<ValidationError>>?","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.beginValidation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/begin-validation.html","searchKeys":["beginValidation","open fun beginValidation(parameters: InstrumentationValidationParameters, state: InstrumentationState?): InstrumentationContext<List<ValidationError>>?","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.beginValidation"]},{"name":"open fun beginValidation(parameters: InstrumentationValidationParameters, state: InstrumentationState?): InstrumentationContext<MutableList<ValidationError>>?","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.beginValidation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/begin-validation.html","searchKeys":["beginValidation","open fun beginValidation(parameters: InstrumentationValidationParameters, state: InstrumentationState?): InstrumentationContext<MutableList<ValidationError>>?","viaduct.engine.api.instrumentation.IViaductInstrumentation.beginValidation"]},{"name":"open fun createState(parameters: InstrumentationCreateStateParameters): InstrumentationState?","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.createState","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/create-state.html","searchKeys":["createState","open fun createState(parameters: InstrumentationCreateStateParameters): InstrumentationState?","viaduct.engine.api.instrumentation.IViaductInstrumentation.createState"]},{"name":"open fun createState(parameters: InstrumentationCreateStateParameters): InstrumentationState?","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.createState","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/create-state.html","searchKeys":["createState","open fun createState(parameters: InstrumentationCreateStateParameters): InstrumentationState?","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.createState"]},{"name":"open fun createStateAsync(parameters: InstrumentationCreateStateParameters): CompletableFuture<InstrumentationState>?","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.createStateAsync","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/create-state-async.html","searchKeys":["createStateAsync","open fun createStateAsync(parameters: InstrumentationCreateStateParameters): CompletableFuture<InstrumentationState>?","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.createStateAsync"]},{"name":"open fun hasRequiredSelectionSets(): Boolean","description":"viaduct.engine.api.FieldResolverExecutor.hasRequiredSelectionSets","location":"engine/engine-api/viaduct.engine.api/-field-resolver-executor/has-required-selection-sets.html","searchKeys":["hasRequiredSelectionSets","open fun hasRequiredSelectionSets(): Boolean","viaduct.engine.api.FieldResolverExecutor.hasRequiredSelectionSets"]},{"name":"open fun instrumentAccessCheck(checkerDispatcher: CheckerDispatcher, parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): CheckerDispatcher","description":"viaduct.engine.api.instrumentation.ViaductModernGJInstrumentation.instrumentAccessCheck","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-g-j-instrumentation/instrument-access-check.html","searchKeys":["instrumentAccessCheck","open fun instrumentAccessCheck(checkerDispatcher: CheckerDispatcher, parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): CheckerDispatcher","viaduct.engine.api.instrumentation.ViaductModernGJInstrumentation.instrumentAccessCheck"]},{"name":"open fun instrumentDocumentAndVariables(documentAndVariables: DocumentAndVariables, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): DocumentAndVariables","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.instrumentDocumentAndVariables","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/instrument-document-and-variables.html","searchKeys":["instrumentDocumentAndVariables","open fun instrumentDocumentAndVariables(documentAndVariables: DocumentAndVariables, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): DocumentAndVariables","viaduct.engine.api.instrumentation.IViaductInstrumentation.instrumentDocumentAndVariables"]},{"name":"open fun instrumentDocumentAndVariables(documentAndVariables: DocumentAndVariables, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): DocumentAndVariables","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.instrumentDocumentAndVariables","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/instrument-document-and-variables.html","searchKeys":["instrumentDocumentAndVariables","open fun instrumentDocumentAndVariables(documentAndVariables: DocumentAndVariables, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): DocumentAndVariables","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.instrumentDocumentAndVariables"]},{"name":"open fun instrumentExecutionContext(executionContext: ExecutionContext, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionContext","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.instrumentExecutionContext","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/instrument-execution-context.html","searchKeys":["instrumentExecutionContext","open fun instrumentExecutionContext(executionContext: ExecutionContext, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionContext","viaduct.engine.api.instrumentation.IViaductInstrumentation.instrumentExecutionContext"]},{"name":"open fun instrumentExecutionContext(executionContext: ExecutionContext, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionContext","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.instrumentExecutionContext","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/instrument-execution-context.html","searchKeys":["instrumentExecutionContext","open fun instrumentExecutionContext(executionContext: ExecutionContext, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionContext","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.instrumentExecutionContext"]},{"name":"open fun instrumentExecutionInput(executionInput: ExecutionInput, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionInput","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.instrumentExecutionInput","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/instrument-execution-input.html","searchKeys":["instrumentExecutionInput","open fun instrumentExecutionInput(executionInput: ExecutionInput, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionInput","viaduct.engine.api.instrumentation.IViaductInstrumentation.instrumentExecutionInput"]},{"name":"open fun instrumentExecutionInput(executionInput: ExecutionInput, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionInput","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.instrumentExecutionInput","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/instrument-execution-input.html","searchKeys":["instrumentExecutionInput","open fun instrumentExecutionInput(executionInput: ExecutionInput, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionInput","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.instrumentExecutionInput"]},{"name":"open fun instrumentExecutionResult(executionResult: ExecutionResult, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): CompletableFuture<ExecutionResult>","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.instrumentExecutionResult","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/instrument-execution-result.html","searchKeys":["instrumentExecutionResult","open fun instrumentExecutionResult(executionResult: ExecutionResult, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): CompletableFuture<ExecutionResult>","viaduct.engine.api.instrumentation.IViaductInstrumentation.instrumentExecutionResult"]},{"name":"open fun instrumentExecutionResult(executionResult: ExecutionResult, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): CompletableFuture<ExecutionResult>","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.instrumentExecutionResult","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/instrument-execution-result.html","searchKeys":["instrumentExecutionResult","open fun instrumentExecutionResult(executionResult: ExecutionResult, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): CompletableFuture<ExecutionResult>","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.instrumentExecutionResult"]},{"name":"open fun instrumentSchema(schema: GraphQLSchema, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): GraphQLSchema","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.instrumentSchema","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/instrument-schema.html","searchKeys":["instrumentSchema","open fun instrumentSchema(schema: GraphQLSchema, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): GraphQLSchema","viaduct.engine.api.instrumentation.IViaductInstrumentation.instrumentSchema"]},{"name":"open fun instrumentSchema(schema: GraphQLSchema, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): GraphQLSchema","description":"viaduct.engine.api.instrumentation.ViaductModernInstrumentation.instrumentSchema","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-modern-instrumentation/instrument-schema.html","searchKeys":["instrumentSchema","open fun instrumentSchema(schema: GraphQLSchema, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): GraphQLSchema","viaduct.engine.api.instrumentation.ViaductModernInstrumentation.instrumentSchema"]},{"name":"open fun transformResult(dataFetcher: DataFetcher<*>, transform: DataFetchingEnvironment.(Any?) -> Any?): DataFetcher<*>","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.WithInstrumentDataFetcher.transformResult","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/-with-instrument-data-fetcher/transform-result.html","searchKeys":["transformResult","open fun transformResult(dataFetcher: DataFetcher<*>, transform: DataFetchingEnvironment.(Any?) -> Any?): DataFetcher<*>","viaduct.engine.api.instrumentation.IViaductInstrumentation.WithInstrumentDataFetcher.transformResult"]},{"name":"open fun validated(): VariablesResolver","description":"viaduct.engine.api.VariablesResolver.validated","location":"engine/engine-api/viaduct.engine.api/-variables-resolver/validated.html","searchKeys":["validated","open fun validated(): VariablesResolver","viaduct.engine.api.VariablesResolver.validated"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"viaduct.engine.api.ObjectEngineResult.Key.equals","location":"engine/engine-api/viaduct.engine.api/-object-engine-result/-key/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","viaduct.engine.api.ObjectEngineResult.Key.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"viaduct.engine.api.select.ParsedSelectionsImpl.equals","location":"engine/engine-api/viaduct.engine.api.select/-parsed-selections-impl/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","viaduct.engine.api.select.ParsedSelectionsImpl.equals"]},{"name":"open operator override fun iterator(): Iterator<MergedField>","description":"viaduct.engine.api.fragment.Fragment.iterator","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<MergedField>","viaduct.engine.api.fragment.Fragment.iterator"]},{"name":"open override fun beginCompleteObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.ChainedModernGJInstrumentation.beginCompleteObject","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-modern-g-j-instrumentation/begin-complete-object.html","searchKeys":["beginCompleteObject","open override fun beginCompleteObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.ChainedModernGJInstrumentation.beginCompleteObject"]},{"name":"open override fun beginCompleteObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginCompleteObject","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/begin-complete-object.html","searchKeys":["beginCompleteObject","open override fun beginCompleteObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginCompleteObject"]},{"name":"open override fun beginDeferredField(state: InstrumentationState?): InstrumentationContext<Any>","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.beginDeferredField","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/begin-deferred-field.html","searchKeys":["beginDeferredField","open override fun beginDeferredField(state: InstrumentationState?): InstrumentationContext<Any>","viaduct.engine.api.instrumentation.ChainedInstrumentation.beginDeferredField"]},{"name":"open override fun beginExecuteOperation(parameters: InstrumentationExecuteOperationParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.beginExecuteOperation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/begin-execute-operation.html","searchKeys":["beginExecuteOperation","open override fun beginExecuteOperation(parameters: InstrumentationExecuteOperationParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>","viaduct.engine.api.instrumentation.ChainedInstrumentation.beginExecuteOperation"]},{"name":"open override fun beginExecuteOperation(parameters: InstrumentationExecuteOperationParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginExecuteOperation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/begin-execute-operation.html","searchKeys":["beginExecuteOperation","open override fun beginExecuteOperation(parameters: InstrumentationExecuteOperationParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginExecuteOperation"]},{"name":"open override fun beginExecution(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.beginExecution","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/begin-execution.html","searchKeys":["beginExecution","open override fun beginExecution(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>","viaduct.engine.api.instrumentation.ChainedInstrumentation.beginExecution"]},{"name":"open override fun beginExecution(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginExecution","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/begin-execution.html","searchKeys":["beginExecution","open override fun beginExecution(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginExecution"]},{"name":"open override fun beginExecutionStrategy(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): ExecutionStrategyInstrumentationContext?","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.beginExecutionStrategy","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/begin-execution-strategy.html","searchKeys":["beginExecutionStrategy","open override fun beginExecutionStrategy(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): ExecutionStrategyInstrumentationContext?","viaduct.engine.api.instrumentation.ChainedInstrumentation.beginExecutionStrategy"]},{"name":"open override fun beginExecutionStrategy(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): ExecutionStrategyInstrumentationContext?","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginExecutionStrategy","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/begin-execution-strategy.html","searchKeys":["beginExecutionStrategy","open override fun beginExecutionStrategy(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): ExecutionStrategyInstrumentationContext?","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginExecutionStrategy"]},{"name":"open override fun beginFetchObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Map<String, Any?>>?","description":"viaduct.engine.api.instrumentation.ChainedModernGJInstrumentation.beginFetchObject","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-modern-g-j-instrumentation/begin-fetch-object.html","searchKeys":["beginFetchObject","open override fun beginFetchObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Map<String, Any?>>?","viaduct.engine.api.instrumentation.ChainedModernGJInstrumentation.beginFetchObject"]},{"name":"open override fun beginFetchObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Map<String, Any?>>?","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginFetchObject","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/begin-fetch-object.html","searchKeys":["beginFetchObject","open override fun beginFetchObject(parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): InstrumentationContext<Map<String, Any?>>?","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginFetchObject"]},{"name":"open override fun beginFieldCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.beginFieldCompletion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/begin-field-completion.html","searchKeys":["beginFieldCompletion","open override fun beginFieldCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.ChainedInstrumentation.beginFieldCompletion"]},{"name":"open override fun beginFieldCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginFieldCompletion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/begin-field-completion.html","searchKeys":["beginFieldCompletion","open override fun beginFieldCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginFieldCompletion"]},{"name":"open override fun beginFieldExecution(parameters: InstrumentationFieldParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.beginFieldExecution","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/begin-field-execution.html","searchKeys":["beginFieldExecution","open override fun beginFieldExecution(parameters: InstrumentationFieldParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.ChainedInstrumentation.beginFieldExecution"]},{"name":"open override fun beginFieldExecution(parameters: InstrumentationFieldParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginFieldExecution","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/begin-field-execution.html","searchKeys":["beginFieldExecution","open override fun beginFieldExecution(parameters: InstrumentationFieldParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginFieldExecution"]},{"name":"open override fun beginFieldFetch(parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.beginFieldFetch","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/begin-field-fetch.html","searchKeys":["beginFieldFetch","open override fun beginFieldFetch(parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.ChainedInstrumentation.beginFieldFetch"]},{"name":"open override fun beginFieldFetch(parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginFieldFetch","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/begin-field-fetch.html","searchKeys":["beginFieldFetch","open override fun beginFieldFetch(parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginFieldFetch"]},{"name":"open override fun beginFieldFetching(parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): FieldFetchingInstrumentationContext?","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.beginFieldFetching","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/begin-field-fetching.html","searchKeys":["beginFieldFetching","open override fun beginFieldFetching(parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): FieldFetchingInstrumentationContext?","viaduct.engine.api.instrumentation.ChainedInstrumentation.beginFieldFetching"]},{"name":"open override fun beginFieldListCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.beginFieldListCompletion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/begin-field-list-completion.html","searchKeys":["beginFieldListCompletion","open override fun beginFieldListCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.ChainedInstrumentation.beginFieldListCompletion"]},{"name":"open override fun beginFieldListCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginFieldListCompletion","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/begin-field-list-completion.html","searchKeys":["beginFieldListCompletion","open override fun beginFieldListCompletion(parameters: InstrumentationFieldCompleteParameters, state: InstrumentationState?): InstrumentationContext<Any>?","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginFieldListCompletion"]},{"name":"open override fun beginParse(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<Document>?","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.beginParse","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/begin-parse.html","searchKeys":["beginParse","open override fun beginParse(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<Document>?","viaduct.engine.api.instrumentation.ChainedInstrumentation.beginParse"]},{"name":"open override fun beginParse(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<Document?>?","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginParse","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/begin-parse.html","searchKeys":["beginParse","open override fun beginParse(parameters: InstrumentationExecutionParameters, state: InstrumentationState?): InstrumentationContext<Document?>?","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginParse"]},{"name":"open override fun beginSubscribedFieldEvent(parameters: InstrumentationFieldParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginSubscribedFieldEvent","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/begin-subscribed-field-event.html","searchKeys":["beginSubscribedFieldEvent","open override fun beginSubscribedFieldEvent(parameters: InstrumentationFieldParameters, state: InstrumentationState?): InstrumentationContext<ExecutionResult>?","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginSubscribedFieldEvent"]},{"name":"open override fun beginValidation(parameters: InstrumentationValidationParameters, state: InstrumentationState?): InstrumentationContext<List<ValidationError>>","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.beginValidation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/begin-validation.html","searchKeys":["beginValidation","open override fun beginValidation(parameters: InstrumentationValidationParameters, state: InstrumentationState?): InstrumentationContext<List<ValidationError>>","viaduct.engine.api.instrumentation.ChainedInstrumentation.beginValidation"]},{"name":"open override fun beginValidation(parameters: InstrumentationValidationParameters, state: InstrumentationState?): InstrumentationContext<MutableList<ValidationError>>?","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginValidation","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/begin-validation.html","searchKeys":["beginValidation","open override fun beginValidation(parameters: InstrumentationValidationParameters, state: InstrumentationState?): InstrumentationContext<MutableList<ValidationError>>?","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.beginValidation"]},{"name":"open override fun build(): ResolvedEngineObjectData","description":"viaduct.engine.api.ResolvedEngineObjectData.Builder.build","location":"engine/engine-api/viaduct.engine.api/-resolved-engine-object-data/-builder/build.html","searchKeys":["build","open override fun build(): ResolvedEngineObjectData","viaduct.engine.api.ResolvedEngineObjectData.Builder.build"]},{"name":"open override fun checkerExecutorForField(typeName: String, fieldName: String): CheckerExecutor?","description":"viaduct.engine.api.NoOpCheckerExecutorFactoryImpl.checkerExecutorForField","location":"engine/engine-api/viaduct.engine.api/-no-op-checker-executor-factory-impl/checker-executor-for-field.html","searchKeys":["checkerExecutorForField","open override fun checkerExecutorForField(typeName: String, fieldName: String): CheckerExecutor?","viaduct.engine.api.NoOpCheckerExecutorFactoryImpl.checkerExecutorForField"]},{"name":"open override fun checkerExecutorForType(typeName: String): CheckerExecutor?","description":"viaduct.engine.api.NoOpCheckerExecutorFactoryImpl.checkerExecutorForType","location":"engine/engine-api/viaduct.engine.api/-no-op-checker-executor-factory-impl/checker-executor-for-type.html","searchKeys":["checkerExecutorForType","open override fun checkerExecutorForType(typeName: String): CheckerExecutor?","viaduct.engine.api.NoOpCheckerExecutorFactoryImpl.checkerExecutorForType"]},{"name":"open override fun createStateAsync(parameters: InstrumentationCreateStateParameters): CompletableFuture<InstrumentationState>?","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.createStateAsync","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/create-state-async.html","searchKeys":["createStateAsync","open override fun createStateAsync(parameters: InstrumentationCreateStateParameters): CompletableFuture<InstrumentationState>?","viaduct.engine.api.instrumentation.ChainedInstrumentation.createStateAsync"]},{"name":"open override fun createStateAsync(parameters: InstrumentationCreateStateParameters): CompletableFuture<InstrumentationState?>?","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.createStateAsync","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/create-state-async.html","searchKeys":["createStateAsync","open override fun createStateAsync(parameters: InstrumentationCreateStateParameters): CompletableFuture<InstrumentationState?>?","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.createStateAsync"]},{"name":"open override fun document(): Document","description":"viaduct.engine.api.fragment.FragmentSource.Companion.Empty.document","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-source/-companion/-empty/document.html","searchKeys":["document","open override fun document(): Document","viaduct.engine.api.fragment.FragmentSource.Companion.Empty.document"]},{"name":"open override fun documentString(): String","description":"viaduct.engine.api.fragment.FragmentSource.Companion.Empty.documentString","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-source/-companion/-empty/document-string.html","searchKeys":["documentString","open override fun documentString(): String","viaduct.engine.api.fragment.FragmentSource.Companion.Empty.documentString"]},{"name":"open override fun filterToPath(path: List<String>): ParsedSelectionsImpl?","description":"viaduct.engine.api.select.ParsedSelectionsImpl.filterToPath","location":"engine/engine-api/viaduct.engine.api.select/-parsed-selections-impl/filter-to-path.html","searchKeys":["filterToPath","open override fun filterToPath(path: List<String>): ParsedSelectionsImpl?","viaduct.engine.api.select.ParsedSelectionsImpl.filterToPath"]},{"name":"open override fun getFieldCheckerDispatcher(typeName: String, fieldName: String): CheckerDispatcher?","description":"viaduct.engine.api.FieldCheckerDispatcherRegistry.Empty.getFieldCheckerDispatcher","location":"engine/engine-api/viaduct.engine.api/-field-checker-dispatcher-registry/-empty/get-field-checker-dispatcher.html","searchKeys":["getFieldCheckerDispatcher","open override fun getFieldCheckerDispatcher(typeName: String, fieldName: String): CheckerDispatcher?","viaduct.engine.api.FieldCheckerDispatcherRegistry.Empty.getFieldCheckerDispatcher"]},{"name":"open override fun getRequiredSelectionSets(typeName: String, fieldName: String, executeAccessChecksInModstrat: Boolean): List<RequiredSelectionSet>","description":"viaduct.engine.api.RequiredSelectionSetRegistry.Empty.getRequiredSelectionSets","location":"engine/engine-api/viaduct.engine.api/-required-selection-set-registry/-empty/get-required-selection-sets.html","searchKeys":["getRequiredSelectionSets","open override fun getRequiredSelectionSets(typeName: String, fieldName: String, executeAccessChecksInModstrat: Boolean): List<RequiredSelectionSet>","viaduct.engine.api.RequiredSelectionSetRegistry.Empty.getRequiredSelectionSets"]},{"name":"open override fun getRequiredSelectionSetsForType(typeName: String, executeAccessChecksInModstrat: Boolean): List<RequiredSelectionSet>","description":"viaduct.engine.api.RequiredSelectionSetRegistry.Empty.getRequiredSelectionSetsForType","location":"engine/engine-api/viaduct.engine.api/-required-selection-set-registry/-empty/get-required-selection-sets-for-type.html","searchKeys":["getRequiredSelectionSetsForType","open override fun getRequiredSelectionSetsForType(typeName: String, executeAccessChecksInModstrat: Boolean): List<RequiredSelectionSet>","viaduct.engine.api.RequiredSelectionSetRegistry.Empty.getRequiredSelectionSetsForType"]},{"name":"open override fun getTypeCheckerDispatcher(typeName: String): CheckerDispatcher?","description":"viaduct.engine.api.TypeCheckerDispatcherRegistry.Empty.getTypeCheckerDispatcher","location":"engine/engine-api/viaduct.engine.api/-type-checker-dispatcher-registry/-empty/get-type-checker-dispatcher.html","searchKeys":["getTypeCheckerDispatcher","open override fun getTypeCheckerDispatcher(typeName: String): CheckerDispatcher?","viaduct.engine.api.TypeCheckerDispatcherRegistry.Empty.getTypeCheckerDispatcher"]},{"name":"open override fun hashCode(): Int","description":"viaduct.engine.api.ObjectEngineResult.Key.hashCode","location":"engine/engine-api/viaduct.engine.api/-object-engine-result/-key/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","viaduct.engine.api.ObjectEngineResult.Key.hashCode"]},{"name":"open override fun instrumentAccessCheck(checkerDispatcher: CheckerDispatcher, parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): CheckerDispatcher","description":"viaduct.engine.api.instrumentation.ChainedModernGJInstrumentation.instrumentAccessCheck","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-modern-g-j-instrumentation/instrument-access-check.html","searchKeys":["instrumentAccessCheck","open override fun instrumentAccessCheck(checkerDispatcher: CheckerDispatcher, parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): CheckerDispatcher","viaduct.engine.api.instrumentation.ChainedModernGJInstrumentation.instrumentAccessCheck"]},{"name":"open override fun instrumentAccessCheck(checkerDispatcher: CheckerDispatcher, parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): CheckerDispatcher","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.instrumentAccessCheck","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/instrument-access-check.html","searchKeys":["instrumentAccessCheck","open override fun instrumentAccessCheck(checkerDispatcher: CheckerDispatcher, parameters: InstrumentationExecutionStrategyParameters, state: InstrumentationState?): CheckerDispatcher","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.instrumentAccessCheck"]},{"name":"open override fun instrumentDataFetcher(dataFetcher: DataFetcher<*>, parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): DataFetcher<*>","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.instrumentDataFetcher","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/instrument-data-fetcher.html","searchKeys":["instrumentDataFetcher","open override fun instrumentDataFetcher(dataFetcher: DataFetcher<*>, parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): DataFetcher<*>","viaduct.engine.api.instrumentation.ChainedInstrumentation.instrumentDataFetcher"]},{"name":"open override fun instrumentDataFetcher(dataFetcher: DataFetcher<*>, parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): DataFetcher<*>","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.instrumentDataFetcher","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/instrument-data-fetcher.html","searchKeys":["instrumentDataFetcher","open override fun instrumentDataFetcher(dataFetcher: DataFetcher<*>, parameters: InstrumentationFieldFetchParameters, state: InstrumentationState?): DataFetcher<*>","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.instrumentDataFetcher"]},{"name":"open override fun instrumentDocumentAndVariables(documentAndVariables: DocumentAndVariables, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): DocumentAndVariables","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.instrumentDocumentAndVariables","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/instrument-document-and-variables.html","searchKeys":["instrumentDocumentAndVariables","open override fun instrumentDocumentAndVariables(documentAndVariables: DocumentAndVariables, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): DocumentAndVariables","viaduct.engine.api.instrumentation.ChainedInstrumentation.instrumentDocumentAndVariables"]},{"name":"open override fun instrumentDocumentAndVariables(documentAndVariables: DocumentAndVariables, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): DocumentAndVariables","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.instrumentDocumentAndVariables","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/instrument-document-and-variables.html","searchKeys":["instrumentDocumentAndVariables","open override fun instrumentDocumentAndVariables(documentAndVariables: DocumentAndVariables, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): DocumentAndVariables","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.instrumentDocumentAndVariables"]},{"name":"open override fun instrumentExecutionContext(executionContext: ExecutionContext, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionContext","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.instrumentExecutionContext","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/instrument-execution-context.html","searchKeys":["instrumentExecutionContext","open override fun instrumentExecutionContext(executionContext: ExecutionContext, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionContext","viaduct.engine.api.instrumentation.ChainedInstrumentation.instrumentExecutionContext"]},{"name":"open override fun instrumentExecutionContext(executionContext: ExecutionContext, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionContext","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.instrumentExecutionContext","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/instrument-execution-context.html","searchKeys":["instrumentExecutionContext","open override fun instrumentExecutionContext(executionContext: ExecutionContext, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionContext","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.instrumentExecutionContext"]},{"name":"open override fun instrumentExecutionInput(executionInput: ExecutionInput, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionInput","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.instrumentExecutionInput","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/instrument-execution-input.html","searchKeys":["instrumentExecutionInput","open override fun instrumentExecutionInput(executionInput: ExecutionInput, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionInput","viaduct.engine.api.instrumentation.ChainedInstrumentation.instrumentExecutionInput"]},{"name":"open override fun instrumentExecutionInput(executionInput: ExecutionInput, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionInput","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.instrumentExecutionInput","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/instrument-execution-input.html","searchKeys":["instrumentExecutionInput","open override fun instrumentExecutionInput(executionInput: ExecutionInput, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): ExecutionInput","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.instrumentExecutionInput"]},{"name":"open override fun instrumentExecutionResult(executionResult: ExecutionResult, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): CompletableFuture<ExecutionResult>","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.instrumentExecutionResult","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/instrument-execution-result.html","searchKeys":["instrumentExecutionResult","open override fun instrumentExecutionResult(executionResult: ExecutionResult, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): CompletableFuture<ExecutionResult>","viaduct.engine.api.instrumentation.ChainedInstrumentation.instrumentExecutionResult"]},{"name":"open override fun instrumentExecutionResult(executionResult: ExecutionResult, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): CompletableFuture<ExecutionResult>","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.instrumentExecutionResult","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/instrument-execution-result.html","searchKeys":["instrumentExecutionResult","open override fun instrumentExecutionResult(executionResult: ExecutionResult, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): CompletableFuture<ExecutionResult>","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.instrumentExecutionResult"]},{"name":"open override fun instrumentSchema(schema: GraphQLSchema, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): GraphQLSchema","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.instrumentSchema","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/instrument-schema.html","searchKeys":["instrumentSchema","open override fun instrumentSchema(schema: GraphQLSchema, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): GraphQLSchema","viaduct.engine.api.instrumentation.ChainedInstrumentation.instrumentSchema"]},{"name":"open override fun instrumentSchema(schema: GraphQLSchema, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): GraphQLSchema","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.instrumentSchema","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/instrument-schema.html","searchKeys":["instrumentSchema","open override fun instrumentSchema(schema: GraphQLSchema, parameters: InstrumentationExecutionParameters, state: InstrumentationState?): GraphQLSchema","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.instrumentSchema"]},{"name":"open override fun parse(fragment: Fragment): Document","description":"viaduct.engine.api.fragment.ViaductExecutableFragmentParser.parse","location":"engine/engine-api/viaduct.engine.api.fragment/-viaduct-executable-fragment-parser/parse.html","searchKeys":["parse","open override fun parse(fragment: Fragment): Document","viaduct.engine.api.fragment.ViaductExecutableFragmentParser.parse"]},{"name":"open override fun put(selection: String, value: Any?): ResolvedEngineObjectData.Builder","description":"viaduct.engine.api.ResolvedEngineObjectData.Builder.put","location":"engine/engine-api/viaduct.engine.api/-resolved-engine-object-data/-builder/put.html","searchKeys":["put","open override fun put(selection: String, value: Any?): ResolvedEngineObjectData.Builder","viaduct.engine.api.ResolvedEngineObjectData.Builder.put"]},{"name":"open override fun toDocument(): Document","description":"viaduct.engine.api.select.ParsedSelectionsImpl.toDocument","location":"engine/engine-api/viaduct.engine.api.select/-parsed-selections-impl/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","viaduct.engine.api.select.ParsedSelectionsImpl.toDocument"]},{"name":"open override fun toString(): String","description":"viaduct.engine.api.ObjectEngineResult.Key.toString","location":"engine/engine-api/viaduct.engine.api/-object-engine-result/-key/to-string.html","searchKeys":["toString","open override fun toString(): String","viaduct.engine.api.ObjectEngineResult.Key.toString"]},{"name":"open override fun toString(): String","description":"viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.toString","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/-companion/-error-metadata/to-string.html","searchKeys":["toString","open override fun toString(): String","viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.toString"]},{"name":"open override fun toString(): String","description":"viaduct.engine.api.fragment.FragmentVariable.toString","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variable/to-string.html","searchKeys":["toString","open override fun toString(): String","viaduct.engine.api.fragment.FragmentVariable.toString"]},{"name":"open override fun toString(): String","description":"viaduct.engine.api.select.ParsedSelectionsImpl.toString","location":"engine/engine-api/viaduct.engine.api.select/-parsed-selections-impl/to-string.html","searchKeys":["toString","open override fun toString(): String","viaduct.engine.api.select.ParsedSelectionsImpl.toString"]},{"name":"open override val asError: CheckerResult.Error","description":"viaduct.engine.api.CheckerResult.Error.asError","location":"engine/engine-api/viaduct.engine.api/-checker-result/-error/as-error.html","searchKeys":["asError","open override val asError: CheckerResult.Error","viaduct.engine.api.CheckerResult.Error.asError"]},{"name":"open override val asError: Nothing?","description":"viaduct.engine.api.CheckerResult.Success.asError","location":"engine/engine-api/viaduct.engine.api/-checker-result/-success/as-error.html","searchKeys":["asError","open override val asError: Nothing?","viaduct.engine.api.CheckerResult.Success.asError"]},{"name":"open override val cause: Throwable","description":"viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.cause","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-resolution-error/cause.html","searchKeys":["cause","open override val cause: Throwable","viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.cause"]},{"name":"open override val cause: Throwable? = null","description":"viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.cause","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-engine-resolution-error/cause.html","searchKeys":["cause","open override val cause: Throwable? = null","viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.cause"]},{"name":"open override val fatal: Boolean","description":"viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.fatal","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-engine-resolution-error/fatal.html","searchKeys":["fatal","open override val fatal: Boolean","viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.fatal"]},{"name":"open override val fatal: Boolean","description":"viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.fatal","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-resolution-error/fatal.html","searchKeys":["fatal","open override val fatal: Boolean","viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.fatal"]},{"name":"open override val fragmentMap: Map<String, FragmentDefinition>","description":"viaduct.engine.api.select.ParsedSelectionsImpl.fragmentMap","location":"engine/engine-api/viaduct.engine.api.select/-parsed-selections-impl/fragment-map.html","searchKeys":["fragmentMap","open override val fragmentMap: Map<String, FragmentDefinition>","viaduct.engine.api.select.ParsedSelectionsImpl.fragmentMap"]},{"name":"open override val graphQLObjectType: GraphQLObjectType","description":"viaduct.engine.api.ResolvedEngineObjectData.Builder.graphQLObjectType","location":"engine/engine-api/viaduct.engine.api/-resolved-engine-object-data/-builder/graph-q-l-object-type.html","searchKeys":["graphQLObjectType","open override val graphQLObjectType: GraphQLObjectType","viaduct.engine.api.ResolvedEngineObjectData.Builder.graphQLObjectType"]},{"name":"open override val graphQLObjectType: GraphQLObjectType","description":"viaduct.engine.api.ResolvedEngineObjectData.graphQLObjectType","location":"engine/engine-api/viaduct.engine.api/-resolved-engine-object-data/graph-q-l-object-type.html","searchKeys":["graphQLObjectType","open override val graphQLObjectType: GraphQLObjectType","viaduct.engine.api.ResolvedEngineObjectData.graphQLObjectType"]},{"name":"open override val message: String","description":"viaduct.engine.api.UnboundVariablesException.message","location":"engine/engine-api/viaduct.engine.api/-unbound-variables-exception/message.html","searchKeys":["message","open override val message: String","viaduct.engine.api.UnboundVariablesException.message"]},{"name":"open override val message: String","description":"viaduct.engine.api.UnsetSelectionException.message","location":"engine/engine-api/viaduct.engine.api/-unset-selection-exception/message.html","searchKeys":["message","open override val message: String","viaduct.engine.api.UnsetSelectionException.message"]},{"name":"open override val message: String","description":"viaduct.engine.api.VariableCycleException.message","location":"engine/engine-api/viaduct.engine.api/-variable-cycle-exception/message.html","searchKeys":["message","open override val message: String","viaduct.engine.api.VariableCycleException.message"]},{"name":"open override val message: String","description":"viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.message","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-engine-resolution-error/message.html","searchKeys":["message","open override val message: String","viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.message"]},{"name":"open override val message: String","description":"viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.message","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-resolution-error/message.html","searchKeys":["message","open override val message: String","viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.message"]},{"name":"open override val name: String","description":"viaduct.engine.api.FromArgumentVariable.name","location":"engine/engine-api/viaduct.engine.api/-from-argument-variable/name.html","searchKeys":["name","open override val name: String","viaduct.engine.api.FromArgumentVariable.name"]},{"name":"open override val name: String","description":"viaduct.engine.api.FromObjectFieldVariable.name","location":"engine/engine-api/viaduct.engine.api/-from-object-field-variable/name.html","searchKeys":["name","open override val name: String","viaduct.engine.api.FromObjectFieldVariable.name"]},{"name":"open override val name: String","description":"viaduct.engine.api.FromQueryFieldVariable.name","location":"engine/engine-api/viaduct.engine.api/-from-query-field-variable/name.html","searchKeys":["name","open override val name: String","viaduct.engine.api.FromQueryFieldVariable.name"]},{"name":"open override val requiredSelectionSet: RequiredSelectionSet","description":"viaduct.engine.api.FromFieldVariablesResolver.requiredSelectionSet","location":"engine/engine-api/viaduct.engine.api/-from-field-variables-resolver/required-selection-set.html","searchKeys":["requiredSelectionSet","open override val requiredSelectionSet: RequiredSelectionSet","viaduct.engine.api.FromFieldVariablesResolver.requiredSelectionSet"]},{"name":"open override val selections: SelectionSet","description":"viaduct.engine.api.select.ParsedSelectionsImpl.selections","location":"engine/engine-api/viaduct.engine.api.select/-parsed-selections-impl/selections.html","searchKeys":["selections","open override val selections: SelectionSet","viaduct.engine.api.select.ParsedSelectionsImpl.selections"]},{"name":"open override val typeName: String","description":"viaduct.engine.api.select.ParsedSelectionsImpl.typeName","location":"engine/engine-api/viaduct.engine.api.select/-parsed-selections-impl/type-name.html","searchKeys":["typeName","open override val typeName: String","viaduct.engine.api.select.ParsedSelectionsImpl.typeName"]},{"name":"open override val valueFromPath: String","description":"viaduct.engine.api.FromObjectFieldVariable.valueFromPath","location":"engine/engine-api/viaduct.engine.api/-from-object-field-variable/value-from-path.html","searchKeys":["valueFromPath","open override val valueFromPath: String","viaduct.engine.api.FromObjectFieldVariable.valueFromPath"]},{"name":"open override val valueFromPath: String","description":"viaduct.engine.api.FromQueryFieldVariable.valueFromPath","location":"engine/engine-api/viaduct.engine.api/-from-query-field-variable/value-from-path.html","searchKeys":["valueFromPath","open override val valueFromPath: String","viaduct.engine.api.FromQueryFieldVariable.valueFromPath"]},{"name":"open override val variableNames: Set<String>","description":"viaduct.engine.api.FromArgument.variableNames","location":"engine/engine-api/viaduct.engine.api/-from-argument/variable-names.html","searchKeys":["variableNames","open override val variableNames: Set<String>","viaduct.engine.api.FromArgument.variableNames"]},{"name":"open override val variableNames: Set<String>","description":"viaduct.engine.api.FromFieldVariablesResolver.variableNames","location":"engine/engine-api/viaduct.engine.api/-from-field-variables-resolver/variable-names.html","searchKeys":["variableNames","open override val variableNames: Set<String>","viaduct.engine.api.FromFieldVariablesResolver.variableNames"]},{"name":"open override val viaductErrorType: String?","description":"viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.viaductErrorType","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-engine-resolution-error/viaduct-error-type.html","searchKeys":["viaductErrorType","open override val viaductErrorType: String?","viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.viaductErrorType"]},{"name":"open override val viaductErrorType: String?","description":"viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.viaductErrorType","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-resolution-error/viaduct-error-type.html","searchKeys":["viaductErrorType","open override val viaductErrorType: String?","viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.viaductErrorType"]},{"name":"open suspend fun loadEngineObjectData(fragment: Fragment, metadata: DerivedFieldQueryMetadata, source: Any, dataFetchingEnvironment: DataFetchingEnvironment): Any","description":"viaduct.engine.api.FragmentLoader.loadEngineObjectData","location":"engine/engine-api/viaduct.engine.api/-fragment-loader/load-engine-object-data.html","searchKeys":["loadEngineObjectData","open suspend fun loadEngineObjectData(fragment: Fragment, metadata: DerivedFieldQueryMetadata, source: Any, dataFetchingEnvironment: DataFetchingEnvironment): Any","viaduct.engine.api.FragmentLoader.loadEngineObjectData"]},{"name":"open suspend override fun fetch(selection: String): Any?","description":"viaduct.engine.api.ResolvedEngineObjectData.fetch","location":"engine/engine-api/viaduct.engine.api/-resolved-engine-object-data/fetch.html","searchKeys":["fetch","open suspend override fun fetch(selection: String): Any?","viaduct.engine.api.ResolvedEngineObjectData.fetch"]},{"name":"open suspend override fun resolve(ctx: VariablesResolver.ResolveCtx): Map<String, Any?>","description":"viaduct.engine.api.FromArgument.resolve","location":"engine/engine-api/viaduct.engine.api/-from-argument/resolve.html","searchKeys":["resolve","open suspend override fun resolve(ctx: VariablesResolver.ResolveCtx): Map<String, Any?>","viaduct.engine.api.FromArgument.resolve"]},{"name":"open suspend override fun resolve(ctx: VariablesResolver.ResolveCtx): Map<String, Any?>","description":"viaduct.engine.api.FromFieldVariablesResolver.resolve","location":"engine/engine-api/viaduct.engine.api/-from-field-variables-resolver/resolve.html","searchKeys":["resolve","open suspend override fun resolve(ctx: VariablesResolver.ResolveCtx): Map<String, Any?>","viaduct.engine.api.FromFieldVariablesResolver.resolve"]},{"name":"open suspend override fun resolve(ctx: VariablesResolver.ResolveCtx): Map<String, Any?>","description":"viaduct.engine.api.Validated.resolve","location":"engine/engine-api/viaduct.engine.api/-validated/resolve.html","searchKeys":["resolve","open suspend override fun resolve(ctx: VariablesResolver.ResolveCtx): Map<String, Any?>","viaduct.engine.api.Validated.resolve"]},{"name":"open val default: Instrumentation","description":"viaduct.engine.api.instrumentation.IViaductInstrumentation.default","location":"engine/engine-api/viaduct.engine.api.instrumentation/-i-viaduct-instrumentation/default.html","searchKeys":["default","open val default: Instrumentation","viaduct.engine.api.instrumentation.IViaductInstrumentation.default"]},{"name":"open val requiredSelectionSet: RequiredSelectionSet?","description":"viaduct.engine.api.VariablesResolver.requiredSelectionSet","location":"engine/engine-api/viaduct.engine.api/-variables-resolver/required-selection-set.html","searchKeys":["requiredSelectionSet","open val requiredSelectionSet: RequiredSelectionSet?","viaduct.engine.api.VariablesResolver.requiredSelectionSet"]},{"name":"open val requiredSelectionSets: Map<String, RequiredSelectionSet?>","description":"viaduct.engine.api.CheckerExecutor.requiredSelectionSets","location":"engine/engine-api/viaduct.engine.api/-checker-executor/required-selection-sets.html","searchKeys":["requiredSelectionSets","open val requiredSelectionSets: Map<String, RequiredSelectionSet?>","viaduct.engine.api.CheckerExecutor.requiredSelectionSets"]},{"name":"operator fun invoke(name: String, alias: String? = null, arguments: Map<String, Any?> = emptyMap()): ObjectEngineResult.Key","description":"viaduct.engine.api.ObjectEngineResult.Key.Companion.invoke","location":"engine/engine-api/viaduct.engine.api/-object-engine-result/-key/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(name: String, alias: String? = null, arguments: Map<String, Any?> = emptyMap()): ObjectEngineResult.Key","viaduct.engine.api.ObjectEngineResult.Key.Companion.invoke"]},{"name":"sealed interface CheckerResult","description":"viaduct.engine.api.CheckerResult","location":"engine/engine-api/viaduct.engine.api/-checker-result/index.html","searchKeys":["CheckerResult","sealed interface CheckerResult","viaduct.engine.api.CheckerResult"]},{"name":"sealed interface FromFieldVariable","description":"viaduct.engine.api.FromFieldVariable","location":"engine/engine-api/viaduct.engine.api/-from-field-variable/index.html","searchKeys":["FromFieldVariable","sealed interface FromFieldVariable","viaduct.engine.api.FromFieldVariable"]},{"name":"sealed interface SelectionSetVariable","description":"viaduct.engine.api.SelectionSetVariable","location":"engine/engine-api/viaduct.engine.api/-selection-set-variable/index.html","searchKeys":["SelectionSetVariable","sealed interface SelectionSetVariable","viaduct.engine.api.SelectionSetVariable"]},{"name":"suspend fun List<VariablesResolver>.resolve(ctx: VariablesResolver.ResolveCtx): Map<String, Any?>","description":"viaduct.engine.api.resolve","location":"engine/engine-api/viaduct.engine.api/resolve.html","searchKeys":["resolve","suspend fun List<VariablesResolver>.resolve(ctx: VariablesResolver.ResolveCtx): Map<String, Any?>","viaduct.engine.api.resolve"]},{"name":"suspend fun read(data: EngineObjectData): Any?","description":"viaduct.engine.api.EngineDataReader.read","location":"engine/engine-api/viaduct.engine.api/-engine-data-reader/read.html","searchKeys":["read","suspend fun read(data: EngineObjectData): Any?","viaduct.engine.api.EngineDataReader.read"]},{"name":"typealias Coordinate = Pair<String, String>","description":"viaduct.engine.api.Coordinate","location":"engine/engine-api/viaduct.engine.api/-coordinate/index.html","searchKeys":["Coordinate","typealias Coordinate = Pair<String, String>","viaduct.engine.api.Coordinate"]},{"name":"val Coordinate.gj: FieldCoordinates","description":"viaduct.engine.api.gj","location":"engine/engine-api/viaduct.engine.api/gj.html","searchKeys":["gj","val Coordinate.gj: FieldCoordinates","viaduct.engine.api.gj"]},{"name":"val DEFAULT: ExecutionAttribution","description":"viaduct.engine.api.ExecutionAttribution.Companion.DEFAULT","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/-companion/-d-e-f-a-u-l-t.html","searchKeys":["DEFAULT","val DEFAULT: ExecutionAttribution","viaduct.engine.api.ExecutionAttribution.Companion.DEFAULT"]},{"name":"val EMPTY: FragmentVariables","description":"viaduct.engine.api.fragment.FragmentVariables.Companion.EMPTY","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variables/-companion/-e-m-p-t-y.html","searchKeys":["EMPTY","val EMPTY: FragmentVariables","viaduct.engine.api.fragment.FragmentVariables.Companion.EMPTY"]},{"name":"val EMPTY: ResolverErrorReporter.Companion.ErrorMetadata","description":"viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.Companion.EMPTY","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/-companion/-error-metadata/-companion/-e-m-p-t-y.html","searchKeys":["EMPTY","val EMPTY: ResolverErrorReporter.Companion.ErrorMetadata","viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.Companion.EMPTY"]},{"name":"val Empty: VariablesResolver","description":"viaduct.engine.api.VariablesResolver.Companion.Empty","location":"engine/engine-api/viaduct.engine.api/-variables-resolver/-companion/-empty.html","searchKeys":["Empty","val Empty: VariablesResolver","viaduct.engine.api.VariablesResolver.Companion.Empty"]},{"name":"val List<VariablesResolver>.variableNames: Set<String>","description":"viaduct.engine.api.variableNames","location":"engine/engine-api/viaduct.engine.api/variable-names.html","searchKeys":["variableNames","val List<VariablesResolver>.variableNames: Set<String>","viaduct.engine.api.variableNames"]},{"name":"val NoOpResolverErrorBuilder: ResolverErrorBuilder","description":"viaduct.engine.api.execution.ResolverErrorBuilder.Companion.NoOpResolverErrorBuilder","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-builder/-companion/-no-op-resolver-error-builder.html","searchKeys":["NoOpResolverErrorBuilder","val NoOpResolverErrorBuilder: ResolverErrorBuilder","viaduct.engine.api.execution.ResolverErrorBuilder.Companion.NoOpResolverErrorBuilder"]},{"name":"val NoOpResolverErrorReporter: ResolverErrorReporter","description":"viaduct.engine.api.execution.ResolverErrorReporter.Companion.NoOpResolverErrorReporter","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/-companion/-no-op-resolver-error-reporter.html","searchKeys":["NoOpResolverErrorReporter","val NoOpResolverErrorReporter: ResolverErrorReporter","viaduct.engine.api.execution.ResolverErrorReporter.Companion.NoOpResolverErrorReporter"]},{"name":"val alias: String? = null","description":"viaduct.engine.api.ObjectEngineResult.Key.alias","location":"engine/engine-api/viaduct.engine.api/-object-engine-result/-key/alias.html","searchKeys":["alias","val alias: String? = null","viaduct.engine.api.ObjectEngineResult.Key.alias"]},{"name":"val allowMutationOnQuery: Boolean","description":"viaduct.engine.api.derived.DerivedFieldQueryMetadata.allowMutationOnQuery","location":"engine/engine-api/viaduct.engine.api.derived/-derived-field-query-metadata/allow-mutation-on-query.html","searchKeys":["allowMutationOnQuery","val allowMutationOnQuery: Boolean","viaduct.engine.api.derived.DerivedFieldQueryMetadata.allowMutationOnQuery"]},{"name":"val arguments: Map<String, Any?>","description":"viaduct.engine.api.FieldResolverExecutor.Selector.arguments","location":"engine/engine-api/viaduct.engine.api/-field-resolver-executor/-selector/arguments.html","searchKeys":["arguments","val arguments: Map<String, Any?>","viaduct.engine.api.FieldResolverExecutor.Selector.arguments"]},{"name":"val arguments: Map<String, Any?>","description":"viaduct.engine.api.ObjectEngineResult.Key.arguments","location":"engine/engine-api/viaduct.engine.api/-object-engine-result/-key/arguments.html","searchKeys":["arguments","val arguments: Map<String, Any?>","viaduct.engine.api.ObjectEngineResult.Key.arguments"]},{"name":"val arguments: Map<String, Any?>","description":"viaduct.engine.api.VariablesResolver.ResolveCtx.arguments","location":"engine/engine-api/viaduct.engine.api/-variables-resolver/-resolve-ctx/arguments.html","searchKeys":["arguments","val arguments: Map<String, Any?>","viaduct.engine.api.VariablesResolver.ResolveCtx.arguments"]},{"name":"val attribution: ExecutionAttribution?","description":"viaduct.engine.api.RequiredSelectionSet.attribution","location":"engine/engine-api/viaduct.engine.api/-required-selection-set/attribution.html","searchKeys":["attribution","val attribution: ExecutionAttribution?","viaduct.engine.api.RequiredSelectionSet.attribution"]},{"name":"val attribution: ExecutionAttribution?","description":"viaduct.engine.api.observability.ExecutionObservabilityContext.attribution","location":"engine/engine-api/viaduct.engine.api.observability/-execution-observability-context/attribution.html","searchKeys":["attribution","val attribution: ExecutionAttribution?","viaduct.engine.api.observability.ExecutionObservabilityContext.attribution"]},{"name":"val classPath: String","description":"viaduct.engine.api.derived.DerivedFieldQueryMetadata.classPath","location":"engine/engine-api/viaduct.engine.api.derived/-derived-field-query-metadata/class-path.html","searchKeys":["classPath","val classPath: String","viaduct.engine.api.derived.DerivedFieldQueryMetadata.classPath"]},{"name":"val data: Map<String, Any?>","description":"viaduct.engine.api.ResolvedEngineObjectData.data","location":"engine/engine-api/viaduct.engine.api/-resolved-engine-object-data/data.html","searchKeys":["data","val data: Map<String, Any?>","viaduct.engine.api.ResolvedEngineObjectData.data"]},{"name":"val data: Map<String, Any?>","description":"viaduct.engine.api.fragment.FragmentFieldEngineResolutionResult.data","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-field-engine-resolution-result/data.html","searchKeys":["data","val data: Map<String, Any?>","viaduct.engine.api.fragment.FragmentFieldEngineResolutionResult.data"]},{"name":"val default: Instrumentation","description":"viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.Companion.default","location":"engine/engine-api/viaduct.engine.api.instrumentation/-viaduct-instrumentation-adapter/-companion/default.html","searchKeys":["default","val default: Instrumentation","viaduct.engine.api.instrumentation.ViaductInstrumentationAdapter.Companion.default"]},{"name":"val defaultParserOptions: ParserOptions","description":"viaduct.engine.api.parse.DocumentParser.defaultParserOptions","location":"engine/engine-api/viaduct.engine.api.parse/-document-parser/default-parser-options.html","searchKeys":["defaultParserOptions","val defaultParserOptions: ParserOptions","viaduct.engine.api.parse.DocumentParser.defaultParserOptions"]},{"name":"val definition: FragmentDefinition","description":"viaduct.engine.api.fragment.Fragment.definition","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment/definition.html","searchKeys":["definition","val definition: FragmentDefinition","viaduct.engine.api.fragment.Fragment.definition"]},{"name":"val delegate: VariablesResolver","description":"viaduct.engine.api.Validated.delegate","location":"engine/engine-api/viaduct.engine.api/-validated/delegate.html","searchKeys":["delegate","val delegate: VariablesResolver","viaduct.engine.api.Validated.delegate"]},{"name":"val dispatcher: CoroutineDispatcher","description":"viaduct.engine.api.context.DispatcherLocalContext.dispatcher","location":"engine/engine-api/viaduct.engine.api.context/-dispatcher-local-context/dispatcher.html","searchKeys":["dispatcher","val dispatcher: CoroutineDispatcher","viaduct.engine.api.context.DispatcherLocalContext.dispatcher"]},{"name":"val document: String","description":"viaduct.engine.api.fragment.Fragment.document","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment/document.html","searchKeys":["document","val document: String","viaduct.engine.api.fragment.Fragment.document"]},{"name":"val empty: Fragment","description":"viaduct.engine.api.fragment.Fragment.Companion.empty","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment/-companion/empty.html","searchKeys":["empty","val empty: Fragment","viaduct.engine.api.fragment.Fragment.Companion.empty"]},{"name":"val empty: FragmentFieldEngineResolutionResult","description":"viaduct.engine.api.fragment.FragmentFieldEngineResolutionResult.Companion.empty","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-field-engine-resolution-result/-companion/empty.html","searchKeys":["empty","val empty: FragmentFieldEngineResolutionResult","viaduct.engine.api.fragment.FragmentFieldEngineResolutionResult.Companion.empty"]},{"name":"val engineExecutionContext: EngineExecutionContext","description":"viaduct.engine.api.VariablesResolver.ResolveCtx.engineExecutionContext","location":"engine/engine-api/viaduct.engine.api/-variables-resolver/-resolve-ctx/engine-execution-context.html","searchKeys":["engineExecutionContext","val engineExecutionContext: EngineExecutionContext","viaduct.engine.api.VariablesResolver.ResolveCtx.engineExecutionContext"]},{"name":"val entries: EnumEntries<ExecutionAttribution.Type>","description":"viaduct.engine.api.ExecutionAttribution.Type.entries","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/-type/entries.html","searchKeys":["entries","val entries: EnumEntries<ExecutionAttribution.Type>","viaduct.engine.api.ExecutionAttribution.Type.entries"]},{"name":"val errorType: String?","description":"viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.errorType","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/-companion/-error-metadata/error-type.html","searchKeys":["errorType","val errorType: String?","viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.errorType"]},{"name":"val errors: List<Error>","description":"viaduct.engine.api.fragment.FragmentTraversalState.errors","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-traversal-state/errors.html","searchKeys":["errors","val errors: List<Error>","viaduct.engine.api.fragment.FragmentTraversalState.errors"]},{"name":"val errors: List<FragmentFieldEngineResolutionError>","description":"viaduct.engine.api.fragment.FragmentFieldEngineResolutionResult.errors","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-field-engine-resolution-result/errors.html","searchKeys":["errors","val errors: List<FragmentFieldEngineResolutionError>","viaduct.engine.api.fragment.FragmentFieldEngineResolutionResult.errors"]},{"name":"val field: Field","description":"viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.field","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-resolution-error/field.html","searchKeys":["field","val field: Field","viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.field"]},{"name":"val fieldName: String","description":"viaduct.engine.api.RawSelection.fieldName","location":"engine/engine-api/viaduct.engine.api/-raw-selection/field-name.html","searchKeys":["fieldName","val fieldName: String","viaduct.engine.api.RawSelection.fieldName"]},{"name":"val fieldName: String","description":"viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.fieldName","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-resolution-error/field-name.html","searchKeys":["fieldName","val fieldName: String","viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.fieldName"]},{"name":"val fieldName: String?","description":"viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.fieldName","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/-companion/-error-metadata/field-name.html","searchKeys":["fieldName","val fieldName: String?","viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.fieldName"]},{"name":"val fieldOwningTenant: String?","description":"viaduct.engine.api.derived.DerivedFieldQueryMetadata.fieldOwningTenant","location":"engine/engine-api/viaduct.engine.api.derived/-derived-field-query-metadata/field-owning-tenant.html","searchKeys":["fieldOwningTenant","val fieldOwningTenant: String?","viaduct.engine.api.derived.DerivedFieldQueryMetadata.fieldOwningTenant"]},{"name":"val fieldPath: ResultPath","description":"viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.fieldPath","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-resolution-error/field-path.html","searchKeys":["fieldPath","val fieldPath: ResultPath","viaduct.engine.api.fragment.errors.FragmentFieldResolutionError.fieldPath"]},{"name":"val fieldQueryDirectives: QueryDirectives? = null","description":"viaduct.engine.api.CheckerResultContext.fieldQueryDirectives","location":"engine/engine-api/viaduct.engine.api/-checker-result-context/field-query-directives.html","searchKeys":["fieldQueryDirectives","val fieldQueryDirectives: QueryDirectives? = null","viaduct.engine.api.CheckerResultContext.fieldQueryDirectives"]},{"name":"val forceEngineResolution: Boolean = false","description":"viaduct.engine.api.derived.DerivedFieldQueryMetadata.forceEngineResolution","location":"engine/engine-api/viaduct.engine.api.derived/-derived-field-query-metadata/force-engine-resolution.html","searchKeys":["forceEngineResolution","val forceEngineResolution: Boolean = false","viaduct.engine.api.derived.DerivedFieldQueryMetadata.forceEngineResolution"]},{"name":"val gjInstrumentations: List<ViaductModernGJInstrumentation>","description":"viaduct.engine.api.instrumentation.ChainedModernGJInstrumentation.gjInstrumentations","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-modern-g-j-instrumentation/gj-instrumentations.html","searchKeys":["gjInstrumentations","val gjInstrumentations: List<ViaductModernGJInstrumentation>","viaduct.engine.api.instrumentation.ChainedModernGJInstrumentation.gjInstrumentations"]},{"name":"val graphqlError: GraphQLError","description":"viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.graphqlError","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-engine-resolution-error/graphql-error.html","searchKeys":["graphqlError","val graphqlError: GraphQLError","viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.graphqlError"]},{"name":"val id: String","description":"viaduct.engine.api.NodeResolverExecutor.Selector.id","location":"engine/engine-api/viaduct.engine.api/-node-resolver-executor/-selector/id.html","searchKeys":["id","val id: String","viaduct.engine.api.NodeResolverExecutor.Selector.id"]},{"name":"val innerMap: MutableMap<String, FragmentVariable<*>>","description":"viaduct.engine.api.fragment.FragmentVariables.innerMap","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variables/inner-map.html","searchKeys":["innerMap","val innerMap: MutableMap<String, FragmentVariable<*>>","viaduct.engine.api.fragment.FragmentVariables.innerMap"]},{"name":"val instrumentations: List<Instrumentation>","description":"viaduct.engine.api.instrumentation.ChainedInstrumentation.instrumentations","location":"engine/engine-api/viaduct.engine.api.instrumentation/-chained-instrumentation/instrumentations.html","searchKeys":["instrumentations","val instrumentations: List<Instrumentation>","viaduct.engine.api.instrumentation.ChainedInstrumentation.instrumentations"]},{"name":"val isFrameworkError: Boolean?","description":"viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.isFrameworkError","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/-companion/-error-metadata/is-framework-error.html","searchKeys":["isFrameworkError","val isFrameworkError: Boolean?","viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.isFrameworkError"]},{"name":"val name: String","description":"viaduct.engine.api.FromArgument.name","location":"engine/engine-api/viaduct.engine.api/-from-argument/name.html","searchKeys":["name","val name: String","viaduct.engine.api.FromArgument.name"]},{"name":"val name: String","description":"viaduct.engine.api.FromFieldVariablesResolver.name","location":"engine/engine-api/viaduct.engine.api/-from-field-variables-resolver/name.html","searchKeys":["name","val name: String","viaduct.engine.api.FromFieldVariablesResolver.name"]},{"name":"val name: String","description":"viaduct.engine.api.ObjectEngineResult.Key.name","location":"engine/engine-api/viaduct.engine.api/-object-engine-result/-key/name.html","searchKeys":["name","val name: String","viaduct.engine.api.ObjectEngineResult.Key.name"]},{"name":"val name: String","description":"viaduct.engine.api.fragment.FragmentVariable.name","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variable/name.html","searchKeys":["name","val name: String","viaduct.engine.api.fragment.FragmentVariable.name"]},{"name":"val name: String?","description":"viaduct.engine.api.ExecutionAttribution.name","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/name.html","searchKeys":["name","val name: String?","viaduct.engine.api.ExecutionAttribution.name"]},{"name":"val objectData: EngineObjectData","description":"viaduct.engine.api.VariablesResolver.ResolveCtx.objectData","location":"engine/engine-api/viaduct.engine.api/-variables-resolver/-resolve-ctx/object-data.html","searchKeys":["objectData","val objectData: EngineObjectData","viaduct.engine.api.VariablesResolver.ResolveCtx.objectData"]},{"name":"val objectSelections: RequiredSelectionSet?","description":"viaduct.engine.api.RequiredSelectionSets.objectSelections","location":"engine/engine-api/viaduct.engine.api/-required-selection-sets/object-selections.html","searchKeys":["objectSelections","val objectSelections: RequiredSelectionSet?","viaduct.engine.api.RequiredSelectionSets.objectSelections"]},{"name":"val objectValue: EngineObjectData","description":"viaduct.engine.api.FieldResolverExecutor.Selector.objectValue","location":"engine/engine-api/viaduct.engine.api/-field-resolver-executor/-selector/object-value.html","searchKeys":["objectValue","val objectValue: EngineObjectData","viaduct.engine.api.FieldResolverExecutor.Selector.objectValue"]},{"name":"val onRootMutation: Boolean","description":"viaduct.engine.api.derived.DerivedFieldQueryMetadata.onRootMutation","location":"engine/engine-api/viaduct.engine.api.derived/-derived-field-query-metadata/on-root-mutation.html","searchKeys":["onRootMutation","val onRootMutation: Boolean","viaduct.engine.api.derived.DerivedFieldQueryMetadata.onRootMutation"]},{"name":"val onRootQuery: Boolean","description":"viaduct.engine.api.derived.DerivedFieldQueryMetadata.onRootQuery","location":"engine/engine-api/viaduct.engine.api.derived/-derived-field-query-metadata/on-root-query.html","searchKeys":["onRootQuery","val onRootQuery: Boolean","viaduct.engine.api.derived.DerivedFieldQueryMetadata.onRootQuery"]},{"name":"val operationName: String?","description":"viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.operationName","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/-companion/-error-metadata/operation-name.html","searchKeys":["operationName","val operationName: String?","viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.operationName"]},{"name":"val parentType: String?","description":"viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.parentType","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/-companion/-error-metadata/parent-type.html","searchKeys":["parentType","val parentType: String?","viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.parentType"]},{"name":"val parsedDocument: Document","description":"viaduct.engine.api.fragment.Fragment.parsedDocument","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment/parsed-document.html","searchKeys":["parsedDocument","val parsedDocument: Document","viaduct.engine.api.fragment.Fragment.parsedDocument"]},{"name":"val path: List<String>","description":"viaduct.engine.api.FromArgument.path","location":"engine/engine-api/viaduct.engine.api/-from-argument/path.html","searchKeys":["path","val path: List<String>","viaduct.engine.api.FromArgument.path"]},{"name":"val path: List<String>","description":"viaduct.engine.api.FromFieldVariablesResolver.path","location":"engine/engine-api/viaduct.engine.api/-from-field-variables-resolver/path.html","searchKeys":["path","val path: List<String>","viaduct.engine.api.FromFieldVariablesResolver.path"]},{"name":"val path: List<String>","description":"viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.path","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-engine-resolution-error/path.html","searchKeys":["path","val path: List<String>","viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.path"]},{"name":"val pathString: String","description":"viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.pathString","location":"engine/engine-api/viaduct.engine.api.fragment.errors/-fragment-field-engine-resolution-error/path-string.html","searchKeys":["pathString","val pathString: String","viaduct.engine.api.fragment.errors.FragmentFieldEngineResolutionError.pathString"]},{"name":"val providerShortClasspath: String","description":"viaduct.engine.api.derived.DerivedFieldQueryMetadata.providerShortClasspath","location":"engine/engine-api/viaduct.engine.api.derived/-derived-field-query-metadata/provider-short-classpath.html","searchKeys":["providerShortClasspath","val providerShortClasspath: String","viaduct.engine.api.derived.DerivedFieldQueryMetadata.providerShortClasspath"]},{"name":"val queryName: String","description":"viaduct.engine.api.derived.DerivedFieldQueryMetadata.queryName","location":"engine/engine-api/viaduct.engine.api.derived/-derived-field-query-metadata/query-name.html","searchKeys":["queryName","val queryName: String","viaduct.engine.api.derived.DerivedFieldQueryMetadata.queryName"]},{"name":"val querySelections: RequiredSelectionSet?","description":"viaduct.engine.api.RequiredSelectionSets.querySelections","location":"engine/engine-api/viaduct.engine.api/-required-selection-sets/query-selections.html","searchKeys":["querySelections","val querySelections: RequiredSelectionSet?","viaduct.engine.api.RequiredSelectionSets.querySelections"]},{"name":"val queryValue: EngineObjectData","description":"viaduct.engine.api.FieldResolverExecutor.Selector.queryValue","location":"engine/engine-api/viaduct.engine.api/-field-resolver-executor/-selector/query-value.html","searchKeys":["queryValue","val queryValue: EngineObjectData","viaduct.engine.api.FieldResolverExecutor.Selector.queryValue"]},{"name":"val rels: GraphQLTypeRelations","description":"viaduct.engine.api.ViaductSchema.rels","location":"engine/engine-api/viaduct.engine.api/-viaduct-schema/rels.html","searchKeys":["rels","val rels: GraphQLTypeRelations","viaduct.engine.api.ViaductSchema.rels"]},{"name":"val resolvers: List<String>?","description":"viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.resolvers","location":"engine/engine-api/viaduct.engine.api.execution/-resolver-error-reporter/-companion/-error-metadata/resolvers.html","searchKeys":["resolvers","val resolvers: List<String>?","viaduct.engine.api.execution.ResolverErrorReporter.Companion.ErrorMetadata.resolvers"]},{"name":"val rootFieldName: String","description":"viaduct.engine.api.derived.DerivedFieldQueryMetadata.rootFieldName","location":"engine/engine-api/viaduct.engine.api.derived/-derived-field-query-metadata/root-field-name.html","searchKeys":["rootFieldName","val rootFieldName: String","viaduct.engine.api.derived.DerivedFieldQueryMetadata.rootFieldName"]},{"name":"val schema: GraphQLSchema","description":"viaduct.engine.api.ViaductSchema.schema","location":"engine/engine-api/viaduct.engine.api/-viaduct-schema/schema.html","searchKeys":["schema","val schema: GraphQLSchema","viaduct.engine.api.ViaductSchema.schema"]},{"name":"val selectionName: String","description":"viaduct.engine.api.RawSelection.selectionName","location":"engine/engine-api/viaduct.engine.api/-raw-selection/selection-name.html","searchKeys":["selectionName","val selectionName: String","viaduct.engine.api.RawSelection.selectionName"]},{"name":"val selections: ParsedSelections","description":"viaduct.engine.api.RequiredSelectionSet.selections","location":"engine/engine-api/viaduct.engine.api/-required-selection-set/selections.html","searchKeys":["selections","val selections: ParsedSelections","viaduct.engine.api.RequiredSelectionSet.selections"]},{"name":"val selections: ParsedSelections","description":"viaduct.engine.api.VariableCycleException.selections","location":"engine/engine-api/viaduct.engine.api/-variable-cycle-exception/selections.html","searchKeys":["selections","val selections: ParsedSelections","viaduct.engine.api.VariableCycleException.selections"]},{"name":"val selections: RawSelectionSet","description":"viaduct.engine.api.NodeResolverExecutor.Selector.selections","location":"engine/engine-api/viaduct.engine.api/-node-resolver-executor/-selector/selections.html","searchKeys":["selections","val selections: RawSelectionSet","viaduct.engine.api.NodeResolverExecutor.Selector.selections"]},{"name":"val selections: RawSelectionSet?","description":"viaduct.engine.api.FieldResolverExecutor.Selector.selections","location":"engine/engine-api/viaduct.engine.api/-field-resolver-executor/-selector/selections.html","searchKeys":["selections","val selections: RawSelectionSet?","viaduct.engine.api.FieldResolverExecutor.Selector.selections"]},{"name":"val type: ExecutionAttribution.Type?","description":"viaduct.engine.api.ExecutionAttribution.type","location":"engine/engine-api/viaduct.engine.api/-execution-attribution/type.html","searchKeys":["type","val type: ExecutionAttribution.Type?","viaduct.engine.api.ExecutionAttribution.type"]},{"name":"val typeCondition: String","description":"viaduct.engine.api.RawSelection.typeCondition","location":"engine/engine-api/viaduct.engine.api/-raw-selection/type-condition.html","searchKeys":["typeCondition","val typeCondition: String","viaduct.engine.api.RawSelection.typeCondition"]},{"name":"val value: T","description":"viaduct.engine.api.fragment.FragmentVariable.value","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment-variable/value.html","searchKeys":["value","val value: T","viaduct.engine.api.fragment.FragmentVariable.value"]},{"name":"val valueFromPath: String","description":"viaduct.engine.api.FromArgumentVariable.valueFromPath","location":"engine/engine-api/viaduct.engine.api/-from-argument-variable/value-from-path.html","searchKeys":["valueFromPath","val valueFromPath: String","viaduct.engine.api.FromArgumentVariable.valueFromPath"]},{"name":"val varName: String","description":"viaduct.engine.api.VariableCycleException.varName","location":"engine/engine-api/viaduct.engine.api/-variable-cycle-exception/var-name.html","searchKeys":["varName","val varName: String","viaduct.engine.api.VariableCycleException.varName"]},{"name":"val variables: FragmentVariables","description":"viaduct.engine.api.fragment.Fragment.variables","location":"engine/engine-api/viaduct.engine.api.fragment/-fragment/variables.html","searchKeys":["variables","val variables: FragmentVariables","viaduct.engine.api.fragment.Fragment.variables"]},{"name":"val variablesResolvers: List<VariablesResolver>","description":"viaduct.engine.api.RequiredSelectionSet.variablesResolvers","location":"engine/engine-api/viaduct.engine.api/-required-selection-set/variables-resolvers.html","searchKeys":["variablesResolvers","val variablesResolvers: List<VariablesResolver>","viaduct.engine.api.RequiredSelectionSet.variablesResolvers"]},{"name":"abstract class Builder","description":"viaduct.api.internal.InputLikeBase.Builder","location":"tenant/tenant-api/viaduct.api.internal/-input-like-base/-builder/index.html","searchKeys":["Builder","abstract class Builder","viaduct.api.internal.InputLikeBase.Builder"]},{"name":"abstract class Builder<T>(context: InternalContext, graphQLObjectType: GraphQLObjectType) : DynamicOutputValueBuilder<T> ","description":"viaduct.api.internal.ObjectBase.Builder","location":"tenant/tenant-api/viaduct.api.internal/-object-base/-builder/index.html","searchKeys":["Builder","abstract class Builder<T>(context: InternalContext, graphQLObjectType: GraphQLObjectType) : DynamicOutputValueBuilder<T> ","viaduct.api.internal.ObjectBase.Builder"]},{"name":"abstract class InputLikeBase : InputLike","description":"viaduct.api.internal.InputLikeBase","location":"tenant/tenant-api/viaduct.api.internal/-input-like-base/index.html","searchKeys":["InputLikeBase","abstract class InputLikeBase : InputLike","viaduct.api.internal.InputLikeBase"]},{"name":"abstract class ObjectBase(context: InternalContext, val engineObjectData: EngineObjectData) : Object","description":"viaduct.api.internal.ObjectBase","location":"tenant/tenant-api/viaduct.api.internal/-object-base/index.html","searchKeys":["ObjectBase","abstract class ObjectBase(context: InternalContext, val engineObjectData: EngineObjectData) : Object","viaduct.api.internal.ObjectBase"]},{"name":"abstract fun <T : CompositeOutput> selectionsFor(type: Type<T>, selections: String, variables: Map<String, Any?> = emptyMap()): SelectionSet<T>","description":"viaduct.api.context.ResolverExecutionContext.selectionsFor","location":"tenant/tenant-api/viaduct.api.context/-resolver-execution-context/selections-for.html","searchKeys":["selectionsFor","abstract fun <T : CompositeOutput> selectionsFor(type: Type<T>, selections: String, variables: Map<String, Any?> = emptyMap()): SelectionSet<T>","viaduct.api.context.ResolverExecutionContext.selectionsFor"]},{"name":"abstract fun <T : CompositeOutput> selectionsOn(type: Type<T>, selections: String, variables: Map<String, Any?> = mapOf()): SelectionSet<T>","description":"viaduct.api.internal.select.SelectionSetFactory.selectionsOn","location":"tenant/tenant-api/viaduct.api.internal.select/-selection-set-factory/selections-on.html","searchKeys":["selectionsOn","abstract fun <T : CompositeOutput> selectionsOn(type: Type<T>, selections: String, variables: Map<String, Any?> = mapOf()): SelectionSet<T>","viaduct.api.internal.select.SelectionSetFactory.selectionsOn"]},{"name":"abstract fun <T : NodeCompositeOutput> deserialize(str: String): GlobalID<T>","description":"viaduct.api.globalid.GlobalIDCodec.deserialize","location":"tenant/tenant-api/viaduct.api.globalid/-global-i-d-codec/deserialize.html","searchKeys":["deserialize","abstract fun <T : NodeCompositeOutput> deserialize(str: String): GlobalID<T>","viaduct.api.globalid.GlobalIDCodec.deserialize"]},{"name":"abstract fun <T : NodeCompositeOutput> serialize(id: GlobalID<T>): String","description":"viaduct.api.globalid.GlobalIDCodec.serialize","location":"tenant/tenant-api/viaduct.api.globalid/-global-i-d-codec/serialize.html","searchKeys":["serialize","abstract fun <T : NodeCompositeOutput> serialize(id: GlobalID<T>): String","viaduct.api.globalid.GlobalIDCodec.serialize"]},{"name":"abstract fun <T : NodeObject> globalIDFor(type: Type<T>, internalID: String): GlobalID<T>","description":"viaduct.api.context.ExecutionContext.globalIDFor","location":"tenant/tenant-api/viaduct.api.context/-execution-context/global-i-d-for.html","searchKeys":["globalIDFor","abstract fun <T : NodeObject> globalIDFor(type: Type<T>, internalID: String): GlobalID<T>","viaduct.api.context.ExecutionContext.globalIDFor"]},{"name":"abstract fun <T : NodeObject> globalIDStringFor(type: Type<T>, internalID: String): String","description":"viaduct.api.context.ResolverExecutionContext.globalIDStringFor","location":"tenant/tenant-api/viaduct.api.context/-resolver-execution-context/global-i-d-string-for.html","searchKeys":["globalIDStringFor","abstract fun <T : NodeObject> globalIDStringFor(type: Type<T>, internalID: String): String","viaduct.api.context.ResolverExecutionContext.globalIDStringFor"]},{"name":"abstract fun <T : NodeObject> nodeFor(id: GlobalID<T>): T","description":"viaduct.api.context.ResolverExecutionContext.nodeFor","location":"tenant/tenant-api/viaduct.api.context/-resolver-execution-context/node-for.html","searchKeys":["nodeFor","abstract fun <T : NodeObject> nodeFor(id: GlobalID<T>): T","viaduct.api.context.ResolverExecutionContext.nodeFor"]},{"name":"abstract fun <T : NodeObject> nodeFor(id: GlobalID<T>, internalContext: InternalContext): T","description":"viaduct.api.internal.NodeReferenceFactory.nodeFor","location":"tenant/tenant-api/viaduct.api.internal/-node-reference-factory/node-for.html","searchKeys":["nodeFor","abstract fun <T : NodeObject> nodeFor(id: GlobalID<T>, internalContext: InternalContext): T","viaduct.api.internal.NodeReferenceFactory.nodeFor"]},{"name":"abstract fun <T> getProvider(clazz: Class<T>): Provider<T>","description":"viaduct.api.TenantCodeInjector.getProvider","location":"tenant/tenant-api/viaduct.api/-tenant-code-injector/get-provider.html","searchKeys":["getProvider","abstract fun <T> getProvider(clazz: Class<T>): Provider<T>","viaduct.api.TenantCodeInjector.getProvider"]},{"name":"abstract fun <U : T, R : CompositeOutput> selectionSetFor(field: CompositeField<U, R>): SelectionSet<R>","description":"viaduct.api.select.SelectionSet.selectionSetFor","location":"tenant/tenant-api/viaduct.api.select/-selection-set/selection-set-for.html","searchKeys":["selectionSetFor","abstract fun <U : T, R : CompositeOutput> selectionSetFor(field: CompositeField<U, R>): SelectionSet<R>","viaduct.api.select.SelectionSet.selectionSetFor"]},{"name":"abstract fun <U : T> contains(field: Field<U>): Boolean","description":"viaduct.api.select.SelectionSet.contains","location":"tenant/tenant-api/viaduct.api.select/-selection-set/contains.html","searchKeys":["contains","abstract fun <U : T> contains(field: Field<U>): Boolean","viaduct.api.select.SelectionSet.contains"]},{"name":"abstract fun <U : T> requestsType(type: Type<U>): Boolean","description":"viaduct.api.select.SelectionSet.requestsType","location":"tenant/tenant-api/viaduct.api.select/-selection-set/requests-type.html","searchKeys":["requestsType","abstract fun <U : T> requestsType(type: Type<U>): Boolean","viaduct.api.select.SelectionSet.requestsType"]},{"name":"abstract fun <U : T> selectionSetFor(type: Type<U>): SelectionSet<U>","description":"viaduct.api.select.SelectionSet.selectionSetFor","location":"tenant/tenant-api/viaduct.api.select/-selection-set/selection-set-for.html","searchKeys":["selectionSetFor","abstract fun <U : T> selectionSetFor(type: Type<U>): SelectionSet<U>","viaduct.api.select.SelectionSet.selectionSetFor"]},{"name":"abstract fun <V : Object> convert(from: D?, graphqlObjectType: GraphQLObjectType): V?","description":"viaduct.api.ValueMapper.convert","location":"tenant/tenant-api/viaduct.api/-value-mapper/convert.html","searchKeys":["convert","abstract fun <V : Object> convert(from: D?, graphqlObjectType: GraphQLObjectType): V?","viaduct.api.ValueMapper.convert"]},{"name":"abstract fun build(): T","description":"viaduct.api.DynamicOutputValueBuilder.build","location":"tenant/tenant-api/viaduct.api/-dynamic-output-value-builder/build.html","searchKeys":["build","abstract fun build(): T","viaduct.api.DynamicOutputValueBuilder.build"]},{"name":"abstract fun forMutation(resolverId: String): SelectionsLoader<Mutation>","description":"viaduct.api.internal.select.SelectionsLoader.Factory.forMutation","location":"tenant/tenant-api/viaduct.api.internal.select/-selections-loader/-factory/for-mutation.html","searchKeys":["forMutation","abstract fun forMutation(resolverId: String): SelectionsLoader<Mutation>","viaduct.api.internal.select.SelectionsLoader.Factory.forMutation"]},{"name":"abstract fun forQuery(resolverId: String): SelectionsLoader<Query>","description":"viaduct.api.internal.select.SelectionsLoader.Factory.forQuery","location":"tenant/tenant-api/viaduct.api.internal.select/-selections-loader/-factory/for-query.html","searchKeys":["forQuery","abstract fun forQuery(resolverId: String): SelectionsLoader<Query>","viaduct.api.internal.select.SelectionsLoader.Factory.forQuery"]},{"name":"abstract fun get(): T","description":"viaduct.api.FieldValue.get","location":"tenant/tenant-api/viaduct.api/-field-value/get.html","searchKeys":["get","abstract fun get(): T","viaduct.api.FieldValue.get"]},{"name":"abstract fun isEmpty(): Boolean","description":"viaduct.api.select.SelectionSet.isEmpty","location":"tenant/tenant-api/viaduct.api.select/-selection-set/is-empty.html","searchKeys":["isEmpty","abstract fun isEmpty(): Boolean","viaduct.api.select.SelectionSet.isEmpty"]},{"name":"abstract fun put(name: String, value: Any?): DynamicOutputValueBuilder<T>","description":"viaduct.api.DynamicOutputValueBuilder.put","location":"tenant/tenant-api/viaduct.api/-dynamic-output-value-builder/put.html","searchKeys":["put","abstract fun put(name: String, value: Any?): DynamicOutputValueBuilder<T>","viaduct.api.DynamicOutputValueBuilder.put"]},{"name":"abstract fun reflectionFor(name: String): Type<*>","description":"viaduct.api.internal.ReflectionLoader.reflectionFor","location":"tenant/tenant-api/viaduct.api.internal/-reflection-loader/reflection-for.html","searchKeys":["reflectionFor","abstract fun reflectionFor(name: String): Type<*>","viaduct.api.internal.ReflectionLoader.reflectionFor"]},{"name":"abstract fun selections(): SelectionSet<O>","description":"viaduct.api.context.FieldExecutionContext.selections","location":"tenant/tenant-api/viaduct.api.context/-field-execution-context/selections.html","searchKeys":["selections","abstract fun selections(): SelectionSet<O>","viaduct.api.context.FieldExecutionContext.selections"]},{"name":"abstract fun selections(): SelectionSet<T>","description":"viaduct.api.context.NodeExecutionContext.selections","location":"tenant/tenant-api/viaduct.api.context/-node-execution-context/selections.html","searchKeys":["selections","abstract fun selections(): SelectionSet<T>","viaduct.api.context.NodeExecutionContext.selections"]},{"name":"abstract suspend fun <T : Mutation> mutation(selections: SelectionSet<T>): T","description":"viaduct.api.context.MutationFieldExecutionContext.mutation","location":"tenant/tenant-api/viaduct.api.context/-mutation-field-execution-context/mutation.html","searchKeys":["mutation","abstract suspend fun <T : Mutation> mutation(selections: SelectionSet<T>): T","viaduct.api.context.MutationFieldExecutionContext.mutation"]},{"name":"abstract suspend fun <T : Query> query(selections: SelectionSet<T>): T","description":"viaduct.api.context.ResolverExecutionContext.query","location":"tenant/tenant-api/viaduct.api.context/-resolver-execution-context/query.html","searchKeys":["query","abstract suspend fun <T : Query> query(selections: SelectionSet<T>): T","viaduct.api.context.ResolverExecutionContext.query"]},{"name":"abstract suspend fun <U : T> load(ctx: ExecutionContext, selections: SelectionSet<U>): U","description":"viaduct.api.internal.select.SelectionsLoader.load","location":"tenant/tenant-api/viaduct.api.internal.select/-selections-loader/load.html","searchKeys":["load","abstract suspend fun <U : T> load(ctx: ExecutionContext, selections: SelectionSet<U>): U","viaduct.api.internal.select.SelectionsLoader.load"]},{"name":"abstract suspend fun provide(context: VariablesProviderContext<T>): Map<String, Any?>","description":"viaduct.api.VariablesProvider.provide","location":"tenant/tenant-api/viaduct.api/-variables-provider/provide.html","searchKeys":["provide","abstract suspend fun provide(context: VariablesProviderContext<T>): Map<String, Any?>","viaduct.api.VariablesProvider.provide"]},{"name":"abstract val args: T","description":"viaduct.api.context.VariablesProviderContext.args","location":"tenant/tenant-api/viaduct.api.context/-variables-provider-context/args.html","searchKeys":["args","abstract val args: T","viaduct.api.context.VariablesProviderContext.args"]},{"name":"abstract val arguments: A","description":"viaduct.api.context.FieldExecutionContext.arguments","location":"tenant/tenant-api/viaduct.api.context/-field-execution-context/arguments.html","searchKeys":["arguments","abstract val arguments: A","viaduct.api.context.FieldExecutionContext.arguments"]},{"name":"abstract val containingType: Type<Parent>","description":"viaduct.api.reflect.Field.containingType","location":"tenant/tenant-api/viaduct.api.reflect/-field/containing-type.html","searchKeys":["containingType","abstract val containingType: Type<Parent>","viaduct.api.reflect.Field.containingType"]},{"name":"abstract val globalIDCodec: GlobalIDCodec","description":"viaduct.api.internal.InternalContext.globalIDCodec","location":"tenant/tenant-api/viaduct.api.internal/-internal-context/global-i-d-codec.html","searchKeys":["globalIDCodec","abstract val globalIDCodec: GlobalIDCodec","viaduct.api.internal.InternalContext.globalIDCodec"]},{"name":"abstract val id: GlobalID<T>","description":"viaduct.api.context.NodeExecutionContext.id","location":"tenant/tenant-api/viaduct.api.context/-node-execution-context/id.html","searchKeys":["id","abstract val id: GlobalID<T>","viaduct.api.context.NodeExecutionContext.id"]},{"name":"abstract val inputData: Map<String, Any?>","description":"viaduct.api.internal.InputLikeBase.inputData","location":"tenant/tenant-api/viaduct.api.internal/-input-like-base/input-data.html","searchKeys":["inputData","abstract val inputData: Map<String, Any?>","viaduct.api.internal.InputLikeBase.inputData"]},{"name":"abstract val internalID: String","description":"viaduct.api.globalid.GlobalID.internalID","location":"tenant/tenant-api/viaduct.api.globalid/-global-i-d/internal-i-d.html","searchKeys":["internalID","abstract val internalID: String","viaduct.api.globalid.GlobalID.internalID"]},{"name":"abstract val isError: Boolean","description":"viaduct.api.FieldValue.isError","location":"tenant/tenant-api/viaduct.api/-field-value/is-error.html","searchKeys":["isError","abstract val isError: Boolean","viaduct.api.FieldValue.isError"]},{"name":"abstract val kcls: KClass<out T>","description":"viaduct.api.reflect.Type.kcls","location":"tenant/tenant-api/viaduct.api.reflect/-type/kcls.html","searchKeys":["kcls","abstract val kcls: KClass<out T>","viaduct.api.reflect.Type.kcls"]},{"name":"abstract val metadata: Map<String, String>","description":"viaduct.api.TenantModule.metadata","location":"tenant/tenant-api/viaduct.api/-tenant-module/metadata.html","searchKeys":["metadata","abstract val metadata: Map<String, String>","viaduct.api.TenantModule.metadata"]},{"name":"abstract val name: String","description":"viaduct.api.reflect.Field.name","location":"tenant/tenant-api/viaduct.api.reflect/-field/name.html","searchKeys":["name","abstract val name: String","viaduct.api.reflect.Field.name"]},{"name":"abstract val name: String","description":"viaduct.api.reflect.Type.name","location":"tenant/tenant-api/viaduct.api.reflect/-type/name.html","searchKeys":["name","abstract val name: String","viaduct.api.reflect.Type.name"]},{"name":"abstract val objectValue: T","description":"viaduct.api.context.FieldExecutionContext.objectValue","location":"tenant/tenant-api/viaduct.api.context/-field-execution-context/object-value.html","searchKeys":["objectValue","abstract val objectValue: T","viaduct.api.context.FieldExecutionContext.objectValue"]},{"name":"abstract val queryValue: Q","description":"viaduct.api.context.FieldExecutionContext.queryValue","location":"tenant/tenant-api/viaduct.api.context/-field-execution-context/query-value.html","searchKeys":["queryValue","abstract val queryValue: Q","viaduct.api.context.FieldExecutionContext.queryValue"]},{"name":"abstract val reflectionLoader: ReflectionLoader","description":"viaduct.api.internal.InternalContext.reflectionLoader","location":"tenant/tenant-api/viaduct.api.internal/-internal-context/reflection-loader.html","searchKeys":["reflectionLoader","abstract val reflectionLoader: ReflectionLoader","viaduct.api.internal.InternalContext.reflectionLoader"]},{"name":"abstract val schema: ViaductSchema","description":"viaduct.api.internal.InternalContext.schema","location":"tenant/tenant-api/viaduct.api.internal/-internal-context/schema.html","searchKeys":["schema","abstract val schema: ViaductSchema","viaduct.api.internal.InternalContext.schema"]},{"name":"abstract val type: Type<T>","description":"viaduct.api.globalid.GlobalID.type","location":"tenant/tenant-api/viaduct.api.globalid/-global-i-d/type.html","searchKeys":["type","abstract val type: Type<T>","viaduct.api.globalid.GlobalID.type"]},{"name":"abstract val type: Type<T>","description":"viaduct.api.select.SelectionSet.type","location":"tenant/tenant-api/viaduct.api.select/-selection-set/type.html","searchKeys":["type","abstract val type: Type<T>","viaduct.api.select.SelectionSet.type"]},{"name":"abstract val type: Type<UnwrappedType>","description":"viaduct.api.reflect.CompositeField.type","location":"tenant/tenant-api/viaduct.api.reflect/-composite-field/type.html","searchKeys":["type","abstract val type: Type<UnwrappedType>","viaduct.api.reflect.CompositeField.type"]},{"name":"annotation class NodeResolverFor(val typeName: String)","description":"viaduct.api.internal.NodeResolverFor","location":"tenant/tenant-api/viaduct.api.internal/-node-resolver-for/index.html","searchKeys":["NodeResolverFor","annotation class NodeResolverFor(val typeName: String)","viaduct.api.internal.NodeResolverFor"]},{"name":"annotation class Resolver(val objectValueFragment: String = \"\", val queryValueFragment: String = \"\", val variables: Array<Variable> = [])","description":"viaduct.api.Resolver","location":"tenant/tenant-api/viaduct.api/-resolver/index.html","searchKeys":["Resolver","annotation class Resolver(val objectValueFragment: String = \"\", val queryValueFragment: String = \"\", val variables: Array<Variable> = [])","viaduct.api.Resolver"]},{"name":"annotation class ResolverFor(val typeName: String, val fieldName: String)","description":"viaduct.api.internal.ResolverFor","location":"tenant/tenant-api/viaduct.api.internal/-resolver-for/index.html","searchKeys":["ResolverFor","annotation class ResolverFor(val typeName: String, val fieldName: String)","viaduct.api.internal.ResolverFor"]},{"name":"annotation class Selections","description":"viaduct.api.select.Selections","location":"tenant/tenant-api/viaduct.api.select/-selections/index.html","searchKeys":["Selections","annotation class Selections","viaduct.api.select.Selections"]},{"name":"annotation class Variable(val name: String, val fromObjectField: String = UNSET_STRING_VALUE, val fromQueryField: String = UNSET_STRING_VALUE, val fromArgument: String = UNSET_STRING_VALUE)","description":"viaduct.api.Variable","location":"tenant/tenant-api/viaduct.api/-variable/index.html","searchKeys":["Variable","annotation class Variable(val name: String, val fromObjectField: String = UNSET_STRING_VALUE, val fromQueryField: String = UNSET_STRING_VALUE, val fromArgument: String = UNSET_STRING_VALUE)","viaduct.api.Variable"]},{"name":"annotation class Variables(val types: String)","description":"viaduct.api.Variables","location":"tenant/tenant-api/viaduct.api/-variables/index.html","searchKeys":["Variables","annotation class Variables(val types: String)","viaduct.api.Variables"]},{"name":"class CompositeFieldImpl<Parent : GRT, UnwrappedType : GRT>(val name: String, val containingType: Type<Parent>, val type: Type<UnwrappedType>) : CompositeField<Parent, UnwrappedType> ","description":"viaduct.api.internal.CompositeFieldImpl","location":"tenant/tenant-api/viaduct.api.internal/-composite-field-impl/index.html","searchKeys":["CompositeFieldImpl","class CompositeFieldImpl<Parent : GRT, UnwrappedType : GRT>(val name: String, val containingType: Type<Parent>, val type: Type<UnwrappedType>) : CompositeField<Parent, UnwrappedType> ","viaduct.api.internal.CompositeFieldImpl"]},{"name":"class FieldImpl<Parent : GRT>(val name: String, val containingType: Type<Parent>) : Field<Parent> ","description":"viaduct.api.internal.FieldImpl","location":"tenant/tenant-api/viaduct.api.internal/-field-impl/index.html","searchKeys":["FieldImpl","class FieldImpl<Parent : GRT>(val name: String, val containingType: Type<Parent>) : Field<Parent> ","viaduct.api.internal.FieldImpl"]},{"name":"class MissingReflection(val name: String, val reason: String, cause: Throwable? = null) : Exception","description":"viaduct.api.internal.MissingReflection","location":"tenant/tenant-api/viaduct.api.internal/-missing-reflection/index.html","searchKeys":["MissingReflection","class MissingReflection(val name: String, val reason: String, cause: Throwable? = null) : Exception","viaduct.api.internal.MissingReflection"]},{"name":"class ValueMapperException(message: String) : Exception","description":"viaduct.api.exception.ValueMapperException","location":"tenant/tenant-api/viaduct.api.exception/-value-mapper-exception/index.html","searchKeys":["ValueMapperException","class ValueMapperException(message: String) : Exception","viaduct.api.exception.ValueMapperException"]},{"name":"class ViaductFrameworkException : Exception","description":"viaduct.api.ViaductFrameworkException","location":"tenant/tenant-api/viaduct.api/-viaduct-framework-exception/index.html","searchKeys":["ViaductFrameworkException","class ViaductFrameworkException : Exception","viaduct.api.ViaductFrameworkException"]},{"name":"class ViaductObjectBuilder<T : Object> : DynamicOutputValueBuilder<T> ","description":"viaduct.api.internal.ViaductObjectBuilder","location":"tenant/tenant-api/viaduct.api.internal/-viaduct-object-builder/index.html","searchKeys":["ViaductObjectBuilder","class ViaductObjectBuilder<T : Object> : DynamicOutputValueBuilder<T> ","viaduct.api.internal.ViaductObjectBuilder"]},{"name":"class ViaductTenantResolverException(val cause: Throwable, val resolver: String) : Exception, ViaductTenantException","description":"viaduct.api.ViaductTenantResolverException","location":"tenant/tenant-api/viaduct.api/-viaduct-tenant-resolver-exception/index.html","searchKeys":["ViaductTenantResolverException","class ViaductTenantResolverException(val cause: Throwable, val resolver: String) : Exception, ViaductTenantException","viaduct.api.ViaductTenantResolverException"]},{"name":"class ViaductTenantUsageException(message: String, cause: Throwable? = null) : Exception, ViaductTenantException","description":"viaduct.api.ViaductTenantUsageException","location":"tenant/tenant-api/viaduct.api/-viaduct-tenant-usage-exception/index.html","searchKeys":["ViaductTenantUsageException","class ViaductTenantUsageException(message: String, cause: Throwable? = null) : Exception, ViaductTenantException","viaduct.api.ViaductTenantUsageException"]},{"name":"const val UNSET_STRING_VALUE: String","description":"viaduct.api.Variable.Companion.UNSET_STRING_VALUE","location":"tenant/tenant-api/viaduct.api/-variable/-companion/-u-n-s-e-t_-s-t-r-i-n-g_-v-a-l-u-e.html","searchKeys":["UNSET_STRING_VALUE","const val UNSET_STRING_VALUE: String","viaduct.api.Variable.Companion.UNSET_STRING_VALUE"]},{"name":"constructor()","description":"viaduct.api.internal.InputLikeBase.Builder.Builder","location":"tenant/tenant-api/viaduct.api.internal/-input-like-base/-builder/-builder.html","searchKeys":["Builder","constructor()","viaduct.api.internal.InputLikeBase.Builder.Builder"]},{"name":"constructor()","description":"viaduct.api.internal.InputLikeBase.InputLikeBase","location":"tenant/tenant-api/viaduct.api.internal/-input-like-base/-input-like-base.html","searchKeys":["InputLikeBase","constructor()","viaduct.api.internal.InputLikeBase.InputLikeBase"]},{"name":"constructor(cause: Throwable, resolver: String)","description":"viaduct.api.ViaductTenantResolverException.ViaductTenantResolverException","location":"tenant/tenant-api/viaduct.api/-viaduct-tenant-resolver-exception/-viaduct-tenant-resolver-exception.html","searchKeys":["ViaductTenantResolverException","constructor(cause: Throwable, resolver: String)","viaduct.api.ViaductTenantResolverException.ViaductTenantResolverException"]},{"name":"constructor(context: InternalContext, engineObjectData: EngineObjectData)","description":"viaduct.api.internal.ObjectBase.ObjectBase","location":"tenant/tenant-api/viaduct.api.internal/-object-base/-object-base.html","searchKeys":["ObjectBase","constructor(context: InternalContext, engineObjectData: EngineObjectData)","viaduct.api.internal.ObjectBase.ObjectBase"]},{"name":"constructor(context: InternalContext, graphQLObjectType: GraphQLObjectType)","description":"viaduct.api.internal.ObjectBase.Builder.Builder","location":"tenant/tenant-api/viaduct.api.internal/-object-base/-builder/-builder.html","searchKeys":["Builder","constructor(context: InternalContext, graphQLObjectType: GraphQLObjectType)","viaduct.api.internal.ObjectBase.Builder.Builder"]},{"name":"constructor(message: String)","description":"viaduct.api.exception.ValueMapperException.ValueMapperException","location":"tenant/tenant-api/viaduct.api.exception/-value-mapper-exception/-value-mapper-exception.html","searchKeys":["ValueMapperException","constructor(message: String)","viaduct.api.exception.ValueMapperException.ValueMapperException"]},{"name":"constructor(message: String, cause: Throwable? = null)","description":"viaduct.api.ViaductTenantUsageException.ViaductTenantUsageException","location":"tenant/tenant-api/viaduct.api/-viaduct-tenant-usage-exception/-viaduct-tenant-usage-exception.html","searchKeys":["ViaductTenantUsageException","constructor(message: String, cause: Throwable? = null)","viaduct.api.ViaductTenantUsageException.ViaductTenantUsageException"]},{"name":"constructor(message: String, extensions: Map<String, Any>? = null, cause: Throwable? = null)","description":"viaduct.api.exception.FieldError.FieldError","location":"tenant/tenant-api/viaduct.api.exception/-field-error/-field-error.html","searchKeys":["FieldError","constructor(message: String, extensions: Map<String, Any>? = null, cause: Throwable? = null)","viaduct.api.exception.FieldError.FieldError"]},{"name":"constructor(name: String, containingType: Type<Parent>)","description":"viaduct.api.internal.FieldImpl.FieldImpl","location":"tenant/tenant-api/viaduct.api.internal/-field-impl/-field-impl.html","searchKeys":["FieldImpl","constructor(name: String, containingType: Type<Parent>)","viaduct.api.internal.FieldImpl.FieldImpl"]},{"name":"constructor(name: String, containingType: Type<Parent>, type: Type<UnwrappedType>)","description":"viaduct.api.internal.CompositeFieldImpl.CompositeFieldImpl","location":"tenant/tenant-api/viaduct.api.internal/-composite-field-impl/-composite-field-impl.html","searchKeys":["CompositeFieldImpl","constructor(name: String, containingType: Type<Parent>, type: Type<UnwrappedType>)","viaduct.api.internal.CompositeFieldImpl.CompositeFieldImpl"]},{"name":"constructor(name: String, reason: String, cause: Throwable? = null)","description":"viaduct.api.internal.MissingReflection.MissingReflection","location":"tenant/tenant-api/viaduct.api.internal/-missing-reflection/-missing-reflection.html","searchKeys":["MissingReflection","constructor(name: String, reason: String, cause: Throwable? = null)","viaduct.api.internal.MissingReflection.MissingReflection"]},{"name":"fun <T : CompositeOutput> empty(type: Type<T>): SelectionSet<T>","description":"viaduct.api.select.SelectionSet.Companion.empty","location":"tenant/tenant-api/viaduct.api.select/-selection-set/-companion/empty.html","searchKeys":["empty","fun <T : CompositeOutput> empty(type: Type<T>): SelectionSet<T>","viaduct.api.select.SelectionSet.Companion.empty"]},{"name":"fun <T : Enum<T>, Enum> enumFrom(clazz: KClass<T>, value: String): T","description":"viaduct.api.types.Enum.Companion.enumFrom","location":"tenant/tenant-api/viaduct.api.types/-enum/-companion/enum-from.html","searchKeys":["enumFrom","fun <T : Enum<T>, Enum> enumFrom(clazz: KClass<T>, value: String): T","viaduct.api.types.Enum.Companion.enumFrom"]},{"name":"fun <T : GRT> ofClass(cls: KClass<T>): Type<T>","description":"viaduct.api.reflect.Type.Companion.ofClass","location":"tenant/tenant-api/viaduct.api.reflect/-type/-companion/of-class.html","searchKeys":["ofClass","fun <T : GRT> ofClass(cls: KClass<T>): Type<T>","viaduct.api.reflect.Type.Companion.ofClass"]},{"name":"fun <T : Object, U : T> const(u: U): SelectionsLoader<T>","description":"viaduct.api.internal.select.SelectionsLoader.Companion.const","location":"tenant/tenant-api/viaduct.api.internal.select/-selections-loader/-companion/const.html","searchKeys":["const","fun <T : Object, U : T> const(u: U): SelectionsLoader<T>","viaduct.api.internal.select.SelectionsLoader.Companion.const"]},{"name":"fun <T : Object> dynamicBuilderFor(ctx: ExecutionContext, grtClazz: KClass<T>): ViaductObjectBuilder<T>","description":"viaduct.api.internal.ViaductObjectBuilder.Companion.dynamicBuilderFor","location":"tenant/tenant-api/viaduct.api.internal/-viaduct-object-builder/-companion/dynamic-builder-for.html","searchKeys":["dynamicBuilderFor","fun <T : Object> dynamicBuilderFor(ctx: ExecutionContext, grtClazz: KClass<T>): ViaductObjectBuilder<T>","viaduct.api.internal.ViaductObjectBuilder.Companion.dynamicBuilderFor"]},{"name":"fun <T : Object> dynamicBuilderFor(ctx: InternalContext, grtClazz: KClass<T>): ViaductObjectBuilder<T>","description":"viaduct.api.internal.ViaductObjectBuilder.Companion.dynamicBuilderFor","location":"tenant/tenant-api/viaduct.api.internal/-viaduct-object-builder/-companion/dynamic-builder-for.html","searchKeys":["dynamicBuilderFor","fun <T : Object> dynamicBuilderFor(ctx: InternalContext, grtClazz: KClass<T>): ViaductObjectBuilder<T>","viaduct.api.internal.ViaductObjectBuilder.Companion.dynamicBuilderFor"]},{"name":"fun <T, R : ObjectBase.Builder<T>> putWithAlias(builder: R, name: String, alias: String, value: Any?): R","description":"viaduct.api.internal.ObjectBaseTestHelpers.putWithAlias","location":"tenant/tenant-api/viaduct.api.internal/-object-base-test-helpers/put-with-alias.html","searchKeys":["putWithAlias","fun <T, R : ObjectBase.Builder<T>> putWithAlias(builder: R, name: String, alias: String, value: Any?): R","viaduct.api.internal.ObjectBaseTestHelpers.putWithAlias"]},{"name":"fun <T> ofValue(value: T): FieldValue<T>","description":"viaduct.api.FieldValue.Companion.ofValue","location":"tenant/tenant-api/viaduct.api/-field-value/-companion/of-value.html","searchKeys":["ofValue","fun <T> ofValue(value: T): FieldValue<T>","viaduct.api.FieldValue.Companion.ofValue"]},{"name":"fun inputType(name: String, schema: ViaductSchema): GraphQLInputObjectType","description":"viaduct.api.types.Arguments.Companion.inputType","location":"tenant/tenant-api/viaduct.api.types/-arguments/-companion/input-type.html","searchKeys":["inputType","fun inputType(name: String, schema: ViaductSchema): GraphQLInputObjectType","viaduct.api.types.Arguments.Companion.inputType"]},{"name":"fun inputType(name: String, schema: ViaductSchema): GraphQLInputObjectType","description":"viaduct.api.types.Input.Companion.inputType","location":"tenant/tenant-api/viaduct.api.types/-input/-companion/input-type.html","searchKeys":["inputType","fun inputType(name: String, schema: ViaductSchema): GraphQLInputObjectType","viaduct.api.types.Input.Companion.inputType"]},{"name":"fun interface VariablesProvider<T : Arguments>","description":"viaduct.api.VariablesProvider","location":"tenant/tenant-api/viaduct.api/-variables-provider/index.html","searchKeys":["VariablesProvider","fun interface VariablesProvider<T : Arguments>","viaduct.api.VariablesProvider"]},{"name":"fun isPresent(fieldName: String): Boolean","description":"viaduct.api.internal.InputLikeBase.isPresent","location":"tenant/tenant-api/viaduct.api.internal/-input-like-base/is-present.html","searchKeys":["isPresent","fun isPresent(fieldName: String): Boolean","viaduct.api.internal.InputLikeBase.isPresent"]},{"name":"fun ofError(error: Exception): FieldValue<Nothing>","description":"viaduct.api.FieldValue.Companion.ofError","location":"tenant/tenant-api/viaduct.api/-field-value/-companion/of-error.html","searchKeys":["ofError","fun ofError(error: Exception): FieldValue<Nothing>","viaduct.api.FieldValue.Companion.ofError"]},{"name":"interface Arguments : InputLike","description":"viaduct.api.types.Arguments","location":"tenant/tenant-api/viaduct.api.types/-arguments/index.html","searchKeys":["Arguments","interface Arguments : InputLike","viaduct.api.types.Arguments"]},{"name":"interface CompositeField<Parent : GRT, UnwrappedType : GRT> : Field<Parent> ","description":"viaduct.api.reflect.CompositeField","location":"tenant/tenant-api/viaduct.api.reflect/-composite-field/index.html","searchKeys":["CompositeField","interface CompositeField<Parent : GRT, UnwrappedType : GRT> : Field<Parent> ","viaduct.api.reflect.CompositeField"]},{"name":"interface CompositeOutput : GRT","description":"viaduct.api.types.CompositeOutput","location":"tenant/tenant-api/viaduct.api.types/-composite-output/index.html","searchKeys":["CompositeOutput","interface CompositeOutput : GRT","viaduct.api.types.CompositeOutput"]},{"name":"interface DynamicOutputValueBuilder<T>","description":"viaduct.api.DynamicOutputValueBuilder","location":"tenant/tenant-api/viaduct.api/-dynamic-output-value-builder/index.html","searchKeys":["DynamicOutputValueBuilder","interface DynamicOutputValueBuilder<T>","viaduct.api.DynamicOutputValueBuilder"]},{"name":"interface Enum : GRT","description":"viaduct.api.types.Enum","location":"tenant/tenant-api/viaduct.api.types/-enum/index.html","searchKeys":["Enum","interface Enum : GRT","viaduct.api.types.Enum"]},{"name":"interface ExecutionContext","description":"viaduct.api.context.ExecutionContext","location":"tenant/tenant-api/viaduct.api.context/-execution-context/index.html","searchKeys":["ExecutionContext","interface ExecutionContext","viaduct.api.context.ExecutionContext"]},{"name":"interface Factory","description":"viaduct.api.internal.select.SelectionsLoader.Factory","location":"tenant/tenant-api/viaduct.api.internal.select/-selections-loader/-factory/index.html","searchKeys":["Factory","interface Factory","viaduct.api.internal.select.SelectionsLoader.Factory"]},{"name":"interface Field<Parent : GRT>","description":"viaduct.api.reflect.Field","location":"tenant/tenant-api/viaduct.api.reflect/-field/index.html","searchKeys":["Field","interface Field<Parent : GRT>","viaduct.api.reflect.Field"]},{"name":"interface FieldExecutionContext<T : Object, Q : Query, A : Arguments, O : CompositeOutput> : ResolverExecutionContext","description":"viaduct.api.context.FieldExecutionContext","location":"tenant/tenant-api/viaduct.api.context/-field-execution-context/index.html","searchKeys":["FieldExecutionContext","interface FieldExecutionContext<T : Object, Q : Query, A : Arguments, O : CompositeOutput> : ResolverExecutionContext","viaduct.api.context.FieldExecutionContext"]},{"name":"interface GRT","description":"viaduct.api.types.GRT","location":"tenant/tenant-api/viaduct.api.types/-g-r-t/index.html","searchKeys":["GRT","interface GRT","viaduct.api.types.GRT"]},{"name":"interface GlobalID<T : NodeCompositeOutput>","description":"viaduct.api.globalid.GlobalID","location":"tenant/tenant-api/viaduct.api.globalid/-global-i-d/index.html","searchKeys":["GlobalID","interface GlobalID<T : NodeCompositeOutput>","viaduct.api.globalid.GlobalID"]},{"name":"interface GlobalIDCodec","description":"viaduct.api.globalid.GlobalIDCodec","location":"tenant/tenant-api/viaduct.api.globalid/-global-i-d-codec/index.html","searchKeys":["GlobalIDCodec","interface GlobalIDCodec","viaduct.api.globalid.GlobalIDCodec"]},{"name":"interface Input : InputLike","description":"viaduct.api.types.Input","location":"tenant/tenant-api/viaduct.api.types/-input/index.html","searchKeys":["Input","interface Input : InputLike","viaduct.api.types.Input"]},{"name":"interface InputLike : Struct","description":"viaduct.api.types.InputLike","location":"tenant/tenant-api/viaduct.api.types/-input-like/index.html","searchKeys":["InputLike","interface InputLike : Struct","viaduct.api.types.InputLike"]},{"name":"interface Interface : RecordOutput","description":"viaduct.api.types.Interface","location":"tenant/tenant-api/viaduct.api.types/-interface/index.html","searchKeys":["Interface","interface Interface : RecordOutput","viaduct.api.types.Interface"]},{"name":"interface InternalContext","description":"viaduct.api.internal.InternalContext","location":"tenant/tenant-api/viaduct.api.internal/-internal-context/index.html","searchKeys":["InternalContext","interface InternalContext","viaduct.api.internal.InternalContext"]},{"name":"interface Mutation : Object","description":"viaduct.api.types.Mutation","location":"tenant/tenant-api/viaduct.api.types/-mutation/index.html","searchKeys":["Mutation","interface Mutation : Object","viaduct.api.types.Mutation"]},{"name":"interface MutationFieldExecutionContext<T : Object, Q : Query, A : Arguments, O : CompositeOutput> : FieldExecutionContext<T, Q, A, O> ","description":"viaduct.api.context.MutationFieldExecutionContext","location":"tenant/tenant-api/viaduct.api.context/-mutation-field-execution-context/index.html","searchKeys":["MutationFieldExecutionContext","interface MutationFieldExecutionContext<T : Object, Q : Query, A : Arguments, O : CompositeOutput> : FieldExecutionContext<T, Q, A, O> ","viaduct.api.context.MutationFieldExecutionContext"]},{"name":"interface NodeCompositeOutput : CompositeOutput","description":"viaduct.api.types.NodeCompositeOutput","location":"tenant/tenant-api/viaduct.api.types/-node-composite-output/index.html","searchKeys":["NodeCompositeOutput","interface NodeCompositeOutput : CompositeOutput","viaduct.api.types.NodeCompositeOutput"]},{"name":"interface NodeExecutionContext<T : NodeObject> : ResolverExecutionContext","description":"viaduct.api.context.NodeExecutionContext","location":"tenant/tenant-api/viaduct.api.context/-node-execution-context/index.html","searchKeys":["NodeExecutionContext","interface NodeExecutionContext<T : NodeObject> : ResolverExecutionContext","viaduct.api.context.NodeExecutionContext"]},{"name":"interface NodeObject : Object, NodeCompositeOutput","description":"viaduct.api.types.NodeObject","location":"tenant/tenant-api/viaduct.api.types/-node-object/index.html","searchKeys":["NodeObject","interface NodeObject : Object, NodeCompositeOutput","viaduct.api.types.NodeObject"]},{"name":"interface NodeReferenceFactory","description":"viaduct.api.internal.NodeReferenceFactory","location":"tenant/tenant-api/viaduct.api.internal/-node-reference-factory/index.html","searchKeys":["NodeReferenceFactory","interface NodeReferenceFactory","viaduct.api.internal.NodeReferenceFactory"]},{"name":"interface NodeResolverBase<T : NodeObject>","description":"viaduct.api.internal.NodeResolverBase","location":"tenant/tenant-api/viaduct.api.internal/-node-resolver-base/index.html","searchKeys":["NodeResolverBase","interface NodeResolverBase<T : NodeObject>","viaduct.api.internal.NodeResolverBase"]},{"name":"interface Object : Struct, RecordOutput","description":"viaduct.api.types.Object","location":"tenant/tenant-api/viaduct.api.types/-object/index.html","searchKeys":["Object","interface Object : Struct, RecordOutput","viaduct.api.types.Object"]},{"name":"interface Query : Object","description":"viaduct.api.types.Query","location":"tenant/tenant-api/viaduct.api.types/-query/index.html","searchKeys":["Query","interface Query : Object","viaduct.api.types.Query"]},{"name":"interface RecordOutput : CompositeOutput","description":"viaduct.api.types.RecordOutput","location":"tenant/tenant-api/viaduct.api.types/-record-output/index.html","searchKeys":["RecordOutput","interface RecordOutput : CompositeOutput","viaduct.api.types.RecordOutput"]},{"name":"interface ReflectionLoader","description":"viaduct.api.internal.ReflectionLoader","location":"tenant/tenant-api/viaduct.api.internal/-reflection-loader/index.html","searchKeys":["ReflectionLoader","interface ReflectionLoader","viaduct.api.internal.ReflectionLoader"]},{"name":"interface ResolverBase<T>","description":"viaduct.api.internal.ResolverBase","location":"tenant/tenant-api/viaduct.api.internal/-resolver-base/index.html","searchKeys":["ResolverBase","interface ResolverBase<T>","viaduct.api.internal.ResolverBase"]},{"name":"interface ResolverExecutionContext : ExecutionContext","description":"viaduct.api.context.ResolverExecutionContext","location":"tenant/tenant-api/viaduct.api.context/-resolver-execution-context/index.html","searchKeys":["ResolverExecutionContext","interface ResolverExecutionContext : ExecutionContext","viaduct.api.context.ResolverExecutionContext"]},{"name":"interface SelectionSet<T : CompositeOutput>","description":"viaduct.api.select.SelectionSet","location":"tenant/tenant-api/viaduct.api.select/-selection-set/index.html","searchKeys":["SelectionSet","interface SelectionSet<T : CompositeOutput>","viaduct.api.select.SelectionSet"]},{"name":"interface SelectionSetFactory","description":"viaduct.api.internal.select.SelectionSetFactory","location":"tenant/tenant-api/viaduct.api.internal.select/-selection-set-factory/index.html","searchKeys":["SelectionSetFactory","interface SelectionSetFactory","viaduct.api.internal.select.SelectionSetFactory"]},{"name":"interface SelectionsLoader<T : CompositeOutput>","description":"viaduct.api.internal.select.SelectionsLoader","location":"tenant/tenant-api/viaduct.api.internal.select/-selections-loader/index.html","searchKeys":["SelectionsLoader","interface SelectionsLoader<T : CompositeOutput>","viaduct.api.internal.select.SelectionsLoader"]},{"name":"interface Struct : GRT","description":"viaduct.api.types.Struct","location":"tenant/tenant-api/viaduct.api.types/-struct/index.html","searchKeys":["Struct","interface Struct : GRT","viaduct.api.types.Struct"]},{"name":"interface TenantCodeInjector","description":"viaduct.api.TenantCodeInjector","location":"tenant/tenant-api/viaduct.api/-tenant-code-injector/index.html","searchKeys":["TenantCodeInjector","interface TenantCodeInjector","viaduct.api.TenantCodeInjector"]},{"name":"interface TenantModule","description":"viaduct.api.TenantModule","location":"tenant/tenant-api/viaduct.api/-tenant-module/index.html","searchKeys":["TenantModule","interface TenantModule","viaduct.api.TenantModule"]},{"name":"interface Type<out T : GRT>","description":"viaduct.api.reflect.Type","location":"tenant/tenant-api/viaduct.api.reflect/-type/index.html","searchKeys":["Type","interface Type<out T : GRT>","viaduct.api.reflect.Type"]},{"name":"interface Union : CompositeOutput","description":"viaduct.api.types.Union","location":"tenant/tenant-api/viaduct.api.types/-union/index.html","searchKeys":["Union","interface Union : CompositeOutput","viaduct.api.types.Union"]},{"name":"interface ValueMapper<D : Any>","description":"viaduct.api.ValueMapper","location":"tenant/tenant-api/viaduct.api/-value-mapper/index.html","searchKeys":["ValueMapper","interface ValueMapper<D : Any>","viaduct.api.ValueMapper"]},{"name":"interface VariablesProviderContext<T : Arguments> : ExecutionContext","description":"viaduct.api.context.VariablesProviderContext","location":"tenant/tenant-api/viaduct.api.context/-variables-provider-context/index.html","searchKeys":["VariablesProviderContext","interface VariablesProviderContext<T : Arguments> : ExecutionContext","viaduct.api.context.VariablesProviderContext"]},{"name":"interface ViaductTenantException","description":"viaduct.api.ViaductTenantException","location":"tenant/tenant-api/viaduct.api/-viaduct-tenant-exception/index.html","searchKeys":["ViaductTenantException","interface ViaductTenantException","viaduct.api.ViaductTenantException"]},{"name":"object Companion","description":"viaduct.api.FieldValue.Companion","location":"tenant/tenant-api/viaduct.api/-field-value/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.api.FieldValue.Companion"]},{"name":"object Companion","description":"viaduct.api.TenantCodeInjector.Companion","location":"tenant/tenant-api/viaduct.api/-tenant-code-injector/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.api.TenantCodeInjector.Companion"]},{"name":"object Companion","description":"viaduct.api.Variable.Companion","location":"tenant/tenant-api/viaduct.api/-variable/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.api.Variable.Companion"]},{"name":"object Companion","description":"viaduct.api.internal.ObjectBase.Companion","location":"tenant/tenant-api/viaduct.api.internal/-object-base/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.api.internal.ObjectBase.Companion"]},{"name":"object Companion","description":"viaduct.api.internal.ViaductObjectBuilder.Companion","location":"tenant/tenant-api/viaduct.api.internal/-viaduct-object-builder/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.api.internal.ViaductObjectBuilder.Companion"]},{"name":"object Companion","description":"viaduct.api.internal.select.SelectionsLoader.Companion","location":"tenant/tenant-api/viaduct.api.internal.select/-selections-loader/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.api.internal.select.SelectionsLoader.Companion"]},{"name":"object Companion","description":"viaduct.api.reflect.Type.Companion","location":"tenant/tenant-api/viaduct.api.reflect/-type/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.api.reflect.Type.Companion"]},{"name":"object Companion","description":"viaduct.api.select.SelectionSet.Companion","location":"tenant/tenant-api/viaduct.api.select/-selection-set/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.api.select.SelectionSet.Companion"]},{"name":"object Companion","description":"viaduct.api.types.Arguments.Companion","location":"tenant/tenant-api/viaduct.api.types/-arguments/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.api.types.Arguments.Companion"]},{"name":"object Companion","description":"viaduct.api.types.Enum.Companion","location":"tenant/tenant-api/viaduct.api.types/-enum/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.api.types.Enum.Companion"]},{"name":"object Companion","description":"viaduct.api.types.Input.Companion","location":"tenant/tenant-api/viaduct.api.types/-input/-companion/index.html","searchKeys":["Companion","object Companion","viaduct.api.types.Input.Companion"]},{"name":"object NoArguments : Arguments","description":"viaduct.api.types.Arguments.NoArguments","location":"tenant/tenant-api/viaduct.api.types/-arguments/-no-arguments/index.html","searchKeys":["NoArguments","object NoArguments : Arguments","viaduct.api.types.Arguments.NoArguments"]},{"name":"object NoSelections : SelectionSet<CompositeOutput.NotComposite> ","description":"viaduct.api.select.SelectionSet.NoSelections","location":"tenant/tenant-api/viaduct.api.select/-selection-set/-no-selections/index.html","searchKeys":["NoSelections","object NoSelections : SelectionSet<CompositeOutput.NotComposite> ","viaduct.api.select.SelectionSet.NoSelections"]},{"name":"object NotComposite : CompositeOutput","description":"viaduct.api.types.CompositeOutput.NotComposite","location":"tenant/tenant-api/viaduct.api.types/-composite-output/-not-composite/index.html","searchKeys":["NotComposite","object NotComposite : CompositeOutput","viaduct.api.types.CompositeOutput.NotComposite"]},{"name":"object ObjectBaseTestHelpers","description":"viaduct.api.internal.ObjectBaseTestHelpers","location":"tenant/tenant-api/viaduct.api.internal/-object-base-test-helpers/index.html","searchKeys":["ObjectBaseTestHelpers","object ObjectBaseTestHelpers","viaduct.api.internal.ObjectBaseTestHelpers"]},{"name":"open class FieldError(val message: String, val extensions: Map<String, Any>? = null, cause: Throwable? = null) : Exception","description":"viaduct.api.exception.FieldError","location":"tenant/tenant-api/viaduct.api.exception/-field-error/index.html","searchKeys":["FieldError","open class FieldError(val message: String, val extensions: Map<String, Any>? = null, cause: Throwable? = null) : Exception","viaduct.api.exception.FieldError"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"viaduct.api.internal.InputLikeBase.equals","location":"tenant/tenant-api/viaduct.api.internal/-input-like-base/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","viaduct.api.internal.InputLikeBase.equals"]},{"name":"open override fun <U : CompositeOutput.NotComposite, R : CompositeOutput> selectionSetFor(field: CompositeField<U, R>): SelectionSet<R>","description":"viaduct.api.select.SelectionSet.NoSelections.selectionSetFor","location":"tenant/tenant-api/viaduct.api.select/-selection-set/-no-selections/selection-set-for.html","searchKeys":["selectionSetFor","open override fun <U : CompositeOutput.NotComposite, R : CompositeOutput> selectionSetFor(field: CompositeField<U, R>): SelectionSet<R>","viaduct.api.select.SelectionSet.NoSelections.selectionSetFor"]},{"name":"open override fun <U : CompositeOutput.NotComposite> contains(field: Field<U>): Boolean","description":"viaduct.api.select.SelectionSet.NoSelections.contains","location":"tenant/tenant-api/viaduct.api.select/-selection-set/-no-selections/contains.html","searchKeys":["contains","open override fun <U : CompositeOutput.NotComposite> contains(field: Field<U>): Boolean","viaduct.api.select.SelectionSet.NoSelections.contains"]},{"name":"open override fun <U : CompositeOutput.NotComposite> requestsType(type: Type<U>): Boolean","description":"viaduct.api.select.SelectionSet.NoSelections.requestsType","location":"tenant/tenant-api/viaduct.api.select/-selection-set/-no-selections/requests-type.html","searchKeys":["requestsType","open override fun <U : CompositeOutput.NotComposite> requestsType(type: Type<U>): Boolean","viaduct.api.select.SelectionSet.NoSelections.requestsType"]},{"name":"open override fun <U : CompositeOutput.NotComposite> selectionSetFor(type: Type<U>): SelectionSet<U>","description":"viaduct.api.select.SelectionSet.NoSelections.selectionSetFor","location":"tenant/tenant-api/viaduct.api.select/-selection-set/-no-selections/selection-set-for.html","searchKeys":["selectionSetFor","open override fun <U : CompositeOutput.NotComposite> selectionSetFor(type: Type<U>): SelectionSet<U>","viaduct.api.select.SelectionSet.NoSelections.selectionSetFor"]},{"name":"open override fun build(): T","description":"viaduct.api.internal.ViaductObjectBuilder.build","location":"tenant/tenant-api/viaduct.api.internal/-viaduct-object-builder/build.html","searchKeys":["build","open override fun build(): T","viaduct.api.internal.ViaductObjectBuilder.build"]},{"name":"open override fun hashCode(): Int","description":"viaduct.api.internal.InputLikeBase.hashCode","location":"tenant/tenant-api/viaduct.api.internal/-input-like-base/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","viaduct.api.internal.InputLikeBase.hashCode"]},{"name":"open override fun isEmpty(): Boolean","description":"viaduct.api.select.SelectionSet.NoSelections.isEmpty","location":"tenant/tenant-api/viaduct.api.select/-selection-set/-no-selections/is-empty.html","searchKeys":["isEmpty","open override fun isEmpty(): Boolean","viaduct.api.select.SelectionSet.NoSelections.isEmpty"]},{"name":"open override fun put(name: String, value: Any?): ViaductObjectBuilder<T>","description":"viaduct.api.internal.ViaductObjectBuilder.put","location":"tenant/tenant-api/viaduct.api.internal/-viaduct-object-builder/put.html","searchKeys":["put","open override fun put(name: String, value: Any?): ViaductObjectBuilder<T>","viaduct.api.internal.ViaductObjectBuilder.put"]},{"name":"open override val cause: Throwable","description":"viaduct.api.ViaductTenantResolverException.cause","location":"tenant/tenant-api/viaduct.api/-viaduct-tenant-resolver-exception/cause.html","searchKeys":["cause","open override val cause: Throwable","viaduct.api.ViaductTenantResolverException.cause"]},{"name":"open override val containingType: Type<Parent>","description":"viaduct.api.internal.CompositeFieldImpl.containingType","location":"tenant/tenant-api/viaduct.api.internal/-composite-field-impl/containing-type.html","searchKeys":["containingType","open override val containingType: Type<Parent>","viaduct.api.internal.CompositeFieldImpl.containingType"]},{"name":"open override val containingType: Type<Parent>","description":"viaduct.api.internal.FieldImpl.containingType","location":"tenant/tenant-api/viaduct.api.internal/-field-impl/containing-type.html","searchKeys":["containingType","open override val containingType: Type<Parent>","viaduct.api.internal.FieldImpl.containingType"]},{"name":"open override val message: String","description":"viaduct.api.exception.FieldError.message","location":"tenant/tenant-api/viaduct.api.exception/-field-error/message.html","searchKeys":["message","open override val message: String","viaduct.api.exception.FieldError.message"]},{"name":"open override val message: String","description":"viaduct.api.internal.MissingReflection.message","location":"tenant/tenant-api/viaduct.api.internal/-missing-reflection/message.html","searchKeys":["message","open override val message: String","viaduct.api.internal.MissingReflection.message"]},{"name":"open override val name: String","description":"viaduct.api.internal.CompositeFieldImpl.name","location":"tenant/tenant-api/viaduct.api.internal/-composite-field-impl/name.html","searchKeys":["name","open override val name: String","viaduct.api.internal.CompositeFieldImpl.name"]},{"name":"open override val name: String","description":"viaduct.api.internal.FieldImpl.name","location":"tenant/tenant-api/viaduct.api.internal/-field-impl/name.html","searchKeys":["name","open override val name: String","viaduct.api.internal.FieldImpl.name"]},{"name":"open override val type: Type<CompositeOutput.NotComposite>","description":"viaduct.api.select.SelectionSet.NoSelections.type","location":"tenant/tenant-api/viaduct.api.select/-selection-set/-no-selections/type.html","searchKeys":["type","open override val type: Type<CompositeOutput.NotComposite>","viaduct.api.select.SelectionSet.NoSelections.type"]},{"name":"open override val type: Type<UnwrappedType>","description":"viaduct.api.internal.CompositeFieldImpl.type","location":"tenant/tenant-api/viaduct.api.internal/-composite-field-impl/type.html","searchKeys":["type","open override val type: Type<UnwrappedType>","viaduct.api.internal.CompositeFieldImpl.type"]},{"name":"open val packageName: String","description":"viaduct.api.TenantModule.packageName","location":"tenant/tenant-api/viaduct.api/-tenant-module/package-name.html","searchKeys":["packageName","open val packageName: String","viaduct.api.TenantModule.packageName"]},{"name":"override fun put(name: String, value: Any?): ObjectBase.Builder<T>","description":"viaduct.api.internal.ObjectBase.Builder.put","location":"tenant/tenant-api/viaduct.api.internal/-object-base/-builder/put.html","searchKeys":["put","override fun put(name: String, value: Any?): ObjectBase.Builder<T>","viaduct.api.internal.ObjectBase.Builder.put"]},{"name":"sealed interface FieldValue<out T>","description":"viaduct.api.FieldValue","location":"tenant/tenant-api/viaduct.api/-field-value/index.html","searchKeys":["FieldValue","sealed interface FieldValue<out T>","viaduct.api.FieldValue"]},{"name":"suspend fun <T> get(fieldName: String, baseFieldTypeClass: KClass<*>, alias: String? = null): T","description":"viaduct.api.internal.ObjectBase.get","location":"tenant/tenant-api/viaduct.api.internal/-object-base/get.html","searchKeys":["get","suspend fun <T> get(fieldName: String, baseFieldTypeClass: KClass<*>, alias: String? = null): T","viaduct.api.internal.ObjectBase.get"]},{"name":"suspend fun wrapResolveException(resolverId: String, resolveFn: suspend () -> Any?): Any?","description":"viaduct.api.wrapResolveException","location":"tenant/tenant-api/viaduct.api/wrap-resolve-exception.html","searchKeys":["wrapResolveException","suspend fun wrapResolveException(resolverId: String, resolveFn: suspend () -> Any?): Any?","viaduct.api.wrapResolveException"]},{"name":"val ExecutionContext.internal: InternalContext","description":"viaduct.api.internal.internal","location":"tenant/tenant-api/viaduct.api.internal/internal.html","searchKeys":["internal","val ExecutionContext.internal: InternalContext","viaduct.api.internal.internal"]},{"name":"val Naive: TenantCodeInjector","description":"viaduct.api.TenantCodeInjector.Companion.Naive","location":"tenant/tenant-api/viaduct.api/-tenant-code-injector/-companion/-naive.html","searchKeys":["Naive","val Naive: TenantCodeInjector","viaduct.api.TenantCodeInjector.Companion.Naive"]},{"name":"val context: InternalContext","description":"viaduct.api.internal.ViaductObjectBuilder.context","location":"tenant/tenant-api/viaduct.api.internal/-viaduct-object-builder/context.html","searchKeys":["context","val context: InternalContext","viaduct.api.internal.ViaductObjectBuilder.context"]},{"name":"val engineObjectData: EngineObjectData","description":"viaduct.api.internal.ObjectBase.engineObjectData","location":"tenant/tenant-api/viaduct.api.internal/-object-base/engine-object-data.html","searchKeys":["engineObjectData","val engineObjectData: EngineObjectData","viaduct.api.internal.ObjectBase.engineObjectData"]},{"name":"val extensions: Map<String, Any>? = null","description":"viaduct.api.exception.FieldError.extensions","location":"tenant/tenant-api/viaduct.api.exception/-field-error/extensions.html","searchKeys":["extensions","val extensions: Map<String, Any>? = null","viaduct.api.exception.FieldError.extensions"]},{"name":"val fieldName: String","description":"viaduct.api.internal.ResolverFor.fieldName","location":"tenant/tenant-api/viaduct.api.internal/-resolver-for/field-name.html","searchKeys":["fieldName","val fieldName: String","viaduct.api.internal.ResolverFor.fieldName"]},{"name":"val fromArgument: String","description":"viaduct.api.Variable.fromArgument","location":"tenant/tenant-api/viaduct.api/-variable/from-argument.html","searchKeys":["fromArgument","val fromArgument: String","viaduct.api.Variable.fromArgument"]},{"name":"val fromObjectField: String","description":"viaduct.api.Variable.fromObjectField","location":"tenant/tenant-api/viaduct.api/-variable/from-object-field.html","searchKeys":["fromObjectField","val fromObjectField: String","viaduct.api.Variable.fromObjectField"]},{"name":"val fromQueryField: String","description":"viaduct.api.Variable.fromQueryField","location":"tenant/tenant-api/viaduct.api/-variable/from-query-field.html","searchKeys":["fromQueryField","val fromQueryField: String","viaduct.api.Variable.fromQueryField"]},{"name":"val graphqlType: GraphQLObjectType","description":"viaduct.api.internal.ViaductObjectBuilder.graphqlType","location":"tenant/tenant-api/viaduct.api.internal/-viaduct-object-builder/graphql-type.html","searchKeys":["graphqlType","val graphqlType: GraphQLObjectType","viaduct.api.internal.ViaductObjectBuilder.graphqlType"]},{"name":"val name: String","description":"viaduct.api.Variable.name","location":"tenant/tenant-api/viaduct.api/-variable/name.html","searchKeys":["name","val name: String","viaduct.api.Variable.name"]},{"name":"val name: String","description":"viaduct.api.internal.MissingReflection.name","location":"tenant/tenant-api/viaduct.api.internal/-missing-reflection/name.html","searchKeys":["name","val name: String","viaduct.api.internal.MissingReflection.name"]},{"name":"val objectValueFragment: String","description":"viaduct.api.Resolver.objectValueFragment","location":"tenant/tenant-api/viaduct.api/-resolver/object-value-fragment.html","searchKeys":["objectValueFragment","val objectValueFragment: String","viaduct.api.Resolver.objectValueFragment"]},{"name":"val queryValueFragment: String","description":"viaduct.api.Resolver.queryValueFragment","location":"tenant/tenant-api/viaduct.api/-resolver/query-value-fragment.html","searchKeys":["queryValueFragment","val queryValueFragment: String","viaduct.api.Resolver.queryValueFragment"]},{"name":"val reason: String","description":"viaduct.api.internal.MissingReflection.reason","location":"tenant/tenant-api/viaduct.api.internal/-missing-reflection/reason.html","searchKeys":["reason","val reason: String","viaduct.api.internal.MissingReflection.reason"]},{"name":"val resolver: String","description":"viaduct.api.ViaductTenantResolverException.resolver","location":"tenant/tenant-api/viaduct.api/-viaduct-tenant-resolver-exception/resolver.html","searchKeys":["resolver","val resolver: String","viaduct.api.ViaductTenantResolverException.resolver"]},{"name":"val resolversCallChain: String","description":"viaduct.api.ViaductTenantResolverException.resolversCallChain","location":"tenant/tenant-api/viaduct.api/-viaduct-tenant-resolver-exception/resolvers-call-chain.html","searchKeys":["resolversCallChain","val resolversCallChain: String","viaduct.api.ViaductTenantResolverException.resolversCallChain"]},{"name":"val typeName: String","description":"viaduct.api.internal.NodeResolverFor.typeName","location":"tenant/tenant-api/viaduct.api.internal/-node-resolver-for/type-name.html","searchKeys":["typeName","val typeName: String","viaduct.api.internal.NodeResolverFor.typeName"]},{"name":"val typeName: String","description":"viaduct.api.internal.ResolverFor.typeName","location":"tenant/tenant-api/viaduct.api.internal/-resolver-for/type-name.html","searchKeys":["typeName","val typeName: String","viaduct.api.internal.ResolverFor.typeName"]},{"name":"val types: String","description":"viaduct.api.Variables.types","location":"tenant/tenant-api/viaduct.api/-variables/types.html","searchKeys":["types","val types: String","viaduct.api.Variables.types"]},{"name":"val variables: Array<Variable>","description":"viaduct.api.Resolver.variables","location":"tenant/tenant-api/viaduct.api/-resolver/variables.html","searchKeys":["variables","val variables: Array<Variable>","viaduct.api.Resolver.variables"]}]