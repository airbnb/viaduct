plugins {
    id("kotlin-project")
    id("viaduct-feature-app")
    id("kotlin-static-analysis")
}

viaductFeatureApp {
}

dependencies {
    api(libs.graphql.java)
    api(libs.guice)
    api(libs.javax.inject)
    api(project(":engine:engine-api"))
    api(project(":service:service-api"))
    api(project(":tenant:tenant-api"))

    implementation(project(":shared:graphql"))
    implementation(project(":shared:utils"))
    implementation(libs.classgraph)
    implementation(libs.guava)
    implementation(libs.slf4j.api)
    implementation(libs.kotlin.reflect)
    implementation(libs.kotlinx.coroutines.core)
    implementation(libs.kotlinx.coroutines.core.jvm)

    testImplementation(testFixtures(project(":engine:engine-api")))
    testImplementation(testFixtures(project(":service:service-api")))
    testImplementation(testFixtures(project(":shared:graphql")))
    testImplementation(testFixtures(project(":tenant:tenant-api")))
    testImplementation(project(":engine:engine-runtime"))
    testImplementation(project(":service:service-runtime"))
    testImplementation(project(":shared:arbitrary"))
    testImplementation(project(":tenant:testapps:fixtures"))
    testImplementation(libs.io.mockk.dsl)
    testImplementation(libs.io.mockk.jvm)
    testImplementation(libs.jackson.core)
    testImplementation(libs.jackson.databind)
    testImplementation(libs.jackson.module)
    testImplementation(libs.kotest.property.jvm)
    testImplementation(libs.kotlinx.coroutines.jdk8)
    testImplementation(libs.kotlinx.coroutines.test)
    testImplementation(libs.strikt.core)
}

afterEvaluate {
    tasks.named("explodeCodeSourceTest") { // TODO: a hack for the sake of this dependency-analysis task...
        dependsOn(tasks.named("generateBackingdataSchemaObjects"))
        dependsOn(tasks.named("generateBackingdataSchemaObjects"))
        dependsOn(tasks.named("generateBackingdataTenant"))
        dependsOn(tasks.named("generateBatchresolvererrorhandlingSchemaObjects"))
        dependsOn(tasks.named("generateBatchresolvererrorhandlingTenant"))
        dependsOn(tasks.named("generateContextfactorySchemaObjects"))
        dependsOn(tasks.named("generateContextfactoryTenant"))
        dependsOn(tasks.named("generateEmptyvariablesSchemaObjects"))
        dependsOn(tasks.named("generateEmptyvariablesTenant"))
        dependsOn(tasks.named("generateFeatureschemaSchemaObjects"))
        dependsOn(tasks.named("generateFeatureschemaTenant"))
        dependsOn(tasks.named("generateFieldbatchresolverSchemaObjects"))
        dependsOn(tasks.named("generateFieldbatchresolverTenant"))
        dependsOn(tasks.named("generateGlobalidSchemaObjects"))
        dependsOn(tasks.named("generateGlobalidTenant"))
        dependsOn(tasks.named("generateIdofSchemaObjects"))
        dependsOn(tasks.named("generateIdofTenant"))
        dependsOn(tasks.named("generateIncludedirectiveSchemaObjects"))
        dependsOn(tasks.named("generateIncludedirectiveTenant"))
        dependsOn(tasks.named("generateInterfacetypesSchemaObjects"))
        dependsOn(tasks.named("generateInterfacetypesTenant"))
        dependsOn(tasks.named("generateInvalidfragmentsyntaxSchemaObjects"))
        dependsOn(tasks.named("generateInvalidfragmentsyntaxTenant"))
        dependsOn(tasks.named("generateInvalidobjectfragmentSchemaObjects"))
        dependsOn(tasks.named("generateInvalidobjectfragmentTenant"))
        dependsOn(tasks.named("generateInvalidqueryfragmentSchemaObjects"))
        dependsOn(tasks.named("generateInvalidqueryfragmentTenant"))
        dependsOn(tasks.named("generateInvalidsyntaxSchemaObjects"))
        dependsOn(tasks.named("generateInvalidsyntaxTenant"))
        dependsOn(tasks.named("generateNoderesolverSchemaObjects"))
        dependsOn(tasks.named("generateNoderesolverTenant"))
        dependsOn(tasks.named("generateNonexistenttypesSchemaObjects"))
        dependsOn(tasks.named("generateNonexistenttypesTenant"))
        dependsOn(tasks.named("generateNullfornonnullableSchemaObjects"))
        dependsOn(tasks.named("generateNullfornonnullableTenant"))
        dependsOn(tasks.named("generateObjecttypesSchemaObjects"))
        dependsOn(tasks.named("generateObjecttypesTenant"))
        dependsOn(tasks.named("generateQueryselectionsSchemaObjects"))
        dependsOn(tasks.named("generateQueryselectionsTenant"))
        dependsOn(tasks.named("generateReflectionSchemaObjects"))
        dependsOn(tasks.named("generateReflectionTenant"))
        dependsOn(tasks.named("generateScopesSchemaObjects"))
        dependsOn(tasks.named("generateScopesTenant"))
        dependsOn(tasks.named("generateSelectionsetSchemaObjects"))
        dependsOn(tasks.named("generateSelectionsetTenant"))
        dependsOn(tasks.named("generateSelectSchemaObjects"))
        dependsOn(tasks.named("generateSelectTenant"))
        dependsOn(tasks.named("generateSubmutationSchemaObjects"))
        dependsOn(tasks.named("generateSubmutationTenant"))
        dependsOn(tasks.named("generateTemponeofviolationSchemaObjects"))
        dependsOn(tasks.named("generateTemponeofviolationTenant"))
        dependsOn(tasks.named("generateUniontypesSchemaObjects"))
        dependsOn(tasks.named("generateUniontypesTenant"))
        dependsOn(tasks.named("generateVariablesproviderexceptionSchemaObjects"))
        dependsOn(tasks.named("generateVariablesproviderexceptionTenant"))
        dependsOn(tasks.named("generateVariablesproviderSchemaObjects"))
        dependsOn(tasks.named("generateVariablesproviderTenant"))
        dependsOn(tasks.named("generateTenantapibootstrapperSchemaObjects"))
        dependsOn(tasks.named("generateTenantapibootstrapperTenant"))
    }
}
