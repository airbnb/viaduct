# This is a test schema that is used as reference to test out the codegen bytecode to GRT differences.
# The schema is similar to the graphql-java example only extended with viaduct costumization
# https://github.com/graphql-java/graphql-java/blob/master/src/test/resources/starWarsSchema.graphqls

directive @resolver on FIELD_DEFINITION | OBJECT
directive @scope(to: [String!]!) repeatable on OBJECT | INPUT_OBJECT | ENUM | INTERFACE | UNION

type Query @scope(to: ["*"]) {
  _: String @deprecated
}
type Mutation @scope(to: ["*"]) {
  _: String @deprecated
}
type Subscription @scope(to: ["*"]) {
  _: String @deprecated
}

interface Node @scope(to: ["starwars"]) {
  id: ID!
}

interface Product implements Node @scope(to: ["starwars"]) {
  id: ID!
  name: String!
}

enum Episode @scope(to: ["starwars"]) {
  NEWHOPE
  EMPIRE
  JEDI
}

interface Character @scope(to: ["starwars"]) {
  id: String!
  name: String!
  friends: [Character]
  appearsIn: [Episode]!
}

type Human implements Character @scope(to: ["starwars"]) {
  id: String!
  name: String!
  friends: [Character] @resolver
  appearsIn: [Episode]!
  homePlanet: String
}

type Droid implements Character @scope(to: ["starwars"]) {
  id: String!
  name: String!
  friends: [Character] @resolver
  appearsIn: [Episode]!
  primaryFunction: String
}

type ConcreteProduct implements Product & Node @scope(to: ["starwars"]) {
  id: ID!
  name: String!
  price: Int
}

extend type Query @scope(to: ["starwars"]) {
  hero(episode: Episode): Character @resolver
  human(id: String!): Human @resolver
  droid(id: String!): Droid @resolver
  allHumans: [Human] @resolver
  allDroids: [Droid] @resolver
  product(id: ID!): Product @resolver
  concreteProduct(id: ID!): ConcreteProduct @resolver
}
