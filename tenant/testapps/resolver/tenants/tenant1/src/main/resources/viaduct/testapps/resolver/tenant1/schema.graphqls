enum TestEnum @scope(to: ["publicScope"]) {
  VALUE1
  VALUE2
}

interface TestObjectInterface @scope(to: ["publicScope"]) {
  strValue: String!
}

type TestObjectValue implements TestObjectInterface @scope(to: ["publicScope"]) {
  strValue: String!
  optStrValue: String
  enumValue: TestEnum!
  optEnumValue: TestEnum
}

type TestNestedValue @scope(to: ["publicScope"]) {
  value: String
  nestedValue: String
  nestedObject: Test2ObjectValue
}

type TestBackingData @scope(to: ["publicScope"]) {
  backingDataValue: BackingData @backingData(class: "viaduct.testapps.resolver.tenant1.BackingDataValue") @resolver

  strValue: String @resolver
}

type TestResolvedFieldValue @scope(to: ["publicScope"]) {
  value: String
  resolvedObject: TestObjectValue @resolver
}

type TestResolvedFieldErrorValue @scope(to: ["publicScope"]) {
  nestedValue: TestObjectValue
}

extend type Query @scope(to: ["publicScope"]) {
  scalarString: String @resolver
  scalarStringWithArgs(input: String): String @resolver
  scalarEnum: TestEnum @resolver
  scalarInt: Int @resolver
  objectValue: TestObjectValue @resolver
  objectOptionalWithArgs(strValue: String, enumValue: TestEnum): TestObjectValue @resolver
  interfaceValue: TestObjectInterface @resolver
  listObjectValue: [TestObjectValue] @resolver
  nestedField: TestNestedValue @resolver
  throwsException: String @resolver
  notAnnotatedResolver: String
  nestedFieldException: TestNestedValue @resolver
  nestedFieldFragmentError: TestNestedValue @resolver
  invalidNullValue: TestObjectValue @resolver
  backingData: TestBackingData @resolver
  nestedFieldError: TestResolvedFieldErrorValue @resolver
  resolvedNestedObject: TestResolvedFieldValue @resolver
}
