name: Release

on:
  workflow_dispatch:
    inputs:
        release_version:
            description: 'Release version (e.g., 1.0.0)'
            required: true
        publish_snapshot:
            description: 'Publish snapshot build'
            required: false
            default: false
            type: boolean

jobs:
  publish-plugins:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS_EXTRA: "-Dorg.gradle.parallel=false -Dorg.gradle.caching=true -Dorg.gradle.daemon=false"
      GRADLE_SCAN: "false"
    steps:
      - name: Set release ref
        if: ${{ !inputs.publish_snapshot }}
        run: |
          echo "RELEASE_REF=release/v${{ inputs.release_version }}" >> "$GITHUB_ENV"
      - name: Set release ref for snapshot publish
        if: inputs.publish_snapshot
        run: |
          echo "RELEASE_REF=main" >> "$GITHUB_ENV"

      - uses: actions/checkout@v5
      - name: Check release branch exists
        run: |
            if ! git ls-remote --heads origin $RELEASE_REF; then
                echo "‚ùå Release branch $RELEASE_REF does not exist."
                exit 1
            fi
            echo "‚úÖ Release branch exists."

      - uses: actions/checkout@v5
        with:
          ref: ${{ env.RELEASE_REF }}

      - name: Verify Gradle wrapper
        run: |
          if [ ! -f "./gradlew" ]; then
            echo "‚ùå gradlew not found"
            exit 1
          fi
          chmod +x ./gradlew
          echo "‚úÖ Gradle wrapper ready"

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties', '**/libs.versions.toml', '**/build.gradle.kts') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Download dependencies
        run: |
          echo "üì• Downloading Gradle dependencies..."
          ./gradlew dependencies --no-scan || {
            echo "‚ùå Failed to download dependencies"
            exit 1
          }
          echo "‚úÖ Dependencies downloaded successfully"
      - name: Check project
        run: |
          echo "üî® Building project..."
          ./gradlew clean --no-scan || { echo "‚ùå Clean failed"; exit 1; }
          ./gradlew check --no-scan || { echo "‚ùå Check failed"; exit 1; }
          echo "‚úÖ Project built successfully"
      - name: Publish Gradle Plugins
        env:
          VIADUCT_GRADLE_PUBLISH_KEY: ${{ secrets.VIADUCT_GRADLE_PUBLISH_KEY }}
          VIADUCT_GRADLE_PUBLISH_SECRET: ${{ secrets.VIADUCT_GRADLE_PUBLISH_SECRET }}
          VIADUCT_SONATYPE_USERNAME: ${{ secrets.VIADUCT_SONATYPE_USERNAME }}
          VIADUCT_SONATYPE_PASSWORD: ${{ secrets.VIADUCT_SONATYPE_PASSWORD }}
        run: |
          python3 ./.github/scripts/publish_release.py
