package viaduct.graphql.test

import graphql.ExecutionResult
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlin.test.assertTrue

/**
 * DSL Extension function for ExecutionResult to assert equality with a map built using a DSL function.
 *  Since Arrays are not generated by GraphQL specification, use to arrayOf to assert an array of DSL QueryResultBuilderFn
 *  Use listOf to assert a list of fixed values
 *
 * @param mapFn The DSL function to build the expected map.
 *
 * Example of use:
 *
 * testApp.execute("query TestQuery { theQuery }")
 *  .assertEquals {
 *      "data" to {
 *          "scalarStringOut" to "tenant1 value"
 *          "listOfStrings" to listOf("a", "b", "c")
 *          "listOfDSLFunctions" to arrayOf(
 *              {
 *                  "value" to "tenant1 value"
 *              }
 *          )
 *      }
 *  }
 */
fun ExecutionResult.assertEquals(mapFn: QueryResultBuilderFn) = assertEquals(queryResultMap(mapFn), this.toSpecification())

fun ExecutionResult.hasError(expectedMessage: String) {
    val spec = this.toSpecification()
    val errors = spec["errors"] as? List<*>

    assertNotNull(errors, "Expected errors but found none. Result: $spec")
    assertTrue(errors.isNotEmpty(), "Expected errors but errors list was empty. Result: $spec")

    val errorMessages = errors.mapNotNull { error ->
        (error as? Map<*, *>)?.get("message") as? String
    }

    assertTrue(
        errorMessages.any { it.contains(expectedMessage) },
        "Expected error message containing '$expectedMessage' but found: $errorMessages"
    )
}

/**
 * Type alias for a function that operates on a MapBuilder.
 * This is used as function parameter on DSL functions.
 */
typealias QueryResultBuilderFn = QueryResultMapBuilder.() -> Unit

/**
 * Function to create a map using a DSL.
 *
 * @param buildAction The DSL function to build the map.
 * @return The built map.
 */
inline fun queryResultMap(buildAction: QueryResultMapBuilder.() -> Unit): Map<String, Any?> {
    return QueryResultMapBuilder().apply(buildAction).build()
}

/**
 * A builder class for creating maps using a DSL.
 */
class QueryResultMapBuilder {
    private val map = mutableMapOf<String, Any?>()

    /**
     * Infix function to add a key-value pair to the map.
     *
     * @param value The value to associate with the key.
     */
    infix fun String.to(value: Any?) {
        map[this] = value
    }

    infix fun String.to(value: QueryResultBuilderFn) {
        map[this] = queryResultMap(value)
    }

    /**
     * Use arrayOf to check for a list of DSL maps
     * To use list of fixed values, use listOf
     */
    infix fun String.to(values: Array<QueryResultBuilderFn>) {
        map[this] = values.map { queryResultMap(it) }
    }

    /**
     * Builds and returns the map.
     *
     * @return The built map.
     */
    fun build(): Map<String, Any?> = map
}
